# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
            },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
            },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
            },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
            },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
            },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]

class _RolesListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.Roles']]


class _RolesListFilterHasInput(TypedDict):
    has: 'enums.Roles'


class _RolesListFilterHasEveryInput(TypedDict):
    has_every: List['enums.Roles']


class _RolesListFilterHasSomeInput(TypedDict):
    has_some: List['enums.Roles']


class _RolesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


RolesListFilter = Union[
    _RolesListFilterHasInput,
    _RolesListFilterEqualsInput,
    _RolesListFilterHasSomeInput,
    _RolesListFilterIsEmptyInput,
    _RolesListFilterHasEveryInput,
]


class _RolesListUpdateSet(TypedDict):
    set: List['enums.Roles']


class _RolesListUpdatePush(TypedDict):
    push: List['enums.Roles']


RolesListUpdate = Union[
    List['enums.Roles'],
    _RolesListUpdateSet,
    _RolesListUpdatePush,
]


# Users types

class UsersOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Users create method"""
    id: _str
    avatar: Optional[_str]
    childIDs: List[_str]
    children: 'ChildrenCreateManyNestedWithoutRelationsInput'
    eventIDs: List[_str]
    events: 'EventsCreateManyNestedWithoutRelationsInput'
    notifications: 'NotificationsCreateManyNestedWithoutRelationsInput'
    reviews: 'ReviewsCreateManyNestedWithoutRelationsInput'


class UsersCreateInput(UsersOptionalCreateInput):
    """Required arguments to the Users create method"""
    firstName: _str
    lastName: _str
    email: _str
    role: 'enums.Roles'
    password: _str
    city: _str
    state: _str
    zipCode: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UsersOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Users create method, without relations"""
    id: _str
    avatar: Optional[_str]
    childIDs: List[_str]
    eventIDs: List[_str]


class UsersCreateWithoutRelationsInput(UsersOptionalCreateWithoutRelationsInput):
    """Required arguments to the Users create method, without relations"""
    firstName: _str
    lastName: _str
    email: _str
    role: 'enums.Roles'
    password: _str
    city: _str
    state: _str
    zipCode: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime

class UsersConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UsersCreateWithoutRelationsInput'
    where: 'UsersWhereUniqueInput'

class UsersCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UsersCreateWithoutRelationsInput'
    connect: 'UsersWhereUniqueInput'
    connect_or_create: 'UsersConnectOrCreateWithoutRelationsInput'


class UsersCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UsersCreateWithoutRelationsInput', List['UsersCreateWithoutRelationsInput']]
    connect: Union['UsersWhereUniqueInput', List['UsersWhereUniqueInput']]
    connect_or_create: Union['UsersConnectOrCreateWithoutRelationsInput', List['UsersConnectOrCreateWithoutRelationsInput']]

_UsersWhereUnique_id_Input = TypedDict(
    '_UsersWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_UsersWhereUnique_email_Input = TypedDict(
    '_UsersWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

UsersWhereUniqueInput = Union[
    '_UsersWhereUnique_id_Input',
    '_UsersWhereUnique_email_Input',
]


class UsersUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    firstName: _str
    lastName: _str
    email: _str
    role: 'enums.Roles'
    avatar: Optional[_str]
    password: _str
    city: _str
    state: _str
    zipCode: Union[AtomicIntInput, _int]
    children: 'ChildrenUpdateManyWithoutRelationsInput'
    events: 'EventsUpdateManyWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    notifications: 'NotificationsUpdateManyWithoutRelationsInput'
    reviews: 'ReviewsUpdateManyWithoutRelationsInput'


class UsersUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    firstName: _str
    lastName: _str
    email: _str
    role: 'enums.Roles'
    avatar: Optional[_str]
    password: _str
    city: _str
    state: _str
    zipCode: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UsersUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UsersCreateWithoutRelationsInput']
    connect: List['UsersWhereUniqueInput']
    connect_or_create: List['UsersConnectOrCreateWithoutRelationsInput']
    set: List['UsersWhereUniqueInput']
    disconnect: List['UsersWhereUniqueInput']
    delete: List['UsersWhereUniqueInput']

    # TODO
    # update: List['UsersUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UsersUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UsersScalarWhereInput']
    # upsert: List['UsersUpserteWithWhereUniqueWithoutRelationsInput']


class UsersUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UsersCreateWithoutRelationsInput'
    connect: 'UsersWhereUniqueInput'
    connect_or_create: 'UsersConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UsersUpdateInput'
    # upsert: 'UsersUpsertWithoutRelationsInput'


class UsersUpsertInput(TypedDict):
    create: 'UsersCreateInput'
    update: 'UsersUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Users_id_OrderByInput = TypedDict(
    '_Users_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Users_firstName_OrderByInput = TypedDict(
    '_Users_firstName_OrderByInput',
    {
        'firstName': 'SortOrder',
    },
    total=True
)

_Users_lastName_OrderByInput = TypedDict(
    '_Users_lastName_OrderByInput',
    {
        'lastName': 'SortOrder',
    },
    total=True
)

_Users_email_OrderByInput = TypedDict(
    '_Users_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_Users_role_OrderByInput = TypedDict(
    '_Users_role_OrderByInput',
    {
        'role': 'SortOrder',
    },
    total=True
)

_Users_avatar_OrderByInput = TypedDict(
    '_Users_avatar_OrderByInput',
    {
        'avatar': 'SortOrder',
    },
    total=True
)

_Users_password_OrderByInput = TypedDict(
    '_Users_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

_Users_city_OrderByInput = TypedDict(
    '_Users_city_OrderByInput',
    {
        'city': 'SortOrder',
    },
    total=True
)

_Users_state_OrderByInput = TypedDict(
    '_Users_state_OrderByInput',
    {
        'state': 'SortOrder',
    },
    total=True
)

_Users_zipCode_OrderByInput = TypedDict(
    '_Users_zipCode_OrderByInput',
    {
        'zipCode': 'SortOrder',
    },
    total=True
)

_Users_childIDs_OrderByInput = TypedDict(
    '_Users_childIDs_OrderByInput',
    {
        'childIDs': 'SortOrder',
    },
    total=True
)

_Users_eventIDs_OrderByInput = TypedDict(
    '_Users_eventIDs_OrderByInput',
    {
        'eventIDs': 'SortOrder',
    },
    total=True
)

_Users_createdAt_OrderByInput = TypedDict(
    '_Users_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Users_updatedAt_OrderByInput = TypedDict(
    '_Users_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

UsersOrderByInput = Union[
    '_Users_id_OrderByInput',
    '_Users_firstName_OrderByInput',
    '_Users_lastName_OrderByInput',
    '_Users_email_OrderByInput',
    '_Users_role_OrderByInput',
    '_Users_avatar_OrderByInput',
    '_Users_password_OrderByInput',
    '_Users_city_OrderByInput',
    '_Users_state_OrderByInput',
    '_Users_zipCode_OrderByInput',
    '_Users_childIDs_OrderByInput',
    '_Users_eventIDs_OrderByInput',
    '_Users_createdAt_OrderByInput',
    '_Users_updatedAt_OrderByInput',
]



# recursive Users types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UsersRelationFilter = TypedDict(
    'UsersRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UsersListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UsersInclude(TypedDict, total=False):
    """Users relational arguments"""
    children: Union[bool, 'FindManyChildrenArgsFromUsers']
    events: Union[bool, 'FindManyEventsArgsFromUsers']
    notifications: Union[bool, 'FindManyNotificationsArgsFromUsers']
    reviews: Union[bool, 'FindManyReviewsArgsFromUsers']


    

class UsersIncludeFromUsers(TypedDict, total=False):
    """Relational arguments for Users"""
    children: Union[bool, 'FindManyChildrenArgsFromUsersRecursive1']
    events: Union[bool, 'FindManyEventsArgsFromUsersRecursive1']
    notifications: Union[bool, 'FindManyNotificationsArgsFromUsersRecursive1']
    reviews: Union[bool, 'FindManyReviewsArgsFromUsersRecursive1']


class UsersIncludeFromUsersRecursive1(TypedDict, total=False):
    """Relational arguments for Users"""
    children: Union[bool, 'FindManyChildrenArgsFromUsersRecursive2']
    events: Union[bool, 'FindManyEventsArgsFromUsersRecursive2']
    notifications: Union[bool, 'FindManyNotificationsArgsFromUsersRecursive2']
    reviews: Union[bool, 'FindManyReviewsArgsFromUsersRecursive2']


class UsersIncludeFromUsersRecursive2(TypedDict, total=False):
    """Relational arguments for Users"""
    children: Union[bool, 'FindManyChildrenArgsFromUsersRecursive3']
    events: Union[bool, 'FindManyEventsArgsFromUsersRecursive3']
    notifications: Union[bool, 'FindManyNotificationsArgsFromUsersRecursive3']
    reviews: Union[bool, 'FindManyReviewsArgsFromUsersRecursive3']


class UsersIncludeFromUsersRecursive3(TypedDict, total=False):
    """Relational arguments for Users"""
    children: Union[bool, 'FindManyChildrenArgsFromUsersRecursive4']
    events: Union[bool, 'FindManyEventsArgsFromUsersRecursive4']
    notifications: Union[bool, 'FindManyNotificationsArgsFromUsersRecursive4']
    reviews: Union[bool, 'FindManyReviewsArgsFromUsersRecursive4']


class UsersIncludeFromUsersRecursive4(TypedDict, total=False):
    """Relational arguments for Users"""

    

class UsersArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    include: 'UsersIncludeFromUsersRecursive1'


class UsersArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    include: 'UsersIncludeFromUsersRecursive2'


class UsersArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    include: 'UsersIncludeFromUsersRecursive3'


class UsersArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    include: 'UsersIncludeFromUsersRecursive4'


class UsersArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    
    

class FindManyUsersArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive1'


class FindManyUsersArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive2'


class FindManyUsersArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive3'


class FindManyUsersArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive4'


class FindManyUsersArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    
    

class NotificationsIncludeFromUsers(TypedDict, total=False):
    """Relational arguments for Users"""
    user: Union[bool, 'UsersArgsFromUsersRecursive1']


class NotificationsIncludeFromUsersRecursive1(TypedDict, total=False):
    """Relational arguments for Users"""
    user: Union[bool, 'UsersArgsFromUsersRecursive2']


class NotificationsIncludeFromUsersRecursive2(TypedDict, total=False):
    """Relational arguments for Users"""
    user: Union[bool, 'UsersArgsFromUsersRecursive3']


class NotificationsIncludeFromUsersRecursive3(TypedDict, total=False):
    """Relational arguments for Users"""
    user: Union[bool, 'UsersArgsFromUsersRecursive4']


class NotificationsIncludeFromUsersRecursive4(TypedDict, total=False):
    """Relational arguments for Users"""

    

class NotificationsArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    include: 'NotificationsIncludeFromNotificationsRecursive1'


class NotificationsArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    include: 'NotificationsIncludeFromNotificationsRecursive2'


class NotificationsArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    include: 'NotificationsIncludeFromNotificationsRecursive3'


class NotificationsArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    include: 'NotificationsIncludeFromNotificationsRecursive4'


class NotificationsArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    
    

class FindManyNotificationsArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['NotificationsOrderByInput', List['NotificationsOrderByInput']]
    where: 'NotificationsWhereInput'
    cursor: 'NotificationsWhereUniqueInput'
    distinct: List['NotificationsScalarFieldKeys']
    include: 'NotificationsIncludeFromNotificationsRecursive1'


class FindManyNotificationsArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['NotificationsOrderByInput', List['NotificationsOrderByInput']]
    where: 'NotificationsWhereInput'
    cursor: 'NotificationsWhereUniqueInput'
    distinct: List['NotificationsScalarFieldKeys']
    include: 'NotificationsIncludeFromNotificationsRecursive2'


class FindManyNotificationsArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['NotificationsOrderByInput', List['NotificationsOrderByInput']]
    where: 'NotificationsWhereInput'
    cursor: 'NotificationsWhereUniqueInput'
    distinct: List['NotificationsScalarFieldKeys']
    include: 'NotificationsIncludeFromNotificationsRecursive3'


class FindManyNotificationsArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['NotificationsOrderByInput', List['NotificationsOrderByInput']]
    where: 'NotificationsWhereInput'
    cursor: 'NotificationsWhereUniqueInput'
    distinct: List['NotificationsScalarFieldKeys']
    include: 'NotificationsIncludeFromNotificationsRecursive4'


class FindManyNotificationsArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['NotificationsOrderByInput', List['NotificationsOrderByInput']]
    where: 'NotificationsWhereInput'
    cursor: 'NotificationsWhereUniqueInput'
    distinct: List['NotificationsScalarFieldKeys']
    
    

class ChildrenIncludeFromUsers(TypedDict, total=False):
    """Relational arguments for Users"""
    parents: Union[bool, 'FindManyUsersArgsFromUsersRecursive1']
    events: Union[bool, 'FindManyEventsArgsFromUsersRecursive1']


class ChildrenIncludeFromUsersRecursive1(TypedDict, total=False):
    """Relational arguments for Users"""
    parents: Union[bool, 'FindManyUsersArgsFromUsersRecursive2']
    events: Union[bool, 'FindManyEventsArgsFromUsersRecursive2']


class ChildrenIncludeFromUsersRecursive2(TypedDict, total=False):
    """Relational arguments for Users"""
    parents: Union[bool, 'FindManyUsersArgsFromUsersRecursive3']
    events: Union[bool, 'FindManyEventsArgsFromUsersRecursive3']


class ChildrenIncludeFromUsersRecursive3(TypedDict, total=False):
    """Relational arguments for Users"""
    parents: Union[bool, 'FindManyUsersArgsFromUsersRecursive4']
    events: Union[bool, 'FindManyEventsArgsFromUsersRecursive4']


class ChildrenIncludeFromUsersRecursive4(TypedDict, total=False):
    """Relational arguments for Users"""

    

class ChildrenArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    include: 'ChildrenIncludeFromChildrenRecursive1'


class ChildrenArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    include: 'ChildrenIncludeFromChildrenRecursive2'


class ChildrenArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    include: 'ChildrenIncludeFromChildrenRecursive3'


class ChildrenArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    include: 'ChildrenIncludeFromChildrenRecursive4'


class ChildrenArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    
    

class FindManyChildrenArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['ChildrenOrderByInput', List['ChildrenOrderByInput']]
    where: 'ChildrenWhereInput'
    cursor: 'ChildrenWhereUniqueInput'
    distinct: List['ChildrenScalarFieldKeys']
    include: 'ChildrenIncludeFromChildrenRecursive1'


class FindManyChildrenArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['ChildrenOrderByInput', List['ChildrenOrderByInput']]
    where: 'ChildrenWhereInput'
    cursor: 'ChildrenWhereUniqueInput'
    distinct: List['ChildrenScalarFieldKeys']
    include: 'ChildrenIncludeFromChildrenRecursive2'


class FindManyChildrenArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['ChildrenOrderByInput', List['ChildrenOrderByInput']]
    where: 'ChildrenWhereInput'
    cursor: 'ChildrenWhereUniqueInput'
    distinct: List['ChildrenScalarFieldKeys']
    include: 'ChildrenIncludeFromChildrenRecursive3'


class FindManyChildrenArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['ChildrenOrderByInput', List['ChildrenOrderByInput']]
    where: 'ChildrenWhereInput'
    cursor: 'ChildrenWhereUniqueInput'
    distinct: List['ChildrenScalarFieldKeys']
    include: 'ChildrenIncludeFromChildrenRecursive4'


class FindManyChildrenArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['ChildrenOrderByInput', List['ChildrenOrderByInput']]
    where: 'ChildrenWhereInput'
    cursor: 'ChildrenWhereUniqueInput'
    distinct: List['ChildrenScalarFieldKeys']
    
    

class ActivitiesIncludeFromUsers(TypedDict, total=False):
    """Relational arguments for Users"""
    events: Union[bool, 'FindManyEventsArgsFromUsersRecursive1']


class ActivitiesIncludeFromUsersRecursive1(TypedDict, total=False):
    """Relational arguments for Users"""
    events: Union[bool, 'FindManyEventsArgsFromUsersRecursive2']


class ActivitiesIncludeFromUsersRecursive2(TypedDict, total=False):
    """Relational arguments for Users"""
    events: Union[bool, 'FindManyEventsArgsFromUsersRecursive3']


class ActivitiesIncludeFromUsersRecursive3(TypedDict, total=False):
    """Relational arguments for Users"""
    events: Union[bool, 'FindManyEventsArgsFromUsersRecursive4']


class ActivitiesIncludeFromUsersRecursive4(TypedDict, total=False):
    """Relational arguments for Users"""

    

class ActivitiesArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    include: 'ActivitiesIncludeFromActivitiesRecursive1'


class ActivitiesArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    include: 'ActivitiesIncludeFromActivitiesRecursive2'


class ActivitiesArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    include: 'ActivitiesIncludeFromActivitiesRecursive3'


class ActivitiesArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    include: 'ActivitiesIncludeFromActivitiesRecursive4'


class ActivitiesArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    
    

class FindManyActivitiesArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['ActivitiesOrderByInput', List['ActivitiesOrderByInput']]
    where: 'ActivitiesWhereInput'
    cursor: 'ActivitiesWhereUniqueInput'
    distinct: List['ActivitiesScalarFieldKeys']
    include: 'ActivitiesIncludeFromActivitiesRecursive1'


class FindManyActivitiesArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['ActivitiesOrderByInput', List['ActivitiesOrderByInput']]
    where: 'ActivitiesWhereInput'
    cursor: 'ActivitiesWhereUniqueInput'
    distinct: List['ActivitiesScalarFieldKeys']
    include: 'ActivitiesIncludeFromActivitiesRecursive2'


class FindManyActivitiesArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['ActivitiesOrderByInput', List['ActivitiesOrderByInput']]
    where: 'ActivitiesWhereInput'
    cursor: 'ActivitiesWhereUniqueInput'
    distinct: List['ActivitiesScalarFieldKeys']
    include: 'ActivitiesIncludeFromActivitiesRecursive3'


class FindManyActivitiesArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['ActivitiesOrderByInput', List['ActivitiesOrderByInput']]
    where: 'ActivitiesWhereInput'
    cursor: 'ActivitiesWhereUniqueInput'
    distinct: List['ActivitiesScalarFieldKeys']
    include: 'ActivitiesIncludeFromActivitiesRecursive4'


class FindManyActivitiesArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['ActivitiesOrderByInput', List['ActivitiesOrderByInput']]
    where: 'ActivitiesWhereInput'
    cursor: 'ActivitiesWhereUniqueInput'
    distinct: List['ActivitiesScalarFieldKeys']
    
    

class EventsIncludeFromUsers(TypedDict, total=False):
    """Relational arguments for Users"""
    children: Union[bool, 'FindManyChildrenArgsFromUsersRecursive1']
    users: Union[bool, 'FindManyUsersArgsFromUsersRecursive1']
    activity: Union[bool, 'ActivitiesArgsFromUsersRecursive1']
    reviews: Union[bool, 'FindManyReviewsArgsFromUsersRecursive1']


class EventsIncludeFromUsersRecursive1(TypedDict, total=False):
    """Relational arguments for Users"""
    children: Union[bool, 'FindManyChildrenArgsFromUsersRecursive2']
    users: Union[bool, 'FindManyUsersArgsFromUsersRecursive2']
    activity: Union[bool, 'ActivitiesArgsFromUsersRecursive2']
    reviews: Union[bool, 'FindManyReviewsArgsFromUsersRecursive2']


class EventsIncludeFromUsersRecursive2(TypedDict, total=False):
    """Relational arguments for Users"""
    children: Union[bool, 'FindManyChildrenArgsFromUsersRecursive3']
    users: Union[bool, 'FindManyUsersArgsFromUsersRecursive3']
    activity: Union[bool, 'ActivitiesArgsFromUsersRecursive3']
    reviews: Union[bool, 'FindManyReviewsArgsFromUsersRecursive3']


class EventsIncludeFromUsersRecursive3(TypedDict, total=False):
    """Relational arguments for Users"""
    children: Union[bool, 'FindManyChildrenArgsFromUsersRecursive4']
    users: Union[bool, 'FindManyUsersArgsFromUsersRecursive4']
    activity: Union[bool, 'ActivitiesArgsFromUsersRecursive4']
    reviews: Union[bool, 'FindManyReviewsArgsFromUsersRecursive4']


class EventsIncludeFromUsersRecursive4(TypedDict, total=False):
    """Relational arguments for Users"""

    

class EventsArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    include: 'EventsIncludeFromEventsRecursive1'


class EventsArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    include: 'EventsIncludeFromEventsRecursive2'


class EventsArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    include: 'EventsIncludeFromEventsRecursive3'


class EventsArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    include: 'EventsIncludeFromEventsRecursive4'


class EventsArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    
    

class FindManyEventsArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive1'


class FindManyEventsArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive2'


class FindManyEventsArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive3'


class FindManyEventsArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive4'


class FindManyEventsArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    
    

class ReviewsIncludeFromUsers(TypedDict, total=False):
    """Relational arguments for Users"""
    event: Union[bool, 'EventsArgsFromUsersRecursive1']
    parent: Union[bool, 'UsersArgsFromUsersRecursive1']


class ReviewsIncludeFromUsersRecursive1(TypedDict, total=False):
    """Relational arguments for Users"""
    event: Union[bool, 'EventsArgsFromUsersRecursive2']
    parent: Union[bool, 'UsersArgsFromUsersRecursive2']


class ReviewsIncludeFromUsersRecursive2(TypedDict, total=False):
    """Relational arguments for Users"""
    event: Union[bool, 'EventsArgsFromUsersRecursive3']
    parent: Union[bool, 'UsersArgsFromUsersRecursive3']


class ReviewsIncludeFromUsersRecursive3(TypedDict, total=False):
    """Relational arguments for Users"""
    event: Union[bool, 'EventsArgsFromUsersRecursive4']
    parent: Union[bool, 'UsersArgsFromUsersRecursive4']


class ReviewsIncludeFromUsersRecursive4(TypedDict, total=False):
    """Relational arguments for Users"""

    

class ReviewsArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    include: 'ReviewsIncludeFromReviewsRecursive1'


class ReviewsArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    include: 'ReviewsIncludeFromReviewsRecursive2'


class ReviewsArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    include: 'ReviewsIncludeFromReviewsRecursive3'


class ReviewsArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    include: 'ReviewsIncludeFromReviewsRecursive4'


class ReviewsArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    
    

class FindManyReviewsArgsFromUsers(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['ReviewsOrderByInput', List['ReviewsOrderByInput']]
    where: 'ReviewsWhereInput'
    cursor: 'ReviewsWhereUniqueInput'
    distinct: List['ReviewsScalarFieldKeys']
    include: 'ReviewsIncludeFromReviewsRecursive1'


class FindManyReviewsArgsFromUsersRecursive1(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['ReviewsOrderByInput', List['ReviewsOrderByInput']]
    where: 'ReviewsWhereInput'
    cursor: 'ReviewsWhereUniqueInput'
    distinct: List['ReviewsScalarFieldKeys']
    include: 'ReviewsIncludeFromReviewsRecursive2'


class FindManyReviewsArgsFromUsersRecursive2(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['ReviewsOrderByInput', List['ReviewsOrderByInput']]
    where: 'ReviewsWhereInput'
    cursor: 'ReviewsWhereUniqueInput'
    distinct: List['ReviewsScalarFieldKeys']
    include: 'ReviewsIncludeFromReviewsRecursive3'


class FindManyReviewsArgsFromUsersRecursive3(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['ReviewsOrderByInput', List['ReviewsOrderByInput']]
    where: 'ReviewsWhereInput'
    cursor: 'ReviewsWhereUniqueInput'
    distinct: List['ReviewsScalarFieldKeys']
    include: 'ReviewsIncludeFromReviewsRecursive4'


class FindManyReviewsArgsFromUsersRecursive4(TypedDict, total=False):
    """Arguments for Users"""
    take: int
    skip: int
    order_by: Union['ReviewsOrderByInput', List['ReviewsOrderByInput']]
    where: 'ReviewsWhereInput'
    cursor: 'ReviewsWhereUniqueInput'
    distinct: List['ReviewsScalarFieldKeys']
    


FindManyUsersArgs = FindManyUsersArgsFromUsers
FindFirstUsersArgs = FindManyUsersArgsFromUsers


    

class UsersWhereInput(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    firstName: Union[_str, 'types.StringFilter']
    lastName: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    role: 'enums.Roles'
    avatar: Union[None, _str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    city: Union[_str, 'types.StringFilter']
    state: Union[_str, 'types.StringFilter']
    zipCode: Union[_int, 'types.IntFilter']
    childIDs: 'types.StringListFilter'
    children: 'ChildrenListRelationFilter'
    eventIDs: 'types.StringListFilter'
    events: 'EventsListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    notifications: 'NotificationsListRelationFilter'
    reviews: 'ReviewsListRelationFilter'

    # should be noted that AND and NOT should be Union['UsersWhereInputRecursive1', List['UsersWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UsersWhereInputRecursive1']
    OR: List['UsersWhereInputRecursive1']
    NOT: List['UsersWhereInputRecursive1']


class UsersWhereInputRecursive1(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    firstName: Union[_str, 'types.StringFilter']
    lastName: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    role: 'enums.Roles'
    avatar: Union[None, _str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    city: Union[_str, 'types.StringFilter']
    state: Union[_str, 'types.StringFilter']
    zipCode: Union[_int, 'types.IntFilter']
    childIDs: 'types.StringListFilter'
    children: 'ChildrenListRelationFilter'
    eventIDs: 'types.StringListFilter'
    events: 'EventsListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    notifications: 'NotificationsListRelationFilter'
    reviews: 'ReviewsListRelationFilter'

    # should be noted that AND and NOT should be Union['UsersWhereInputRecursive2', List['UsersWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UsersWhereInputRecursive2']
    OR: List['UsersWhereInputRecursive2']
    NOT: List['UsersWhereInputRecursive2']


class UsersWhereInputRecursive2(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    firstName: Union[_str, 'types.StringFilter']
    lastName: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    role: 'enums.Roles'
    avatar: Union[None, _str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    city: Union[_str, 'types.StringFilter']
    state: Union[_str, 'types.StringFilter']
    zipCode: Union[_int, 'types.IntFilter']
    childIDs: 'types.StringListFilter'
    children: 'ChildrenListRelationFilter'
    eventIDs: 'types.StringListFilter'
    events: 'EventsListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    notifications: 'NotificationsListRelationFilter'
    reviews: 'ReviewsListRelationFilter'

    # should be noted that AND and NOT should be Union['UsersWhereInputRecursive3', List['UsersWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UsersWhereInputRecursive3']
    OR: List['UsersWhereInputRecursive3']
    NOT: List['UsersWhereInputRecursive3']


class UsersWhereInputRecursive3(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    firstName: Union[_str, 'types.StringFilter']
    lastName: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    role: 'enums.Roles'
    avatar: Union[None, _str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    city: Union[_str, 'types.StringFilter']
    state: Union[_str, 'types.StringFilter']
    zipCode: Union[_int, 'types.IntFilter']
    childIDs: 'types.StringListFilter'
    children: 'ChildrenListRelationFilter'
    eventIDs: 'types.StringListFilter'
    events: 'EventsListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    notifications: 'NotificationsListRelationFilter'
    reviews: 'ReviewsListRelationFilter'

    # should be noted that AND and NOT should be Union['UsersWhereInputRecursive4', List['UsersWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UsersWhereInputRecursive4']
    OR: List['UsersWhereInputRecursive4']
    NOT: List['UsersWhereInputRecursive4']


class UsersWhereInputRecursive4(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    firstName: Union[_str, 'types.StringFilter']
    lastName: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    role: 'enums.Roles'
    avatar: Union[None, _str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    city: Union[_str, 'types.StringFilter']
    state: Union[_str, 'types.StringFilter']
    zipCode: Union[_int, 'types.IntFilter']
    childIDs: 'types.StringListFilter'
    children: 'ChildrenListRelationFilter'
    eventIDs: 'types.StringListFilter'
    events: 'EventsListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    notifications: 'NotificationsListRelationFilter'
    reviews: 'ReviewsListRelationFilter'



# aggregate Users types


    

class UsersScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.Roles'
    avatar: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']
    zipCode: Union[_int, 'types.IntWithAggregatesFilter']
    childIDs: Union[_str, 'types.StringWithAggregatesFilter']
    eventIDs: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UsersScalarWhereWithAggregatesInputRecursive1']
    OR: List['UsersScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UsersScalarWhereWithAggregatesInputRecursive1']


class UsersScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.Roles'
    avatar: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']
    zipCode: Union[_int, 'types.IntWithAggregatesFilter']
    childIDs: Union[_str, 'types.StringWithAggregatesFilter']
    eventIDs: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UsersScalarWhereWithAggregatesInputRecursive2']
    OR: List['UsersScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UsersScalarWhereWithAggregatesInputRecursive2']


class UsersScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.Roles'
    avatar: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']
    zipCode: Union[_int, 'types.IntWithAggregatesFilter']
    childIDs: Union[_str, 'types.StringWithAggregatesFilter']
    eventIDs: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UsersScalarWhereWithAggregatesInputRecursive3']
    OR: List['UsersScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UsersScalarWhereWithAggregatesInputRecursive3']


class UsersScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.Roles'
    avatar: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']
    zipCode: Union[_int, 'types.IntWithAggregatesFilter']
    childIDs: Union[_str, 'types.StringWithAggregatesFilter']
    eventIDs: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UsersScalarWhereWithAggregatesInputRecursive4']
    OR: List['UsersScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UsersScalarWhereWithAggregatesInputRecursive4']


class UsersScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Users arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.Roles'
    avatar: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']
    zipCode: Union[_int, 'types.IntWithAggregatesFilter']
    childIDs: Union[_str, 'types.StringWithAggregatesFilter']
    eventIDs: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class UsersGroupByOutput(TypedDict, total=False):
    id: _str
    firstName: _str
    lastName: _str
    email: _str
    role: 'enums.Roles'
    avatar: _str
    password: _str
    city: _str
    state: _str
    zipCode: _int
    childIDs: List[_str]
    eventIDs: List[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'UsersSumAggregateOutput'
    _avg: 'UsersAvgAggregateOutput'
    _min: 'UsersMinAggregateOutput'
    _max: 'UsersMaxAggregateOutput'
    _count: 'UsersCountAggregateOutput'


class UsersAvgAggregateOutput(TypedDict, total=False):
    """Users output for aggregating averages"""
    zipCode: float


class UsersSumAggregateOutput(TypedDict, total=False):
    """Users output for aggregating sums"""
    zipCode: _int


class UsersScalarAggregateOutput(TypedDict, total=False):
    """Users output including scalar fields"""
    id: _str
    firstName: _str
    lastName: _str
    email: _str
    role: 'enums.Roles'
    avatar: _str
    password: _str
    city: _str
    state: _str
    zipCode: _int
    childIDs: List[_str]
    eventIDs: List[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


UsersMinAggregateOutput = UsersScalarAggregateOutput
UsersMaxAggregateOutput = UsersScalarAggregateOutput


class UsersMaxAggregateInput(TypedDict, total=False):
    """Users input for aggregating by max"""
    id: bool
    firstName: bool
    lastName: bool
    email: bool
    role: bool
    avatar: bool
    password: bool
    city: bool
    state: bool
    zipCode: bool
    childIDs: bool
    eventIDs: bool
    createdAt: bool
    updatedAt: bool


class UsersMinAggregateInput(TypedDict, total=False):
    """Users input for aggregating by min"""
    id: bool
    firstName: bool
    lastName: bool
    email: bool
    role: bool
    avatar: bool
    password: bool
    city: bool
    state: bool
    zipCode: bool
    childIDs: bool
    eventIDs: bool
    createdAt: bool
    updatedAt: bool


class UsersNumberAggregateInput(TypedDict, total=False):
    """Users input for aggregating numbers"""
    zipCode: bool


UsersAvgAggregateInput = UsersNumberAggregateInput
UsersSumAggregateInput = UsersNumberAggregateInput


UsersCountAggregateInput = TypedDict(
    'UsersCountAggregateInput',
    {
        'id': bool,
        'firstName': bool,
        'lastName': bool,
        'email': bool,
        'role': bool,
        'avatar': bool,
        'password': bool,
        'city': bool,
        'state': bool,
        'zipCode': bool,
        'childIDs': bool,
        'eventIDs': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

UsersCountAggregateOutput = TypedDict(
    'UsersCountAggregateOutput',
    {
        'id': int,
        'firstName': int,
        'lastName': int,
        'email': int,
        'role': int,
        'avatar': int,
        'password': int,
        'city': int,
        'state': int,
        'zipCode': int,
        'childIDs': int,
        'eventIDs': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


UsersKeys = Literal[
    'id',
    'firstName',
    'lastName',
    'email',
    'role',
    'avatar',
    'password',
    'city',
    'state',
    'zipCode',
    'childIDs',
    'children',
    'eventIDs',
    'events',
    'createdAt',
    'updatedAt',
    'notifications',
    'reviews',
]
UsersScalarFieldKeys = Literal[
    'id',
    'firstName',
    'lastName',
    'email',
    'role',
    'avatar',
    'password',
    'city',
    'state',
    'zipCode',
    'childIDs',
    'eventIDs',
    'createdAt',
    'updatedAt',
]
UsersScalarFieldKeysT = TypeVar('UsersScalarFieldKeysT', bound=UsersScalarFieldKeys)

UsersRelationalFieldKeys = Literal[
        'children',
        'events',
        'notifications',
        'reviews',
    ]

# Notifications types

class NotificationsOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Notifications create method"""
    id: _str
    user: 'UsersCreateNestedWithoutRelationsInput'
    userId: _str


class NotificationsCreateInput(NotificationsOptionalCreateInput):
    """Required arguments to the Notifications create method"""
    description: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class NotificationsOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Notifications create method, without relations"""
    id: _str
    userId: _str


class NotificationsCreateWithoutRelationsInput(NotificationsOptionalCreateWithoutRelationsInput):
    """Required arguments to the Notifications create method, without relations"""
    description: _str

class NotificationsConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'NotificationsCreateWithoutRelationsInput'
    where: 'NotificationsWhereUniqueInput'

class NotificationsCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'NotificationsCreateWithoutRelationsInput'
    connect: 'NotificationsWhereUniqueInput'
    connect_or_create: 'NotificationsConnectOrCreateWithoutRelationsInput'


class NotificationsCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['NotificationsCreateWithoutRelationsInput', List['NotificationsCreateWithoutRelationsInput']]
    connect: Union['NotificationsWhereUniqueInput', List['NotificationsWhereUniqueInput']]
    connect_or_create: Union['NotificationsConnectOrCreateWithoutRelationsInput', List['NotificationsConnectOrCreateWithoutRelationsInput']]

_NotificationsWhereUnique_id_Input = TypedDict(
    '_NotificationsWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

NotificationsWhereUniqueInput = _NotificationsWhereUnique_id_Input


class NotificationsUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    description: _str
    user: 'UsersUpdateOneWithoutRelationsInput'


class NotificationsUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    description: _str


class NotificationsUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['NotificationsCreateWithoutRelationsInput']
    connect: List['NotificationsWhereUniqueInput']
    connect_or_create: List['NotificationsConnectOrCreateWithoutRelationsInput']
    set: List['NotificationsWhereUniqueInput']
    disconnect: List['NotificationsWhereUniqueInput']
    delete: List['NotificationsWhereUniqueInput']

    # TODO
    # update: List['NotificationsUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['NotificationsUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['NotificationsScalarWhereInput']
    # upsert: List['NotificationsUpserteWithWhereUniqueWithoutRelationsInput']


class NotificationsUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'NotificationsCreateWithoutRelationsInput'
    connect: 'NotificationsWhereUniqueInput'
    connect_or_create: 'NotificationsConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'NotificationsUpdateInput'
    # upsert: 'NotificationsUpsertWithoutRelationsInput'


class NotificationsUpsertInput(TypedDict):
    create: 'NotificationsCreateInput'
    update: 'NotificationsUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Notifications_id_OrderByInput = TypedDict(
    '_Notifications_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Notifications_description_OrderByInput = TypedDict(
    '_Notifications_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Notifications_userId_OrderByInput = TypedDict(
    '_Notifications_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

NotificationsOrderByInput = Union[
    '_Notifications_id_OrderByInput',
    '_Notifications_description_OrderByInput',
    '_Notifications_userId_OrderByInput',
]



# recursive Notifications types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

NotificationsRelationFilter = TypedDict(
    'NotificationsRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class NotificationsListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class NotificationsInclude(TypedDict, total=False):
    """Notifications relational arguments"""
    user: Union[bool, 'UsersArgsFromNotifications']


    

class UsersIncludeFromNotifications(TypedDict, total=False):
    """Relational arguments for Notifications"""
    children: Union[bool, 'FindManyChildrenArgsFromNotificationsRecursive1']
    events: Union[bool, 'FindManyEventsArgsFromNotificationsRecursive1']
    notifications: Union[bool, 'FindManyNotificationsArgsFromNotificationsRecursive1']
    reviews: Union[bool, 'FindManyReviewsArgsFromNotificationsRecursive1']


class UsersIncludeFromNotificationsRecursive1(TypedDict, total=False):
    """Relational arguments for Notifications"""
    children: Union[bool, 'FindManyChildrenArgsFromNotificationsRecursive2']
    events: Union[bool, 'FindManyEventsArgsFromNotificationsRecursive2']
    notifications: Union[bool, 'FindManyNotificationsArgsFromNotificationsRecursive2']
    reviews: Union[bool, 'FindManyReviewsArgsFromNotificationsRecursive2']


class UsersIncludeFromNotificationsRecursive2(TypedDict, total=False):
    """Relational arguments for Notifications"""
    children: Union[bool, 'FindManyChildrenArgsFromNotificationsRecursive3']
    events: Union[bool, 'FindManyEventsArgsFromNotificationsRecursive3']
    notifications: Union[bool, 'FindManyNotificationsArgsFromNotificationsRecursive3']
    reviews: Union[bool, 'FindManyReviewsArgsFromNotificationsRecursive3']


class UsersIncludeFromNotificationsRecursive3(TypedDict, total=False):
    """Relational arguments for Notifications"""
    children: Union[bool, 'FindManyChildrenArgsFromNotificationsRecursive4']
    events: Union[bool, 'FindManyEventsArgsFromNotificationsRecursive4']
    notifications: Union[bool, 'FindManyNotificationsArgsFromNotificationsRecursive4']
    reviews: Union[bool, 'FindManyReviewsArgsFromNotificationsRecursive4']


class UsersIncludeFromNotificationsRecursive4(TypedDict, total=False):
    """Relational arguments for Notifications"""

    

class UsersArgsFromNotifications(TypedDict, total=False):
    """Arguments for Notifications"""
    include: 'UsersIncludeFromUsersRecursive1'


class UsersArgsFromNotificationsRecursive1(TypedDict, total=False):
    """Arguments for Notifications"""
    include: 'UsersIncludeFromUsersRecursive2'


class UsersArgsFromNotificationsRecursive2(TypedDict, total=False):
    """Arguments for Notifications"""
    include: 'UsersIncludeFromUsersRecursive3'


class UsersArgsFromNotificationsRecursive3(TypedDict, total=False):
    """Arguments for Notifications"""
    include: 'UsersIncludeFromUsersRecursive4'


class UsersArgsFromNotificationsRecursive4(TypedDict, total=False):
    """Arguments for Notifications"""
    
    

class FindManyUsersArgsFromNotifications(TypedDict, total=False):
    """Arguments for Notifications"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive1'


class FindManyUsersArgsFromNotificationsRecursive1(TypedDict, total=False):
    """Arguments for Notifications"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive2'


class FindManyUsersArgsFromNotificationsRecursive2(TypedDict, total=False):
    """Arguments for Notifications"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive3'


class FindManyUsersArgsFromNotificationsRecursive3(TypedDict, total=False):
    """Arguments for Notifications"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive4'


class FindManyUsersArgsFromNotificationsRecursive4(TypedDict, total=False):
    """Arguments for Notifications"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    
    

class NotificationsIncludeFromNotifications(TypedDict, total=False):
    """Relational arguments for Notifications"""
    user: Union[bool, 'UsersArgsFromNotificationsRecursive1']


class NotificationsIncludeFromNotificationsRecursive1(TypedDict, total=False):
    """Relational arguments for Notifications"""
    user: Union[bool, 'UsersArgsFromNotificationsRecursive2']


class NotificationsIncludeFromNotificationsRecursive2(TypedDict, total=False):
    """Relational arguments for Notifications"""
    user: Union[bool, 'UsersArgsFromNotificationsRecursive3']


class NotificationsIncludeFromNotificationsRecursive3(TypedDict, total=False):
    """Relational arguments for Notifications"""
    user: Union[bool, 'UsersArgsFromNotificationsRecursive4']


class NotificationsIncludeFromNotificationsRecursive4(TypedDict, total=False):
    """Relational arguments for Notifications"""

    

class NotificationsArgsFromNotifications(TypedDict, total=False):
    """Arguments for Notifications"""
    include: 'NotificationsIncludeFromNotificationsRecursive1'


class NotificationsArgsFromNotificationsRecursive1(TypedDict, total=False):
    """Arguments for Notifications"""
    include: 'NotificationsIncludeFromNotificationsRecursive2'


class NotificationsArgsFromNotificationsRecursive2(TypedDict, total=False):
    """Arguments for Notifications"""
    include: 'NotificationsIncludeFromNotificationsRecursive3'


class NotificationsArgsFromNotificationsRecursive3(TypedDict, total=False):
    """Arguments for Notifications"""
    include: 'NotificationsIncludeFromNotificationsRecursive4'


class NotificationsArgsFromNotificationsRecursive4(TypedDict, total=False):
    """Arguments for Notifications"""
    
    

class FindManyNotificationsArgsFromNotifications(TypedDict, total=False):
    """Arguments for Notifications"""
    take: int
    skip: int
    order_by: Union['NotificationsOrderByInput', List['NotificationsOrderByInput']]
    where: 'NotificationsWhereInput'
    cursor: 'NotificationsWhereUniqueInput'
    distinct: List['NotificationsScalarFieldKeys']
    include: 'NotificationsIncludeFromNotificationsRecursive1'


class FindManyNotificationsArgsFromNotificationsRecursive1(TypedDict, total=False):
    """Arguments for Notifications"""
    take: int
    skip: int
    order_by: Union['NotificationsOrderByInput', List['NotificationsOrderByInput']]
    where: 'NotificationsWhereInput'
    cursor: 'NotificationsWhereUniqueInput'
    distinct: List['NotificationsScalarFieldKeys']
    include: 'NotificationsIncludeFromNotificationsRecursive2'


class FindManyNotificationsArgsFromNotificationsRecursive2(TypedDict, total=False):
    """Arguments for Notifications"""
    take: int
    skip: int
    order_by: Union['NotificationsOrderByInput', List['NotificationsOrderByInput']]
    where: 'NotificationsWhereInput'
    cursor: 'NotificationsWhereUniqueInput'
    distinct: List['NotificationsScalarFieldKeys']
    include: 'NotificationsIncludeFromNotificationsRecursive3'


class FindManyNotificationsArgsFromNotificationsRecursive3(TypedDict, total=False):
    """Arguments for Notifications"""
    take: int
    skip: int
    order_by: Union['NotificationsOrderByInput', List['NotificationsOrderByInput']]
    where: 'NotificationsWhereInput'
    cursor: 'NotificationsWhereUniqueInput'
    distinct: List['NotificationsScalarFieldKeys']
    include: 'NotificationsIncludeFromNotificationsRecursive4'


class FindManyNotificationsArgsFromNotificationsRecursive4(TypedDict, total=False):
    """Arguments for Notifications"""
    take: int
    skip: int
    order_by: Union['NotificationsOrderByInput', List['NotificationsOrderByInput']]
    where: 'NotificationsWhereInput'
    cursor: 'NotificationsWhereUniqueInput'
    distinct: List['NotificationsScalarFieldKeys']
    
    

class ChildrenIncludeFromNotifications(TypedDict, total=False):
    """Relational arguments for Notifications"""
    parents: Union[bool, 'FindManyUsersArgsFromNotificationsRecursive1']
    events: Union[bool, 'FindManyEventsArgsFromNotificationsRecursive1']


class ChildrenIncludeFromNotificationsRecursive1(TypedDict, total=False):
    """Relational arguments for Notifications"""
    parents: Union[bool, 'FindManyUsersArgsFromNotificationsRecursive2']
    events: Union[bool, 'FindManyEventsArgsFromNotificationsRecursive2']


class ChildrenIncludeFromNotificationsRecursive2(TypedDict, total=False):
    """Relational arguments for Notifications"""
    parents: Union[bool, 'FindManyUsersArgsFromNotificationsRecursive3']
    events: Union[bool, 'FindManyEventsArgsFromNotificationsRecursive3']


class ChildrenIncludeFromNotificationsRecursive3(TypedDict, total=False):
    """Relational arguments for Notifications"""
    parents: Union[bool, 'FindManyUsersArgsFromNotificationsRecursive4']
    events: Union[bool, 'FindManyEventsArgsFromNotificationsRecursive4']


class ChildrenIncludeFromNotificationsRecursive4(TypedDict, total=False):
    """Relational arguments for Notifications"""

    

class ChildrenArgsFromNotifications(TypedDict, total=False):
    """Arguments for Notifications"""
    include: 'ChildrenIncludeFromChildrenRecursive1'


class ChildrenArgsFromNotificationsRecursive1(TypedDict, total=False):
    """Arguments for Notifications"""
    include: 'ChildrenIncludeFromChildrenRecursive2'


class ChildrenArgsFromNotificationsRecursive2(TypedDict, total=False):
    """Arguments for Notifications"""
    include: 'ChildrenIncludeFromChildrenRecursive3'


class ChildrenArgsFromNotificationsRecursive3(TypedDict, total=False):
    """Arguments for Notifications"""
    include: 'ChildrenIncludeFromChildrenRecursive4'


class ChildrenArgsFromNotificationsRecursive4(TypedDict, total=False):
    """Arguments for Notifications"""
    
    

class FindManyChildrenArgsFromNotifications(TypedDict, total=False):
    """Arguments for Notifications"""
    take: int
    skip: int
    order_by: Union['ChildrenOrderByInput', List['ChildrenOrderByInput']]
    where: 'ChildrenWhereInput'
    cursor: 'ChildrenWhereUniqueInput'
    distinct: List['ChildrenScalarFieldKeys']
    include: 'ChildrenIncludeFromChildrenRecursive1'


class FindManyChildrenArgsFromNotificationsRecursive1(TypedDict, total=False):
    """Arguments for Notifications"""
    take: int
    skip: int
    order_by: Union['ChildrenOrderByInput', List['ChildrenOrderByInput']]
    where: 'ChildrenWhereInput'
    cursor: 'ChildrenWhereUniqueInput'
    distinct: List['ChildrenScalarFieldKeys']
    include: 'ChildrenIncludeFromChildrenRecursive2'


class FindManyChildrenArgsFromNotificationsRecursive2(TypedDict, total=False):
    """Arguments for Notifications"""
    take: int
    skip: int
    order_by: Union['ChildrenOrderByInput', List['ChildrenOrderByInput']]
    where: 'ChildrenWhereInput'
    cursor: 'ChildrenWhereUniqueInput'
    distinct: List['ChildrenScalarFieldKeys']
    include: 'ChildrenIncludeFromChildrenRecursive3'


class FindManyChildrenArgsFromNotificationsRecursive3(TypedDict, total=False):
    """Arguments for Notifications"""
    take: int
    skip: int
    order_by: Union['ChildrenOrderByInput', List['ChildrenOrderByInput']]
    where: 'ChildrenWhereInput'
    cursor: 'ChildrenWhereUniqueInput'
    distinct: List['ChildrenScalarFieldKeys']
    include: 'ChildrenIncludeFromChildrenRecursive4'


class FindManyChildrenArgsFromNotificationsRecursive4(TypedDict, total=False):
    """Arguments for Notifications"""
    take: int
    skip: int
    order_by: Union['ChildrenOrderByInput', List['ChildrenOrderByInput']]
    where: 'ChildrenWhereInput'
    cursor: 'ChildrenWhereUniqueInput'
    distinct: List['ChildrenScalarFieldKeys']
    
    

class ActivitiesIncludeFromNotifications(TypedDict, total=False):
    """Relational arguments for Notifications"""
    events: Union[bool, 'FindManyEventsArgsFromNotificationsRecursive1']


class ActivitiesIncludeFromNotificationsRecursive1(TypedDict, total=False):
    """Relational arguments for Notifications"""
    events: Union[bool, 'FindManyEventsArgsFromNotificationsRecursive2']


class ActivitiesIncludeFromNotificationsRecursive2(TypedDict, total=False):
    """Relational arguments for Notifications"""
    events: Union[bool, 'FindManyEventsArgsFromNotificationsRecursive3']


class ActivitiesIncludeFromNotificationsRecursive3(TypedDict, total=False):
    """Relational arguments for Notifications"""
    events: Union[bool, 'FindManyEventsArgsFromNotificationsRecursive4']


class ActivitiesIncludeFromNotificationsRecursive4(TypedDict, total=False):
    """Relational arguments for Notifications"""

    

class ActivitiesArgsFromNotifications(TypedDict, total=False):
    """Arguments for Notifications"""
    include: 'ActivitiesIncludeFromActivitiesRecursive1'


class ActivitiesArgsFromNotificationsRecursive1(TypedDict, total=False):
    """Arguments for Notifications"""
    include: 'ActivitiesIncludeFromActivitiesRecursive2'


class ActivitiesArgsFromNotificationsRecursive2(TypedDict, total=False):
    """Arguments for Notifications"""
    include: 'ActivitiesIncludeFromActivitiesRecursive3'


class ActivitiesArgsFromNotificationsRecursive3(TypedDict, total=False):
    """Arguments for Notifications"""
    include: 'ActivitiesIncludeFromActivitiesRecursive4'


class ActivitiesArgsFromNotificationsRecursive4(TypedDict, total=False):
    """Arguments for Notifications"""
    
    

class FindManyActivitiesArgsFromNotifications(TypedDict, total=False):
    """Arguments for Notifications"""
    take: int
    skip: int
    order_by: Union['ActivitiesOrderByInput', List['ActivitiesOrderByInput']]
    where: 'ActivitiesWhereInput'
    cursor: 'ActivitiesWhereUniqueInput'
    distinct: List['ActivitiesScalarFieldKeys']
    include: 'ActivitiesIncludeFromActivitiesRecursive1'


class FindManyActivitiesArgsFromNotificationsRecursive1(TypedDict, total=False):
    """Arguments for Notifications"""
    take: int
    skip: int
    order_by: Union['ActivitiesOrderByInput', List['ActivitiesOrderByInput']]
    where: 'ActivitiesWhereInput'
    cursor: 'ActivitiesWhereUniqueInput'
    distinct: List['ActivitiesScalarFieldKeys']
    include: 'ActivitiesIncludeFromActivitiesRecursive2'


class FindManyActivitiesArgsFromNotificationsRecursive2(TypedDict, total=False):
    """Arguments for Notifications"""
    take: int
    skip: int
    order_by: Union['ActivitiesOrderByInput', List['ActivitiesOrderByInput']]
    where: 'ActivitiesWhereInput'
    cursor: 'ActivitiesWhereUniqueInput'
    distinct: List['ActivitiesScalarFieldKeys']
    include: 'ActivitiesIncludeFromActivitiesRecursive3'


class FindManyActivitiesArgsFromNotificationsRecursive3(TypedDict, total=False):
    """Arguments for Notifications"""
    take: int
    skip: int
    order_by: Union['ActivitiesOrderByInput', List['ActivitiesOrderByInput']]
    where: 'ActivitiesWhereInput'
    cursor: 'ActivitiesWhereUniqueInput'
    distinct: List['ActivitiesScalarFieldKeys']
    include: 'ActivitiesIncludeFromActivitiesRecursive4'


class FindManyActivitiesArgsFromNotificationsRecursive4(TypedDict, total=False):
    """Arguments for Notifications"""
    take: int
    skip: int
    order_by: Union['ActivitiesOrderByInput', List['ActivitiesOrderByInput']]
    where: 'ActivitiesWhereInput'
    cursor: 'ActivitiesWhereUniqueInput'
    distinct: List['ActivitiesScalarFieldKeys']
    
    

class EventsIncludeFromNotifications(TypedDict, total=False):
    """Relational arguments for Notifications"""
    children: Union[bool, 'FindManyChildrenArgsFromNotificationsRecursive1']
    users: Union[bool, 'FindManyUsersArgsFromNotificationsRecursive1']
    activity: Union[bool, 'ActivitiesArgsFromNotificationsRecursive1']
    reviews: Union[bool, 'FindManyReviewsArgsFromNotificationsRecursive1']


class EventsIncludeFromNotificationsRecursive1(TypedDict, total=False):
    """Relational arguments for Notifications"""
    children: Union[bool, 'FindManyChildrenArgsFromNotificationsRecursive2']
    users: Union[bool, 'FindManyUsersArgsFromNotificationsRecursive2']
    activity: Union[bool, 'ActivitiesArgsFromNotificationsRecursive2']
    reviews: Union[bool, 'FindManyReviewsArgsFromNotificationsRecursive2']


class EventsIncludeFromNotificationsRecursive2(TypedDict, total=False):
    """Relational arguments for Notifications"""
    children: Union[bool, 'FindManyChildrenArgsFromNotificationsRecursive3']
    users: Union[bool, 'FindManyUsersArgsFromNotificationsRecursive3']
    activity: Union[bool, 'ActivitiesArgsFromNotificationsRecursive3']
    reviews: Union[bool, 'FindManyReviewsArgsFromNotificationsRecursive3']


class EventsIncludeFromNotificationsRecursive3(TypedDict, total=False):
    """Relational arguments for Notifications"""
    children: Union[bool, 'FindManyChildrenArgsFromNotificationsRecursive4']
    users: Union[bool, 'FindManyUsersArgsFromNotificationsRecursive4']
    activity: Union[bool, 'ActivitiesArgsFromNotificationsRecursive4']
    reviews: Union[bool, 'FindManyReviewsArgsFromNotificationsRecursive4']


class EventsIncludeFromNotificationsRecursive4(TypedDict, total=False):
    """Relational arguments for Notifications"""

    

class EventsArgsFromNotifications(TypedDict, total=False):
    """Arguments for Notifications"""
    include: 'EventsIncludeFromEventsRecursive1'


class EventsArgsFromNotificationsRecursive1(TypedDict, total=False):
    """Arguments for Notifications"""
    include: 'EventsIncludeFromEventsRecursive2'


class EventsArgsFromNotificationsRecursive2(TypedDict, total=False):
    """Arguments for Notifications"""
    include: 'EventsIncludeFromEventsRecursive3'


class EventsArgsFromNotificationsRecursive3(TypedDict, total=False):
    """Arguments for Notifications"""
    include: 'EventsIncludeFromEventsRecursive4'


class EventsArgsFromNotificationsRecursive4(TypedDict, total=False):
    """Arguments for Notifications"""
    
    

class FindManyEventsArgsFromNotifications(TypedDict, total=False):
    """Arguments for Notifications"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive1'


class FindManyEventsArgsFromNotificationsRecursive1(TypedDict, total=False):
    """Arguments for Notifications"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive2'


class FindManyEventsArgsFromNotificationsRecursive2(TypedDict, total=False):
    """Arguments for Notifications"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive3'


class FindManyEventsArgsFromNotificationsRecursive3(TypedDict, total=False):
    """Arguments for Notifications"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive4'


class FindManyEventsArgsFromNotificationsRecursive4(TypedDict, total=False):
    """Arguments for Notifications"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    
    

class ReviewsIncludeFromNotifications(TypedDict, total=False):
    """Relational arguments for Notifications"""
    event: Union[bool, 'EventsArgsFromNotificationsRecursive1']
    parent: Union[bool, 'UsersArgsFromNotificationsRecursive1']


class ReviewsIncludeFromNotificationsRecursive1(TypedDict, total=False):
    """Relational arguments for Notifications"""
    event: Union[bool, 'EventsArgsFromNotificationsRecursive2']
    parent: Union[bool, 'UsersArgsFromNotificationsRecursive2']


class ReviewsIncludeFromNotificationsRecursive2(TypedDict, total=False):
    """Relational arguments for Notifications"""
    event: Union[bool, 'EventsArgsFromNotificationsRecursive3']
    parent: Union[bool, 'UsersArgsFromNotificationsRecursive3']


class ReviewsIncludeFromNotificationsRecursive3(TypedDict, total=False):
    """Relational arguments for Notifications"""
    event: Union[bool, 'EventsArgsFromNotificationsRecursive4']
    parent: Union[bool, 'UsersArgsFromNotificationsRecursive4']


class ReviewsIncludeFromNotificationsRecursive4(TypedDict, total=False):
    """Relational arguments for Notifications"""

    

class ReviewsArgsFromNotifications(TypedDict, total=False):
    """Arguments for Notifications"""
    include: 'ReviewsIncludeFromReviewsRecursive1'


class ReviewsArgsFromNotificationsRecursive1(TypedDict, total=False):
    """Arguments for Notifications"""
    include: 'ReviewsIncludeFromReviewsRecursive2'


class ReviewsArgsFromNotificationsRecursive2(TypedDict, total=False):
    """Arguments for Notifications"""
    include: 'ReviewsIncludeFromReviewsRecursive3'


class ReviewsArgsFromNotificationsRecursive3(TypedDict, total=False):
    """Arguments for Notifications"""
    include: 'ReviewsIncludeFromReviewsRecursive4'


class ReviewsArgsFromNotificationsRecursive4(TypedDict, total=False):
    """Arguments for Notifications"""
    
    

class FindManyReviewsArgsFromNotifications(TypedDict, total=False):
    """Arguments for Notifications"""
    take: int
    skip: int
    order_by: Union['ReviewsOrderByInput', List['ReviewsOrderByInput']]
    where: 'ReviewsWhereInput'
    cursor: 'ReviewsWhereUniqueInput'
    distinct: List['ReviewsScalarFieldKeys']
    include: 'ReviewsIncludeFromReviewsRecursive1'


class FindManyReviewsArgsFromNotificationsRecursive1(TypedDict, total=False):
    """Arguments for Notifications"""
    take: int
    skip: int
    order_by: Union['ReviewsOrderByInput', List['ReviewsOrderByInput']]
    where: 'ReviewsWhereInput'
    cursor: 'ReviewsWhereUniqueInput'
    distinct: List['ReviewsScalarFieldKeys']
    include: 'ReviewsIncludeFromReviewsRecursive2'


class FindManyReviewsArgsFromNotificationsRecursive2(TypedDict, total=False):
    """Arguments for Notifications"""
    take: int
    skip: int
    order_by: Union['ReviewsOrderByInput', List['ReviewsOrderByInput']]
    where: 'ReviewsWhereInput'
    cursor: 'ReviewsWhereUniqueInput'
    distinct: List['ReviewsScalarFieldKeys']
    include: 'ReviewsIncludeFromReviewsRecursive3'


class FindManyReviewsArgsFromNotificationsRecursive3(TypedDict, total=False):
    """Arguments for Notifications"""
    take: int
    skip: int
    order_by: Union['ReviewsOrderByInput', List['ReviewsOrderByInput']]
    where: 'ReviewsWhereInput'
    cursor: 'ReviewsWhereUniqueInput'
    distinct: List['ReviewsScalarFieldKeys']
    include: 'ReviewsIncludeFromReviewsRecursive4'


class FindManyReviewsArgsFromNotificationsRecursive4(TypedDict, total=False):
    """Arguments for Notifications"""
    take: int
    skip: int
    order_by: Union['ReviewsOrderByInput', List['ReviewsOrderByInput']]
    where: 'ReviewsWhereInput'
    cursor: 'ReviewsWhereUniqueInput'
    distinct: List['ReviewsScalarFieldKeys']
    


FindManyNotificationsArgs = FindManyNotificationsArgsFromNotifications
FindFirstNotificationsArgs = FindManyNotificationsArgsFromNotifications


    

class NotificationsWhereInput(TypedDict, total=False):
    """Notifications arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    user: 'UsersRelationFilter'
    userId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['NotificationsWhereInputRecursive1', List['NotificationsWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['NotificationsWhereInputRecursive1']
    OR: List['NotificationsWhereInputRecursive1']
    NOT: List['NotificationsWhereInputRecursive1']


class NotificationsWhereInputRecursive1(TypedDict, total=False):
    """Notifications arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    user: 'UsersRelationFilter'
    userId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['NotificationsWhereInputRecursive2', List['NotificationsWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['NotificationsWhereInputRecursive2']
    OR: List['NotificationsWhereInputRecursive2']
    NOT: List['NotificationsWhereInputRecursive2']


class NotificationsWhereInputRecursive2(TypedDict, total=False):
    """Notifications arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    user: 'UsersRelationFilter'
    userId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['NotificationsWhereInputRecursive3', List['NotificationsWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['NotificationsWhereInputRecursive3']
    OR: List['NotificationsWhereInputRecursive3']
    NOT: List['NotificationsWhereInputRecursive3']


class NotificationsWhereInputRecursive3(TypedDict, total=False):
    """Notifications arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    user: 'UsersRelationFilter'
    userId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['NotificationsWhereInputRecursive4', List['NotificationsWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['NotificationsWhereInputRecursive4']
    OR: List['NotificationsWhereInputRecursive4']
    NOT: List['NotificationsWhereInputRecursive4']


class NotificationsWhereInputRecursive4(TypedDict, total=False):
    """Notifications arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    user: 'UsersRelationFilter'
    userId: Union[_str, 'types.StringFilter']



# aggregate Notifications types


    

class NotificationsScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Notifications arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['NotificationsScalarWhereWithAggregatesInputRecursive1']
    OR: List['NotificationsScalarWhereWithAggregatesInputRecursive1']
    NOT: List['NotificationsScalarWhereWithAggregatesInputRecursive1']


class NotificationsScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Notifications arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['NotificationsScalarWhereWithAggregatesInputRecursive2']
    OR: List['NotificationsScalarWhereWithAggregatesInputRecursive2']
    NOT: List['NotificationsScalarWhereWithAggregatesInputRecursive2']


class NotificationsScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Notifications arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['NotificationsScalarWhereWithAggregatesInputRecursive3']
    OR: List['NotificationsScalarWhereWithAggregatesInputRecursive3']
    NOT: List['NotificationsScalarWhereWithAggregatesInputRecursive3']


class NotificationsScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Notifications arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['NotificationsScalarWhereWithAggregatesInputRecursive4']
    OR: List['NotificationsScalarWhereWithAggregatesInputRecursive4']
    NOT: List['NotificationsScalarWhereWithAggregatesInputRecursive4']


class NotificationsScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Notifications arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']



class NotificationsGroupByOutput(TypedDict, total=False):
    id: _str
    description: _str
    userId: _str
    _sum: 'NotificationsSumAggregateOutput'
    _avg: 'NotificationsAvgAggregateOutput'
    _min: 'NotificationsMinAggregateOutput'
    _max: 'NotificationsMaxAggregateOutput'
    _count: 'NotificationsCountAggregateOutput'


class NotificationsAvgAggregateOutput(TypedDict, total=False):
    """Notifications output for aggregating averages"""


class NotificationsSumAggregateOutput(TypedDict, total=False):
    """Notifications output for aggregating sums"""


class NotificationsScalarAggregateOutput(TypedDict, total=False):
    """Notifications output including scalar fields"""
    id: _str
    description: _str
    userId: _str


NotificationsMinAggregateOutput = NotificationsScalarAggregateOutput
NotificationsMaxAggregateOutput = NotificationsScalarAggregateOutput


class NotificationsMaxAggregateInput(TypedDict, total=False):
    """Notifications input for aggregating by max"""
    id: bool
    description: bool
    userId: bool


class NotificationsMinAggregateInput(TypedDict, total=False):
    """Notifications input for aggregating by min"""
    id: bool
    description: bool
    userId: bool


class NotificationsNumberAggregateInput(TypedDict, total=False):
    """Notifications input for aggregating numbers"""


NotificationsAvgAggregateInput = NotificationsNumberAggregateInput
NotificationsSumAggregateInput = NotificationsNumberAggregateInput


NotificationsCountAggregateInput = TypedDict(
    'NotificationsCountAggregateInput',
    {
        'id': bool,
        'description': bool,
        'userId': bool,
        '_all': bool,
    },
    total=False,
)

NotificationsCountAggregateOutput = TypedDict(
    'NotificationsCountAggregateOutput',
    {
        'id': int,
        'description': int,
        'userId': int,
        '_all': int,
    },
    total=False,
)


NotificationsKeys = Literal[
    'id',
    'description',
    'user',
    'userId',
]
NotificationsScalarFieldKeys = Literal[
    'id',
    'description',
    'userId',
]
NotificationsScalarFieldKeysT = TypeVar('NotificationsScalarFieldKeysT', bound=NotificationsScalarFieldKeys)

NotificationsRelationalFieldKeys = Literal[
        'user',
    ]

# Children types

class ChildrenOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Children create method"""
    id: _str
    parentIDs: List[_str]
    parents: 'UsersCreateManyNestedWithoutRelationsInput'
    eventIDs: List[_str]
    events: 'EventsCreateManyNestedWithoutRelationsInput'


class ChildrenCreateInput(ChildrenOptionalCreateInput):
    """Required arguments to the Children create method"""
    firstName: _str
    lastName: _str
    homeschool: _bool
    age: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ChildrenOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Children create method, without relations"""
    id: _str
    parentIDs: List[_str]
    eventIDs: List[_str]


class ChildrenCreateWithoutRelationsInput(ChildrenOptionalCreateWithoutRelationsInput):
    """Required arguments to the Children create method, without relations"""
    firstName: _str
    lastName: _str
    homeschool: _bool
    age: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime

class ChildrenConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ChildrenCreateWithoutRelationsInput'
    where: 'ChildrenWhereUniqueInput'

class ChildrenCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ChildrenCreateWithoutRelationsInput'
    connect: 'ChildrenWhereUniqueInput'
    connect_or_create: 'ChildrenConnectOrCreateWithoutRelationsInput'


class ChildrenCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ChildrenCreateWithoutRelationsInput', List['ChildrenCreateWithoutRelationsInput']]
    connect: Union['ChildrenWhereUniqueInput', List['ChildrenWhereUniqueInput']]
    connect_or_create: Union['ChildrenConnectOrCreateWithoutRelationsInput', List['ChildrenConnectOrCreateWithoutRelationsInput']]

_ChildrenWhereUnique_id_Input = TypedDict(
    '_ChildrenWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

ChildrenWhereUniqueInput = _ChildrenWhereUnique_id_Input


class ChildrenUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    firstName: _str
    lastName: _str
    homeschool: _bool
    age: Union[AtomicIntInput, _int]
    parents: 'UsersUpdateManyWithoutRelationsInput'
    events: 'EventsUpdateManyWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ChildrenUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    firstName: _str
    lastName: _str
    homeschool: _bool
    age: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ChildrenUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ChildrenCreateWithoutRelationsInput']
    connect: List['ChildrenWhereUniqueInput']
    connect_or_create: List['ChildrenConnectOrCreateWithoutRelationsInput']
    set: List['ChildrenWhereUniqueInput']
    disconnect: List['ChildrenWhereUniqueInput']
    delete: List['ChildrenWhereUniqueInput']

    # TODO
    # update: List['ChildrenUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ChildrenUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ChildrenScalarWhereInput']
    # upsert: List['ChildrenUpserteWithWhereUniqueWithoutRelationsInput']


class ChildrenUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ChildrenCreateWithoutRelationsInput'
    connect: 'ChildrenWhereUniqueInput'
    connect_or_create: 'ChildrenConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ChildrenUpdateInput'
    # upsert: 'ChildrenUpsertWithoutRelationsInput'


class ChildrenUpsertInput(TypedDict):
    create: 'ChildrenCreateInput'
    update: 'ChildrenUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Children_id_OrderByInput = TypedDict(
    '_Children_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Children_firstName_OrderByInput = TypedDict(
    '_Children_firstName_OrderByInput',
    {
        'firstName': 'SortOrder',
    },
    total=True
)

_Children_lastName_OrderByInput = TypedDict(
    '_Children_lastName_OrderByInput',
    {
        'lastName': 'SortOrder',
    },
    total=True
)

_Children_homeschool_OrderByInput = TypedDict(
    '_Children_homeschool_OrderByInput',
    {
        'homeschool': 'SortOrder',
    },
    total=True
)

_Children_age_OrderByInput = TypedDict(
    '_Children_age_OrderByInput',
    {
        'age': 'SortOrder',
    },
    total=True
)

_Children_parentIDs_OrderByInput = TypedDict(
    '_Children_parentIDs_OrderByInput',
    {
        'parentIDs': 'SortOrder',
    },
    total=True
)

_Children_eventIDs_OrderByInput = TypedDict(
    '_Children_eventIDs_OrderByInput',
    {
        'eventIDs': 'SortOrder',
    },
    total=True
)

_Children_createdAt_OrderByInput = TypedDict(
    '_Children_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Children_updatedAt_OrderByInput = TypedDict(
    '_Children_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

ChildrenOrderByInput = Union[
    '_Children_id_OrderByInput',
    '_Children_firstName_OrderByInput',
    '_Children_lastName_OrderByInput',
    '_Children_homeschool_OrderByInput',
    '_Children_age_OrderByInput',
    '_Children_parentIDs_OrderByInput',
    '_Children_eventIDs_OrderByInput',
    '_Children_createdAt_OrderByInput',
    '_Children_updatedAt_OrderByInput',
]



# recursive Children types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ChildrenRelationFilter = TypedDict(
    'ChildrenRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ChildrenListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ChildrenInclude(TypedDict, total=False):
    """Children relational arguments"""
    parents: Union[bool, 'FindManyUsersArgsFromChildren']
    events: Union[bool, 'FindManyEventsArgsFromChildren']


    

class UsersIncludeFromChildren(TypedDict, total=False):
    """Relational arguments for Children"""
    children: Union[bool, 'FindManyChildrenArgsFromChildrenRecursive1']
    events: Union[bool, 'FindManyEventsArgsFromChildrenRecursive1']
    notifications: Union[bool, 'FindManyNotificationsArgsFromChildrenRecursive1']
    reviews: Union[bool, 'FindManyReviewsArgsFromChildrenRecursive1']


class UsersIncludeFromChildrenRecursive1(TypedDict, total=False):
    """Relational arguments for Children"""
    children: Union[bool, 'FindManyChildrenArgsFromChildrenRecursive2']
    events: Union[bool, 'FindManyEventsArgsFromChildrenRecursive2']
    notifications: Union[bool, 'FindManyNotificationsArgsFromChildrenRecursive2']
    reviews: Union[bool, 'FindManyReviewsArgsFromChildrenRecursive2']


class UsersIncludeFromChildrenRecursive2(TypedDict, total=False):
    """Relational arguments for Children"""
    children: Union[bool, 'FindManyChildrenArgsFromChildrenRecursive3']
    events: Union[bool, 'FindManyEventsArgsFromChildrenRecursive3']
    notifications: Union[bool, 'FindManyNotificationsArgsFromChildrenRecursive3']
    reviews: Union[bool, 'FindManyReviewsArgsFromChildrenRecursive3']


class UsersIncludeFromChildrenRecursive3(TypedDict, total=False):
    """Relational arguments for Children"""
    children: Union[bool, 'FindManyChildrenArgsFromChildrenRecursive4']
    events: Union[bool, 'FindManyEventsArgsFromChildrenRecursive4']
    notifications: Union[bool, 'FindManyNotificationsArgsFromChildrenRecursive4']
    reviews: Union[bool, 'FindManyReviewsArgsFromChildrenRecursive4']


class UsersIncludeFromChildrenRecursive4(TypedDict, total=False):
    """Relational arguments for Children"""

    

class UsersArgsFromChildren(TypedDict, total=False):
    """Arguments for Children"""
    include: 'UsersIncludeFromUsersRecursive1'


class UsersArgsFromChildrenRecursive1(TypedDict, total=False):
    """Arguments for Children"""
    include: 'UsersIncludeFromUsersRecursive2'


class UsersArgsFromChildrenRecursive2(TypedDict, total=False):
    """Arguments for Children"""
    include: 'UsersIncludeFromUsersRecursive3'


class UsersArgsFromChildrenRecursive3(TypedDict, total=False):
    """Arguments for Children"""
    include: 'UsersIncludeFromUsersRecursive4'


class UsersArgsFromChildrenRecursive4(TypedDict, total=False):
    """Arguments for Children"""
    
    

class FindManyUsersArgsFromChildren(TypedDict, total=False):
    """Arguments for Children"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive1'


class FindManyUsersArgsFromChildrenRecursive1(TypedDict, total=False):
    """Arguments for Children"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive2'


class FindManyUsersArgsFromChildrenRecursive2(TypedDict, total=False):
    """Arguments for Children"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive3'


class FindManyUsersArgsFromChildrenRecursive3(TypedDict, total=False):
    """Arguments for Children"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive4'


class FindManyUsersArgsFromChildrenRecursive4(TypedDict, total=False):
    """Arguments for Children"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    
    

class NotificationsIncludeFromChildren(TypedDict, total=False):
    """Relational arguments for Children"""
    user: Union[bool, 'UsersArgsFromChildrenRecursive1']


class NotificationsIncludeFromChildrenRecursive1(TypedDict, total=False):
    """Relational arguments for Children"""
    user: Union[bool, 'UsersArgsFromChildrenRecursive2']


class NotificationsIncludeFromChildrenRecursive2(TypedDict, total=False):
    """Relational arguments for Children"""
    user: Union[bool, 'UsersArgsFromChildrenRecursive3']


class NotificationsIncludeFromChildrenRecursive3(TypedDict, total=False):
    """Relational arguments for Children"""
    user: Union[bool, 'UsersArgsFromChildrenRecursive4']


class NotificationsIncludeFromChildrenRecursive4(TypedDict, total=False):
    """Relational arguments for Children"""

    

class NotificationsArgsFromChildren(TypedDict, total=False):
    """Arguments for Children"""
    include: 'NotificationsIncludeFromNotificationsRecursive1'


class NotificationsArgsFromChildrenRecursive1(TypedDict, total=False):
    """Arguments for Children"""
    include: 'NotificationsIncludeFromNotificationsRecursive2'


class NotificationsArgsFromChildrenRecursive2(TypedDict, total=False):
    """Arguments for Children"""
    include: 'NotificationsIncludeFromNotificationsRecursive3'


class NotificationsArgsFromChildrenRecursive3(TypedDict, total=False):
    """Arguments for Children"""
    include: 'NotificationsIncludeFromNotificationsRecursive4'


class NotificationsArgsFromChildrenRecursive4(TypedDict, total=False):
    """Arguments for Children"""
    
    

class FindManyNotificationsArgsFromChildren(TypedDict, total=False):
    """Arguments for Children"""
    take: int
    skip: int
    order_by: Union['NotificationsOrderByInput', List['NotificationsOrderByInput']]
    where: 'NotificationsWhereInput'
    cursor: 'NotificationsWhereUniqueInput'
    distinct: List['NotificationsScalarFieldKeys']
    include: 'NotificationsIncludeFromNotificationsRecursive1'


class FindManyNotificationsArgsFromChildrenRecursive1(TypedDict, total=False):
    """Arguments for Children"""
    take: int
    skip: int
    order_by: Union['NotificationsOrderByInput', List['NotificationsOrderByInput']]
    where: 'NotificationsWhereInput'
    cursor: 'NotificationsWhereUniqueInput'
    distinct: List['NotificationsScalarFieldKeys']
    include: 'NotificationsIncludeFromNotificationsRecursive2'


class FindManyNotificationsArgsFromChildrenRecursive2(TypedDict, total=False):
    """Arguments for Children"""
    take: int
    skip: int
    order_by: Union['NotificationsOrderByInput', List['NotificationsOrderByInput']]
    where: 'NotificationsWhereInput'
    cursor: 'NotificationsWhereUniqueInput'
    distinct: List['NotificationsScalarFieldKeys']
    include: 'NotificationsIncludeFromNotificationsRecursive3'


class FindManyNotificationsArgsFromChildrenRecursive3(TypedDict, total=False):
    """Arguments for Children"""
    take: int
    skip: int
    order_by: Union['NotificationsOrderByInput', List['NotificationsOrderByInput']]
    where: 'NotificationsWhereInput'
    cursor: 'NotificationsWhereUniqueInput'
    distinct: List['NotificationsScalarFieldKeys']
    include: 'NotificationsIncludeFromNotificationsRecursive4'


class FindManyNotificationsArgsFromChildrenRecursive4(TypedDict, total=False):
    """Arguments for Children"""
    take: int
    skip: int
    order_by: Union['NotificationsOrderByInput', List['NotificationsOrderByInput']]
    where: 'NotificationsWhereInput'
    cursor: 'NotificationsWhereUniqueInput'
    distinct: List['NotificationsScalarFieldKeys']
    
    

class ChildrenIncludeFromChildren(TypedDict, total=False):
    """Relational arguments for Children"""
    parents: Union[bool, 'FindManyUsersArgsFromChildrenRecursive1']
    events: Union[bool, 'FindManyEventsArgsFromChildrenRecursive1']


class ChildrenIncludeFromChildrenRecursive1(TypedDict, total=False):
    """Relational arguments for Children"""
    parents: Union[bool, 'FindManyUsersArgsFromChildrenRecursive2']
    events: Union[bool, 'FindManyEventsArgsFromChildrenRecursive2']


class ChildrenIncludeFromChildrenRecursive2(TypedDict, total=False):
    """Relational arguments for Children"""
    parents: Union[bool, 'FindManyUsersArgsFromChildrenRecursive3']
    events: Union[bool, 'FindManyEventsArgsFromChildrenRecursive3']


class ChildrenIncludeFromChildrenRecursive3(TypedDict, total=False):
    """Relational arguments for Children"""
    parents: Union[bool, 'FindManyUsersArgsFromChildrenRecursive4']
    events: Union[bool, 'FindManyEventsArgsFromChildrenRecursive4']


class ChildrenIncludeFromChildrenRecursive4(TypedDict, total=False):
    """Relational arguments for Children"""

    

class ChildrenArgsFromChildren(TypedDict, total=False):
    """Arguments for Children"""
    include: 'ChildrenIncludeFromChildrenRecursive1'


class ChildrenArgsFromChildrenRecursive1(TypedDict, total=False):
    """Arguments for Children"""
    include: 'ChildrenIncludeFromChildrenRecursive2'


class ChildrenArgsFromChildrenRecursive2(TypedDict, total=False):
    """Arguments for Children"""
    include: 'ChildrenIncludeFromChildrenRecursive3'


class ChildrenArgsFromChildrenRecursive3(TypedDict, total=False):
    """Arguments for Children"""
    include: 'ChildrenIncludeFromChildrenRecursive4'


class ChildrenArgsFromChildrenRecursive4(TypedDict, total=False):
    """Arguments for Children"""
    
    

class FindManyChildrenArgsFromChildren(TypedDict, total=False):
    """Arguments for Children"""
    take: int
    skip: int
    order_by: Union['ChildrenOrderByInput', List['ChildrenOrderByInput']]
    where: 'ChildrenWhereInput'
    cursor: 'ChildrenWhereUniqueInput'
    distinct: List['ChildrenScalarFieldKeys']
    include: 'ChildrenIncludeFromChildrenRecursive1'


class FindManyChildrenArgsFromChildrenRecursive1(TypedDict, total=False):
    """Arguments for Children"""
    take: int
    skip: int
    order_by: Union['ChildrenOrderByInput', List['ChildrenOrderByInput']]
    where: 'ChildrenWhereInput'
    cursor: 'ChildrenWhereUniqueInput'
    distinct: List['ChildrenScalarFieldKeys']
    include: 'ChildrenIncludeFromChildrenRecursive2'


class FindManyChildrenArgsFromChildrenRecursive2(TypedDict, total=False):
    """Arguments for Children"""
    take: int
    skip: int
    order_by: Union['ChildrenOrderByInput', List['ChildrenOrderByInput']]
    where: 'ChildrenWhereInput'
    cursor: 'ChildrenWhereUniqueInput'
    distinct: List['ChildrenScalarFieldKeys']
    include: 'ChildrenIncludeFromChildrenRecursive3'


class FindManyChildrenArgsFromChildrenRecursive3(TypedDict, total=False):
    """Arguments for Children"""
    take: int
    skip: int
    order_by: Union['ChildrenOrderByInput', List['ChildrenOrderByInput']]
    where: 'ChildrenWhereInput'
    cursor: 'ChildrenWhereUniqueInput'
    distinct: List['ChildrenScalarFieldKeys']
    include: 'ChildrenIncludeFromChildrenRecursive4'


class FindManyChildrenArgsFromChildrenRecursive4(TypedDict, total=False):
    """Arguments for Children"""
    take: int
    skip: int
    order_by: Union['ChildrenOrderByInput', List['ChildrenOrderByInput']]
    where: 'ChildrenWhereInput'
    cursor: 'ChildrenWhereUniqueInput'
    distinct: List['ChildrenScalarFieldKeys']
    
    

class ActivitiesIncludeFromChildren(TypedDict, total=False):
    """Relational arguments for Children"""
    events: Union[bool, 'FindManyEventsArgsFromChildrenRecursive1']


class ActivitiesIncludeFromChildrenRecursive1(TypedDict, total=False):
    """Relational arguments for Children"""
    events: Union[bool, 'FindManyEventsArgsFromChildrenRecursive2']


class ActivitiesIncludeFromChildrenRecursive2(TypedDict, total=False):
    """Relational arguments for Children"""
    events: Union[bool, 'FindManyEventsArgsFromChildrenRecursive3']


class ActivitiesIncludeFromChildrenRecursive3(TypedDict, total=False):
    """Relational arguments for Children"""
    events: Union[bool, 'FindManyEventsArgsFromChildrenRecursive4']


class ActivitiesIncludeFromChildrenRecursive4(TypedDict, total=False):
    """Relational arguments for Children"""

    

class ActivitiesArgsFromChildren(TypedDict, total=False):
    """Arguments for Children"""
    include: 'ActivitiesIncludeFromActivitiesRecursive1'


class ActivitiesArgsFromChildrenRecursive1(TypedDict, total=False):
    """Arguments for Children"""
    include: 'ActivitiesIncludeFromActivitiesRecursive2'


class ActivitiesArgsFromChildrenRecursive2(TypedDict, total=False):
    """Arguments for Children"""
    include: 'ActivitiesIncludeFromActivitiesRecursive3'


class ActivitiesArgsFromChildrenRecursive3(TypedDict, total=False):
    """Arguments for Children"""
    include: 'ActivitiesIncludeFromActivitiesRecursive4'


class ActivitiesArgsFromChildrenRecursive4(TypedDict, total=False):
    """Arguments for Children"""
    
    

class FindManyActivitiesArgsFromChildren(TypedDict, total=False):
    """Arguments for Children"""
    take: int
    skip: int
    order_by: Union['ActivitiesOrderByInput', List['ActivitiesOrderByInput']]
    where: 'ActivitiesWhereInput'
    cursor: 'ActivitiesWhereUniqueInput'
    distinct: List['ActivitiesScalarFieldKeys']
    include: 'ActivitiesIncludeFromActivitiesRecursive1'


class FindManyActivitiesArgsFromChildrenRecursive1(TypedDict, total=False):
    """Arguments for Children"""
    take: int
    skip: int
    order_by: Union['ActivitiesOrderByInput', List['ActivitiesOrderByInput']]
    where: 'ActivitiesWhereInput'
    cursor: 'ActivitiesWhereUniqueInput'
    distinct: List['ActivitiesScalarFieldKeys']
    include: 'ActivitiesIncludeFromActivitiesRecursive2'


class FindManyActivitiesArgsFromChildrenRecursive2(TypedDict, total=False):
    """Arguments for Children"""
    take: int
    skip: int
    order_by: Union['ActivitiesOrderByInput', List['ActivitiesOrderByInput']]
    where: 'ActivitiesWhereInput'
    cursor: 'ActivitiesWhereUniqueInput'
    distinct: List['ActivitiesScalarFieldKeys']
    include: 'ActivitiesIncludeFromActivitiesRecursive3'


class FindManyActivitiesArgsFromChildrenRecursive3(TypedDict, total=False):
    """Arguments for Children"""
    take: int
    skip: int
    order_by: Union['ActivitiesOrderByInput', List['ActivitiesOrderByInput']]
    where: 'ActivitiesWhereInput'
    cursor: 'ActivitiesWhereUniqueInput'
    distinct: List['ActivitiesScalarFieldKeys']
    include: 'ActivitiesIncludeFromActivitiesRecursive4'


class FindManyActivitiesArgsFromChildrenRecursive4(TypedDict, total=False):
    """Arguments for Children"""
    take: int
    skip: int
    order_by: Union['ActivitiesOrderByInput', List['ActivitiesOrderByInput']]
    where: 'ActivitiesWhereInput'
    cursor: 'ActivitiesWhereUniqueInput'
    distinct: List['ActivitiesScalarFieldKeys']
    
    

class EventsIncludeFromChildren(TypedDict, total=False):
    """Relational arguments for Children"""
    children: Union[bool, 'FindManyChildrenArgsFromChildrenRecursive1']
    users: Union[bool, 'FindManyUsersArgsFromChildrenRecursive1']
    activity: Union[bool, 'ActivitiesArgsFromChildrenRecursive1']
    reviews: Union[bool, 'FindManyReviewsArgsFromChildrenRecursive1']


class EventsIncludeFromChildrenRecursive1(TypedDict, total=False):
    """Relational arguments for Children"""
    children: Union[bool, 'FindManyChildrenArgsFromChildrenRecursive2']
    users: Union[bool, 'FindManyUsersArgsFromChildrenRecursive2']
    activity: Union[bool, 'ActivitiesArgsFromChildrenRecursive2']
    reviews: Union[bool, 'FindManyReviewsArgsFromChildrenRecursive2']


class EventsIncludeFromChildrenRecursive2(TypedDict, total=False):
    """Relational arguments for Children"""
    children: Union[bool, 'FindManyChildrenArgsFromChildrenRecursive3']
    users: Union[bool, 'FindManyUsersArgsFromChildrenRecursive3']
    activity: Union[bool, 'ActivitiesArgsFromChildrenRecursive3']
    reviews: Union[bool, 'FindManyReviewsArgsFromChildrenRecursive3']


class EventsIncludeFromChildrenRecursive3(TypedDict, total=False):
    """Relational arguments for Children"""
    children: Union[bool, 'FindManyChildrenArgsFromChildrenRecursive4']
    users: Union[bool, 'FindManyUsersArgsFromChildrenRecursive4']
    activity: Union[bool, 'ActivitiesArgsFromChildrenRecursive4']
    reviews: Union[bool, 'FindManyReviewsArgsFromChildrenRecursive4']


class EventsIncludeFromChildrenRecursive4(TypedDict, total=False):
    """Relational arguments for Children"""

    

class EventsArgsFromChildren(TypedDict, total=False):
    """Arguments for Children"""
    include: 'EventsIncludeFromEventsRecursive1'


class EventsArgsFromChildrenRecursive1(TypedDict, total=False):
    """Arguments for Children"""
    include: 'EventsIncludeFromEventsRecursive2'


class EventsArgsFromChildrenRecursive2(TypedDict, total=False):
    """Arguments for Children"""
    include: 'EventsIncludeFromEventsRecursive3'


class EventsArgsFromChildrenRecursive3(TypedDict, total=False):
    """Arguments for Children"""
    include: 'EventsIncludeFromEventsRecursive4'


class EventsArgsFromChildrenRecursive4(TypedDict, total=False):
    """Arguments for Children"""
    
    

class FindManyEventsArgsFromChildren(TypedDict, total=False):
    """Arguments for Children"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive1'


class FindManyEventsArgsFromChildrenRecursive1(TypedDict, total=False):
    """Arguments for Children"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive2'


class FindManyEventsArgsFromChildrenRecursive2(TypedDict, total=False):
    """Arguments for Children"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive3'


class FindManyEventsArgsFromChildrenRecursive3(TypedDict, total=False):
    """Arguments for Children"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive4'


class FindManyEventsArgsFromChildrenRecursive4(TypedDict, total=False):
    """Arguments for Children"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    
    

class ReviewsIncludeFromChildren(TypedDict, total=False):
    """Relational arguments for Children"""
    event: Union[bool, 'EventsArgsFromChildrenRecursive1']
    parent: Union[bool, 'UsersArgsFromChildrenRecursive1']


class ReviewsIncludeFromChildrenRecursive1(TypedDict, total=False):
    """Relational arguments for Children"""
    event: Union[bool, 'EventsArgsFromChildrenRecursive2']
    parent: Union[bool, 'UsersArgsFromChildrenRecursive2']


class ReviewsIncludeFromChildrenRecursive2(TypedDict, total=False):
    """Relational arguments for Children"""
    event: Union[bool, 'EventsArgsFromChildrenRecursive3']
    parent: Union[bool, 'UsersArgsFromChildrenRecursive3']


class ReviewsIncludeFromChildrenRecursive3(TypedDict, total=False):
    """Relational arguments for Children"""
    event: Union[bool, 'EventsArgsFromChildrenRecursive4']
    parent: Union[bool, 'UsersArgsFromChildrenRecursive4']


class ReviewsIncludeFromChildrenRecursive4(TypedDict, total=False):
    """Relational arguments for Children"""

    

class ReviewsArgsFromChildren(TypedDict, total=False):
    """Arguments for Children"""
    include: 'ReviewsIncludeFromReviewsRecursive1'


class ReviewsArgsFromChildrenRecursive1(TypedDict, total=False):
    """Arguments for Children"""
    include: 'ReviewsIncludeFromReviewsRecursive2'


class ReviewsArgsFromChildrenRecursive2(TypedDict, total=False):
    """Arguments for Children"""
    include: 'ReviewsIncludeFromReviewsRecursive3'


class ReviewsArgsFromChildrenRecursive3(TypedDict, total=False):
    """Arguments for Children"""
    include: 'ReviewsIncludeFromReviewsRecursive4'


class ReviewsArgsFromChildrenRecursive4(TypedDict, total=False):
    """Arguments for Children"""
    
    

class FindManyReviewsArgsFromChildren(TypedDict, total=False):
    """Arguments for Children"""
    take: int
    skip: int
    order_by: Union['ReviewsOrderByInput', List['ReviewsOrderByInput']]
    where: 'ReviewsWhereInput'
    cursor: 'ReviewsWhereUniqueInput'
    distinct: List['ReviewsScalarFieldKeys']
    include: 'ReviewsIncludeFromReviewsRecursive1'


class FindManyReviewsArgsFromChildrenRecursive1(TypedDict, total=False):
    """Arguments for Children"""
    take: int
    skip: int
    order_by: Union['ReviewsOrderByInput', List['ReviewsOrderByInput']]
    where: 'ReviewsWhereInput'
    cursor: 'ReviewsWhereUniqueInput'
    distinct: List['ReviewsScalarFieldKeys']
    include: 'ReviewsIncludeFromReviewsRecursive2'


class FindManyReviewsArgsFromChildrenRecursive2(TypedDict, total=False):
    """Arguments for Children"""
    take: int
    skip: int
    order_by: Union['ReviewsOrderByInput', List['ReviewsOrderByInput']]
    where: 'ReviewsWhereInput'
    cursor: 'ReviewsWhereUniqueInput'
    distinct: List['ReviewsScalarFieldKeys']
    include: 'ReviewsIncludeFromReviewsRecursive3'


class FindManyReviewsArgsFromChildrenRecursive3(TypedDict, total=False):
    """Arguments for Children"""
    take: int
    skip: int
    order_by: Union['ReviewsOrderByInput', List['ReviewsOrderByInput']]
    where: 'ReviewsWhereInput'
    cursor: 'ReviewsWhereUniqueInput'
    distinct: List['ReviewsScalarFieldKeys']
    include: 'ReviewsIncludeFromReviewsRecursive4'


class FindManyReviewsArgsFromChildrenRecursive4(TypedDict, total=False):
    """Arguments for Children"""
    take: int
    skip: int
    order_by: Union['ReviewsOrderByInput', List['ReviewsOrderByInput']]
    where: 'ReviewsWhereInput'
    cursor: 'ReviewsWhereUniqueInput'
    distinct: List['ReviewsScalarFieldKeys']
    


FindManyChildrenArgs = FindManyChildrenArgsFromChildren
FindFirstChildrenArgs = FindManyChildrenArgsFromChildren


    

class ChildrenWhereInput(TypedDict, total=False):
    """Children arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    firstName: Union[_str, 'types.StringFilter']
    lastName: Union[_str, 'types.StringFilter']
    homeschool: Union[_bool, 'types.BooleanFilter']
    age: Union[_int, 'types.IntFilter']
    parentIDs: 'types.StringListFilter'
    parents: 'UsersListRelationFilter'
    eventIDs: 'types.StringListFilter'
    events: 'EventsListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ChildrenWhereInputRecursive1', List['ChildrenWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ChildrenWhereInputRecursive1']
    OR: List['ChildrenWhereInputRecursive1']
    NOT: List['ChildrenWhereInputRecursive1']


class ChildrenWhereInputRecursive1(TypedDict, total=False):
    """Children arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    firstName: Union[_str, 'types.StringFilter']
    lastName: Union[_str, 'types.StringFilter']
    homeschool: Union[_bool, 'types.BooleanFilter']
    age: Union[_int, 'types.IntFilter']
    parentIDs: 'types.StringListFilter'
    parents: 'UsersListRelationFilter'
    eventIDs: 'types.StringListFilter'
    events: 'EventsListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ChildrenWhereInputRecursive2', List['ChildrenWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ChildrenWhereInputRecursive2']
    OR: List['ChildrenWhereInputRecursive2']
    NOT: List['ChildrenWhereInputRecursive2']


class ChildrenWhereInputRecursive2(TypedDict, total=False):
    """Children arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    firstName: Union[_str, 'types.StringFilter']
    lastName: Union[_str, 'types.StringFilter']
    homeschool: Union[_bool, 'types.BooleanFilter']
    age: Union[_int, 'types.IntFilter']
    parentIDs: 'types.StringListFilter'
    parents: 'UsersListRelationFilter'
    eventIDs: 'types.StringListFilter'
    events: 'EventsListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ChildrenWhereInputRecursive3', List['ChildrenWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ChildrenWhereInputRecursive3']
    OR: List['ChildrenWhereInputRecursive3']
    NOT: List['ChildrenWhereInputRecursive3']


class ChildrenWhereInputRecursive3(TypedDict, total=False):
    """Children arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    firstName: Union[_str, 'types.StringFilter']
    lastName: Union[_str, 'types.StringFilter']
    homeschool: Union[_bool, 'types.BooleanFilter']
    age: Union[_int, 'types.IntFilter']
    parentIDs: 'types.StringListFilter'
    parents: 'UsersListRelationFilter'
    eventIDs: 'types.StringListFilter'
    events: 'EventsListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ChildrenWhereInputRecursive4', List['ChildrenWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ChildrenWhereInputRecursive4']
    OR: List['ChildrenWhereInputRecursive4']
    NOT: List['ChildrenWhereInputRecursive4']


class ChildrenWhereInputRecursive4(TypedDict, total=False):
    """Children arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    firstName: Union[_str, 'types.StringFilter']
    lastName: Union[_str, 'types.StringFilter']
    homeschool: Union[_bool, 'types.BooleanFilter']
    age: Union[_int, 'types.IntFilter']
    parentIDs: 'types.StringListFilter'
    parents: 'UsersListRelationFilter'
    eventIDs: 'types.StringListFilter'
    events: 'EventsListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Children types


    

class ChildrenScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Children arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    homeschool: Union[_bool, 'types.BooleanWithAggregatesFilter']
    age: Union[_int, 'types.IntWithAggregatesFilter']
    parentIDs: Union[_str, 'types.StringWithAggregatesFilter']
    eventIDs: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ChildrenScalarWhereWithAggregatesInputRecursive1']
    OR: List['ChildrenScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ChildrenScalarWhereWithAggregatesInputRecursive1']


class ChildrenScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Children arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    homeschool: Union[_bool, 'types.BooleanWithAggregatesFilter']
    age: Union[_int, 'types.IntWithAggregatesFilter']
    parentIDs: Union[_str, 'types.StringWithAggregatesFilter']
    eventIDs: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ChildrenScalarWhereWithAggregatesInputRecursive2']
    OR: List['ChildrenScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ChildrenScalarWhereWithAggregatesInputRecursive2']


class ChildrenScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Children arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    homeschool: Union[_bool, 'types.BooleanWithAggregatesFilter']
    age: Union[_int, 'types.IntWithAggregatesFilter']
    parentIDs: Union[_str, 'types.StringWithAggregatesFilter']
    eventIDs: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ChildrenScalarWhereWithAggregatesInputRecursive3']
    OR: List['ChildrenScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ChildrenScalarWhereWithAggregatesInputRecursive3']


class ChildrenScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Children arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    homeschool: Union[_bool, 'types.BooleanWithAggregatesFilter']
    age: Union[_int, 'types.IntWithAggregatesFilter']
    parentIDs: Union[_str, 'types.StringWithAggregatesFilter']
    eventIDs: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ChildrenScalarWhereWithAggregatesInputRecursive4']
    OR: List['ChildrenScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ChildrenScalarWhereWithAggregatesInputRecursive4']


class ChildrenScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Children arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    homeschool: Union[_bool, 'types.BooleanWithAggregatesFilter']
    age: Union[_int, 'types.IntWithAggregatesFilter']
    parentIDs: Union[_str, 'types.StringWithAggregatesFilter']
    eventIDs: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class ChildrenGroupByOutput(TypedDict, total=False):
    id: _str
    firstName: _str
    lastName: _str
    homeschool: _bool
    age: _int
    parentIDs: List[_str]
    eventIDs: List[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'ChildrenSumAggregateOutput'
    _avg: 'ChildrenAvgAggregateOutput'
    _min: 'ChildrenMinAggregateOutput'
    _max: 'ChildrenMaxAggregateOutput'
    _count: 'ChildrenCountAggregateOutput'


class ChildrenAvgAggregateOutput(TypedDict, total=False):
    """Children output for aggregating averages"""
    age: float


class ChildrenSumAggregateOutput(TypedDict, total=False):
    """Children output for aggregating sums"""
    age: _int


class ChildrenScalarAggregateOutput(TypedDict, total=False):
    """Children output including scalar fields"""
    id: _str
    firstName: _str
    lastName: _str
    homeschool: _bool
    age: _int
    parentIDs: List[_str]
    eventIDs: List[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


ChildrenMinAggregateOutput = ChildrenScalarAggregateOutput
ChildrenMaxAggregateOutput = ChildrenScalarAggregateOutput


class ChildrenMaxAggregateInput(TypedDict, total=False):
    """Children input for aggregating by max"""
    id: bool
    firstName: bool
    lastName: bool
    homeschool: bool
    age: bool
    parentIDs: bool
    eventIDs: bool
    createdAt: bool
    updatedAt: bool


class ChildrenMinAggregateInput(TypedDict, total=False):
    """Children input for aggregating by min"""
    id: bool
    firstName: bool
    lastName: bool
    homeschool: bool
    age: bool
    parentIDs: bool
    eventIDs: bool
    createdAt: bool
    updatedAt: bool


class ChildrenNumberAggregateInput(TypedDict, total=False):
    """Children input for aggregating numbers"""
    age: bool


ChildrenAvgAggregateInput = ChildrenNumberAggregateInput
ChildrenSumAggregateInput = ChildrenNumberAggregateInput


ChildrenCountAggregateInput = TypedDict(
    'ChildrenCountAggregateInput',
    {
        'id': bool,
        'firstName': bool,
        'lastName': bool,
        'homeschool': bool,
        'age': bool,
        'parentIDs': bool,
        'eventIDs': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

ChildrenCountAggregateOutput = TypedDict(
    'ChildrenCountAggregateOutput',
    {
        'id': int,
        'firstName': int,
        'lastName': int,
        'homeschool': int,
        'age': int,
        'parentIDs': int,
        'eventIDs': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


ChildrenKeys = Literal[
    'id',
    'firstName',
    'lastName',
    'homeschool',
    'age',
    'parentIDs',
    'parents',
    'eventIDs',
    'events',
    'createdAt',
    'updatedAt',
]
ChildrenScalarFieldKeys = Literal[
    'id',
    'firstName',
    'lastName',
    'homeschool',
    'age',
    'parentIDs',
    'eventIDs',
    'createdAt',
    'updatedAt',
]
ChildrenScalarFieldKeysT = TypeVar('ChildrenScalarFieldKeysT', bound=ChildrenScalarFieldKeys)

ChildrenRelationalFieldKeys = Literal[
        'parents',
        'events',
    ]

# Activities types

class ActivitiesOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Activities create method"""
    id: _str
    events: 'EventsCreateManyNestedWithoutRelationsInput'


class ActivitiesCreateInput(ActivitiesOptionalCreateInput):
    """Required arguments to the Activities create method"""
    name: _str
    description: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ActivitiesOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Activities create method, without relations"""
    id: _str


class ActivitiesCreateWithoutRelationsInput(ActivitiesOptionalCreateWithoutRelationsInput):
    """Required arguments to the Activities create method, without relations"""
    name: _str
    description: _str

class ActivitiesConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ActivitiesCreateWithoutRelationsInput'
    where: 'ActivitiesWhereUniqueInput'

class ActivitiesCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ActivitiesCreateWithoutRelationsInput'
    connect: 'ActivitiesWhereUniqueInput'
    connect_or_create: 'ActivitiesConnectOrCreateWithoutRelationsInput'


class ActivitiesCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ActivitiesCreateWithoutRelationsInput', List['ActivitiesCreateWithoutRelationsInput']]
    connect: Union['ActivitiesWhereUniqueInput', List['ActivitiesWhereUniqueInput']]
    connect_or_create: Union['ActivitiesConnectOrCreateWithoutRelationsInput', List['ActivitiesConnectOrCreateWithoutRelationsInput']]

_ActivitiesWhereUnique_id_Input = TypedDict(
    '_ActivitiesWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_ActivitiesWhereUnique_name_Input = TypedDict(
    '_ActivitiesWhereUnique_name_Input',
    {
        'name': '_str',
    },
    total=True
)

ActivitiesWhereUniqueInput = Union[
    '_ActivitiesWhereUnique_id_Input',
    '_ActivitiesWhereUnique_name_Input',
]


class ActivitiesUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    description: _str
    events: 'EventsUpdateManyWithoutRelationsInput'


class ActivitiesUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    description: _str


class ActivitiesUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ActivitiesCreateWithoutRelationsInput']
    connect: List['ActivitiesWhereUniqueInput']
    connect_or_create: List['ActivitiesConnectOrCreateWithoutRelationsInput']
    set: List['ActivitiesWhereUniqueInput']
    disconnect: List['ActivitiesWhereUniqueInput']
    delete: List['ActivitiesWhereUniqueInput']

    # TODO
    # update: List['ActivitiesUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ActivitiesUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ActivitiesScalarWhereInput']
    # upsert: List['ActivitiesUpserteWithWhereUniqueWithoutRelationsInput']


class ActivitiesUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ActivitiesCreateWithoutRelationsInput'
    connect: 'ActivitiesWhereUniqueInput'
    connect_or_create: 'ActivitiesConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ActivitiesUpdateInput'
    # upsert: 'ActivitiesUpsertWithoutRelationsInput'


class ActivitiesUpsertInput(TypedDict):
    create: 'ActivitiesCreateInput'
    update: 'ActivitiesUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Activities_id_OrderByInput = TypedDict(
    '_Activities_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Activities_name_OrderByInput = TypedDict(
    '_Activities_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Activities_description_OrderByInput = TypedDict(
    '_Activities_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

ActivitiesOrderByInput = Union[
    '_Activities_id_OrderByInput',
    '_Activities_name_OrderByInput',
    '_Activities_description_OrderByInput',
]



# recursive Activities types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ActivitiesRelationFilter = TypedDict(
    'ActivitiesRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ActivitiesListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ActivitiesInclude(TypedDict, total=False):
    """Activities relational arguments"""
    events: Union[bool, 'FindManyEventsArgsFromActivities']


    

class UsersIncludeFromActivities(TypedDict, total=False):
    """Relational arguments for Activities"""
    children: Union[bool, 'FindManyChildrenArgsFromActivitiesRecursive1']
    events: Union[bool, 'FindManyEventsArgsFromActivitiesRecursive1']
    notifications: Union[bool, 'FindManyNotificationsArgsFromActivitiesRecursive1']
    reviews: Union[bool, 'FindManyReviewsArgsFromActivitiesRecursive1']


class UsersIncludeFromActivitiesRecursive1(TypedDict, total=False):
    """Relational arguments for Activities"""
    children: Union[bool, 'FindManyChildrenArgsFromActivitiesRecursive2']
    events: Union[bool, 'FindManyEventsArgsFromActivitiesRecursive2']
    notifications: Union[bool, 'FindManyNotificationsArgsFromActivitiesRecursive2']
    reviews: Union[bool, 'FindManyReviewsArgsFromActivitiesRecursive2']


class UsersIncludeFromActivitiesRecursive2(TypedDict, total=False):
    """Relational arguments for Activities"""
    children: Union[bool, 'FindManyChildrenArgsFromActivitiesRecursive3']
    events: Union[bool, 'FindManyEventsArgsFromActivitiesRecursive3']
    notifications: Union[bool, 'FindManyNotificationsArgsFromActivitiesRecursive3']
    reviews: Union[bool, 'FindManyReviewsArgsFromActivitiesRecursive3']


class UsersIncludeFromActivitiesRecursive3(TypedDict, total=False):
    """Relational arguments for Activities"""
    children: Union[bool, 'FindManyChildrenArgsFromActivitiesRecursive4']
    events: Union[bool, 'FindManyEventsArgsFromActivitiesRecursive4']
    notifications: Union[bool, 'FindManyNotificationsArgsFromActivitiesRecursive4']
    reviews: Union[bool, 'FindManyReviewsArgsFromActivitiesRecursive4']


class UsersIncludeFromActivitiesRecursive4(TypedDict, total=False):
    """Relational arguments for Activities"""

    

class UsersArgsFromActivities(TypedDict, total=False):
    """Arguments for Activities"""
    include: 'UsersIncludeFromUsersRecursive1'


class UsersArgsFromActivitiesRecursive1(TypedDict, total=False):
    """Arguments for Activities"""
    include: 'UsersIncludeFromUsersRecursive2'


class UsersArgsFromActivitiesRecursive2(TypedDict, total=False):
    """Arguments for Activities"""
    include: 'UsersIncludeFromUsersRecursive3'


class UsersArgsFromActivitiesRecursive3(TypedDict, total=False):
    """Arguments for Activities"""
    include: 'UsersIncludeFromUsersRecursive4'


class UsersArgsFromActivitiesRecursive4(TypedDict, total=False):
    """Arguments for Activities"""
    
    

class FindManyUsersArgsFromActivities(TypedDict, total=False):
    """Arguments for Activities"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive1'


class FindManyUsersArgsFromActivitiesRecursive1(TypedDict, total=False):
    """Arguments for Activities"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive2'


class FindManyUsersArgsFromActivitiesRecursive2(TypedDict, total=False):
    """Arguments for Activities"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive3'


class FindManyUsersArgsFromActivitiesRecursive3(TypedDict, total=False):
    """Arguments for Activities"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive4'


class FindManyUsersArgsFromActivitiesRecursive4(TypedDict, total=False):
    """Arguments for Activities"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    
    

class NotificationsIncludeFromActivities(TypedDict, total=False):
    """Relational arguments for Activities"""
    user: Union[bool, 'UsersArgsFromActivitiesRecursive1']


class NotificationsIncludeFromActivitiesRecursive1(TypedDict, total=False):
    """Relational arguments for Activities"""
    user: Union[bool, 'UsersArgsFromActivitiesRecursive2']


class NotificationsIncludeFromActivitiesRecursive2(TypedDict, total=False):
    """Relational arguments for Activities"""
    user: Union[bool, 'UsersArgsFromActivitiesRecursive3']


class NotificationsIncludeFromActivitiesRecursive3(TypedDict, total=False):
    """Relational arguments for Activities"""
    user: Union[bool, 'UsersArgsFromActivitiesRecursive4']


class NotificationsIncludeFromActivitiesRecursive4(TypedDict, total=False):
    """Relational arguments for Activities"""

    

class NotificationsArgsFromActivities(TypedDict, total=False):
    """Arguments for Activities"""
    include: 'NotificationsIncludeFromNotificationsRecursive1'


class NotificationsArgsFromActivitiesRecursive1(TypedDict, total=False):
    """Arguments for Activities"""
    include: 'NotificationsIncludeFromNotificationsRecursive2'


class NotificationsArgsFromActivitiesRecursive2(TypedDict, total=False):
    """Arguments for Activities"""
    include: 'NotificationsIncludeFromNotificationsRecursive3'


class NotificationsArgsFromActivitiesRecursive3(TypedDict, total=False):
    """Arguments for Activities"""
    include: 'NotificationsIncludeFromNotificationsRecursive4'


class NotificationsArgsFromActivitiesRecursive4(TypedDict, total=False):
    """Arguments for Activities"""
    
    

class FindManyNotificationsArgsFromActivities(TypedDict, total=False):
    """Arguments for Activities"""
    take: int
    skip: int
    order_by: Union['NotificationsOrderByInput', List['NotificationsOrderByInput']]
    where: 'NotificationsWhereInput'
    cursor: 'NotificationsWhereUniqueInput'
    distinct: List['NotificationsScalarFieldKeys']
    include: 'NotificationsIncludeFromNotificationsRecursive1'


class FindManyNotificationsArgsFromActivitiesRecursive1(TypedDict, total=False):
    """Arguments for Activities"""
    take: int
    skip: int
    order_by: Union['NotificationsOrderByInput', List['NotificationsOrderByInput']]
    where: 'NotificationsWhereInput'
    cursor: 'NotificationsWhereUniqueInput'
    distinct: List['NotificationsScalarFieldKeys']
    include: 'NotificationsIncludeFromNotificationsRecursive2'


class FindManyNotificationsArgsFromActivitiesRecursive2(TypedDict, total=False):
    """Arguments for Activities"""
    take: int
    skip: int
    order_by: Union['NotificationsOrderByInput', List['NotificationsOrderByInput']]
    where: 'NotificationsWhereInput'
    cursor: 'NotificationsWhereUniqueInput'
    distinct: List['NotificationsScalarFieldKeys']
    include: 'NotificationsIncludeFromNotificationsRecursive3'


class FindManyNotificationsArgsFromActivitiesRecursive3(TypedDict, total=False):
    """Arguments for Activities"""
    take: int
    skip: int
    order_by: Union['NotificationsOrderByInput', List['NotificationsOrderByInput']]
    where: 'NotificationsWhereInput'
    cursor: 'NotificationsWhereUniqueInput'
    distinct: List['NotificationsScalarFieldKeys']
    include: 'NotificationsIncludeFromNotificationsRecursive4'


class FindManyNotificationsArgsFromActivitiesRecursive4(TypedDict, total=False):
    """Arguments for Activities"""
    take: int
    skip: int
    order_by: Union['NotificationsOrderByInput', List['NotificationsOrderByInput']]
    where: 'NotificationsWhereInput'
    cursor: 'NotificationsWhereUniqueInput'
    distinct: List['NotificationsScalarFieldKeys']
    
    

class ChildrenIncludeFromActivities(TypedDict, total=False):
    """Relational arguments for Activities"""
    parents: Union[bool, 'FindManyUsersArgsFromActivitiesRecursive1']
    events: Union[bool, 'FindManyEventsArgsFromActivitiesRecursive1']


class ChildrenIncludeFromActivitiesRecursive1(TypedDict, total=False):
    """Relational arguments for Activities"""
    parents: Union[bool, 'FindManyUsersArgsFromActivitiesRecursive2']
    events: Union[bool, 'FindManyEventsArgsFromActivitiesRecursive2']


class ChildrenIncludeFromActivitiesRecursive2(TypedDict, total=False):
    """Relational arguments for Activities"""
    parents: Union[bool, 'FindManyUsersArgsFromActivitiesRecursive3']
    events: Union[bool, 'FindManyEventsArgsFromActivitiesRecursive3']


class ChildrenIncludeFromActivitiesRecursive3(TypedDict, total=False):
    """Relational arguments for Activities"""
    parents: Union[bool, 'FindManyUsersArgsFromActivitiesRecursive4']
    events: Union[bool, 'FindManyEventsArgsFromActivitiesRecursive4']


class ChildrenIncludeFromActivitiesRecursive4(TypedDict, total=False):
    """Relational arguments for Activities"""

    

class ChildrenArgsFromActivities(TypedDict, total=False):
    """Arguments for Activities"""
    include: 'ChildrenIncludeFromChildrenRecursive1'


class ChildrenArgsFromActivitiesRecursive1(TypedDict, total=False):
    """Arguments for Activities"""
    include: 'ChildrenIncludeFromChildrenRecursive2'


class ChildrenArgsFromActivitiesRecursive2(TypedDict, total=False):
    """Arguments for Activities"""
    include: 'ChildrenIncludeFromChildrenRecursive3'


class ChildrenArgsFromActivitiesRecursive3(TypedDict, total=False):
    """Arguments for Activities"""
    include: 'ChildrenIncludeFromChildrenRecursive4'


class ChildrenArgsFromActivitiesRecursive4(TypedDict, total=False):
    """Arguments for Activities"""
    
    

class FindManyChildrenArgsFromActivities(TypedDict, total=False):
    """Arguments for Activities"""
    take: int
    skip: int
    order_by: Union['ChildrenOrderByInput', List['ChildrenOrderByInput']]
    where: 'ChildrenWhereInput'
    cursor: 'ChildrenWhereUniqueInput'
    distinct: List['ChildrenScalarFieldKeys']
    include: 'ChildrenIncludeFromChildrenRecursive1'


class FindManyChildrenArgsFromActivitiesRecursive1(TypedDict, total=False):
    """Arguments for Activities"""
    take: int
    skip: int
    order_by: Union['ChildrenOrderByInput', List['ChildrenOrderByInput']]
    where: 'ChildrenWhereInput'
    cursor: 'ChildrenWhereUniqueInput'
    distinct: List['ChildrenScalarFieldKeys']
    include: 'ChildrenIncludeFromChildrenRecursive2'


class FindManyChildrenArgsFromActivitiesRecursive2(TypedDict, total=False):
    """Arguments for Activities"""
    take: int
    skip: int
    order_by: Union['ChildrenOrderByInput', List['ChildrenOrderByInput']]
    where: 'ChildrenWhereInput'
    cursor: 'ChildrenWhereUniqueInput'
    distinct: List['ChildrenScalarFieldKeys']
    include: 'ChildrenIncludeFromChildrenRecursive3'


class FindManyChildrenArgsFromActivitiesRecursive3(TypedDict, total=False):
    """Arguments for Activities"""
    take: int
    skip: int
    order_by: Union['ChildrenOrderByInput', List['ChildrenOrderByInput']]
    where: 'ChildrenWhereInput'
    cursor: 'ChildrenWhereUniqueInput'
    distinct: List['ChildrenScalarFieldKeys']
    include: 'ChildrenIncludeFromChildrenRecursive4'


class FindManyChildrenArgsFromActivitiesRecursive4(TypedDict, total=False):
    """Arguments for Activities"""
    take: int
    skip: int
    order_by: Union['ChildrenOrderByInput', List['ChildrenOrderByInput']]
    where: 'ChildrenWhereInput'
    cursor: 'ChildrenWhereUniqueInput'
    distinct: List['ChildrenScalarFieldKeys']
    
    

class ActivitiesIncludeFromActivities(TypedDict, total=False):
    """Relational arguments for Activities"""
    events: Union[bool, 'FindManyEventsArgsFromActivitiesRecursive1']


class ActivitiesIncludeFromActivitiesRecursive1(TypedDict, total=False):
    """Relational arguments for Activities"""
    events: Union[bool, 'FindManyEventsArgsFromActivitiesRecursive2']


class ActivitiesIncludeFromActivitiesRecursive2(TypedDict, total=False):
    """Relational arguments for Activities"""
    events: Union[bool, 'FindManyEventsArgsFromActivitiesRecursive3']


class ActivitiesIncludeFromActivitiesRecursive3(TypedDict, total=False):
    """Relational arguments for Activities"""
    events: Union[bool, 'FindManyEventsArgsFromActivitiesRecursive4']


class ActivitiesIncludeFromActivitiesRecursive4(TypedDict, total=False):
    """Relational arguments for Activities"""

    

class ActivitiesArgsFromActivities(TypedDict, total=False):
    """Arguments for Activities"""
    include: 'ActivitiesIncludeFromActivitiesRecursive1'


class ActivitiesArgsFromActivitiesRecursive1(TypedDict, total=False):
    """Arguments for Activities"""
    include: 'ActivitiesIncludeFromActivitiesRecursive2'


class ActivitiesArgsFromActivitiesRecursive2(TypedDict, total=False):
    """Arguments for Activities"""
    include: 'ActivitiesIncludeFromActivitiesRecursive3'


class ActivitiesArgsFromActivitiesRecursive3(TypedDict, total=False):
    """Arguments for Activities"""
    include: 'ActivitiesIncludeFromActivitiesRecursive4'


class ActivitiesArgsFromActivitiesRecursive4(TypedDict, total=False):
    """Arguments for Activities"""
    
    

class FindManyActivitiesArgsFromActivities(TypedDict, total=False):
    """Arguments for Activities"""
    take: int
    skip: int
    order_by: Union['ActivitiesOrderByInput', List['ActivitiesOrderByInput']]
    where: 'ActivitiesWhereInput'
    cursor: 'ActivitiesWhereUniqueInput'
    distinct: List['ActivitiesScalarFieldKeys']
    include: 'ActivitiesIncludeFromActivitiesRecursive1'


class FindManyActivitiesArgsFromActivitiesRecursive1(TypedDict, total=False):
    """Arguments for Activities"""
    take: int
    skip: int
    order_by: Union['ActivitiesOrderByInput', List['ActivitiesOrderByInput']]
    where: 'ActivitiesWhereInput'
    cursor: 'ActivitiesWhereUniqueInput'
    distinct: List['ActivitiesScalarFieldKeys']
    include: 'ActivitiesIncludeFromActivitiesRecursive2'


class FindManyActivitiesArgsFromActivitiesRecursive2(TypedDict, total=False):
    """Arguments for Activities"""
    take: int
    skip: int
    order_by: Union['ActivitiesOrderByInput', List['ActivitiesOrderByInput']]
    where: 'ActivitiesWhereInput'
    cursor: 'ActivitiesWhereUniqueInput'
    distinct: List['ActivitiesScalarFieldKeys']
    include: 'ActivitiesIncludeFromActivitiesRecursive3'


class FindManyActivitiesArgsFromActivitiesRecursive3(TypedDict, total=False):
    """Arguments for Activities"""
    take: int
    skip: int
    order_by: Union['ActivitiesOrderByInput', List['ActivitiesOrderByInput']]
    where: 'ActivitiesWhereInput'
    cursor: 'ActivitiesWhereUniqueInput'
    distinct: List['ActivitiesScalarFieldKeys']
    include: 'ActivitiesIncludeFromActivitiesRecursive4'


class FindManyActivitiesArgsFromActivitiesRecursive4(TypedDict, total=False):
    """Arguments for Activities"""
    take: int
    skip: int
    order_by: Union['ActivitiesOrderByInput', List['ActivitiesOrderByInput']]
    where: 'ActivitiesWhereInput'
    cursor: 'ActivitiesWhereUniqueInput'
    distinct: List['ActivitiesScalarFieldKeys']
    
    

class EventsIncludeFromActivities(TypedDict, total=False):
    """Relational arguments for Activities"""
    children: Union[bool, 'FindManyChildrenArgsFromActivitiesRecursive1']
    users: Union[bool, 'FindManyUsersArgsFromActivitiesRecursive1']
    activity: Union[bool, 'ActivitiesArgsFromActivitiesRecursive1']
    reviews: Union[bool, 'FindManyReviewsArgsFromActivitiesRecursive1']


class EventsIncludeFromActivitiesRecursive1(TypedDict, total=False):
    """Relational arguments for Activities"""
    children: Union[bool, 'FindManyChildrenArgsFromActivitiesRecursive2']
    users: Union[bool, 'FindManyUsersArgsFromActivitiesRecursive2']
    activity: Union[bool, 'ActivitiesArgsFromActivitiesRecursive2']
    reviews: Union[bool, 'FindManyReviewsArgsFromActivitiesRecursive2']


class EventsIncludeFromActivitiesRecursive2(TypedDict, total=False):
    """Relational arguments for Activities"""
    children: Union[bool, 'FindManyChildrenArgsFromActivitiesRecursive3']
    users: Union[bool, 'FindManyUsersArgsFromActivitiesRecursive3']
    activity: Union[bool, 'ActivitiesArgsFromActivitiesRecursive3']
    reviews: Union[bool, 'FindManyReviewsArgsFromActivitiesRecursive3']


class EventsIncludeFromActivitiesRecursive3(TypedDict, total=False):
    """Relational arguments for Activities"""
    children: Union[bool, 'FindManyChildrenArgsFromActivitiesRecursive4']
    users: Union[bool, 'FindManyUsersArgsFromActivitiesRecursive4']
    activity: Union[bool, 'ActivitiesArgsFromActivitiesRecursive4']
    reviews: Union[bool, 'FindManyReviewsArgsFromActivitiesRecursive4']


class EventsIncludeFromActivitiesRecursive4(TypedDict, total=False):
    """Relational arguments for Activities"""

    

class EventsArgsFromActivities(TypedDict, total=False):
    """Arguments for Activities"""
    include: 'EventsIncludeFromEventsRecursive1'


class EventsArgsFromActivitiesRecursive1(TypedDict, total=False):
    """Arguments for Activities"""
    include: 'EventsIncludeFromEventsRecursive2'


class EventsArgsFromActivitiesRecursive2(TypedDict, total=False):
    """Arguments for Activities"""
    include: 'EventsIncludeFromEventsRecursive3'


class EventsArgsFromActivitiesRecursive3(TypedDict, total=False):
    """Arguments for Activities"""
    include: 'EventsIncludeFromEventsRecursive4'


class EventsArgsFromActivitiesRecursive4(TypedDict, total=False):
    """Arguments for Activities"""
    
    

class FindManyEventsArgsFromActivities(TypedDict, total=False):
    """Arguments for Activities"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive1'


class FindManyEventsArgsFromActivitiesRecursive1(TypedDict, total=False):
    """Arguments for Activities"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive2'


class FindManyEventsArgsFromActivitiesRecursive2(TypedDict, total=False):
    """Arguments for Activities"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive3'


class FindManyEventsArgsFromActivitiesRecursive3(TypedDict, total=False):
    """Arguments for Activities"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive4'


class FindManyEventsArgsFromActivitiesRecursive4(TypedDict, total=False):
    """Arguments for Activities"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    
    

class ReviewsIncludeFromActivities(TypedDict, total=False):
    """Relational arguments for Activities"""
    event: Union[bool, 'EventsArgsFromActivitiesRecursive1']
    parent: Union[bool, 'UsersArgsFromActivitiesRecursive1']


class ReviewsIncludeFromActivitiesRecursive1(TypedDict, total=False):
    """Relational arguments for Activities"""
    event: Union[bool, 'EventsArgsFromActivitiesRecursive2']
    parent: Union[bool, 'UsersArgsFromActivitiesRecursive2']


class ReviewsIncludeFromActivitiesRecursive2(TypedDict, total=False):
    """Relational arguments for Activities"""
    event: Union[bool, 'EventsArgsFromActivitiesRecursive3']
    parent: Union[bool, 'UsersArgsFromActivitiesRecursive3']


class ReviewsIncludeFromActivitiesRecursive3(TypedDict, total=False):
    """Relational arguments for Activities"""
    event: Union[bool, 'EventsArgsFromActivitiesRecursive4']
    parent: Union[bool, 'UsersArgsFromActivitiesRecursive4']


class ReviewsIncludeFromActivitiesRecursive4(TypedDict, total=False):
    """Relational arguments for Activities"""

    

class ReviewsArgsFromActivities(TypedDict, total=False):
    """Arguments for Activities"""
    include: 'ReviewsIncludeFromReviewsRecursive1'


class ReviewsArgsFromActivitiesRecursive1(TypedDict, total=False):
    """Arguments for Activities"""
    include: 'ReviewsIncludeFromReviewsRecursive2'


class ReviewsArgsFromActivitiesRecursive2(TypedDict, total=False):
    """Arguments for Activities"""
    include: 'ReviewsIncludeFromReviewsRecursive3'


class ReviewsArgsFromActivitiesRecursive3(TypedDict, total=False):
    """Arguments for Activities"""
    include: 'ReviewsIncludeFromReviewsRecursive4'


class ReviewsArgsFromActivitiesRecursive4(TypedDict, total=False):
    """Arguments for Activities"""
    
    

class FindManyReviewsArgsFromActivities(TypedDict, total=False):
    """Arguments for Activities"""
    take: int
    skip: int
    order_by: Union['ReviewsOrderByInput', List['ReviewsOrderByInput']]
    where: 'ReviewsWhereInput'
    cursor: 'ReviewsWhereUniqueInput'
    distinct: List['ReviewsScalarFieldKeys']
    include: 'ReviewsIncludeFromReviewsRecursive1'


class FindManyReviewsArgsFromActivitiesRecursive1(TypedDict, total=False):
    """Arguments for Activities"""
    take: int
    skip: int
    order_by: Union['ReviewsOrderByInput', List['ReviewsOrderByInput']]
    where: 'ReviewsWhereInput'
    cursor: 'ReviewsWhereUniqueInput'
    distinct: List['ReviewsScalarFieldKeys']
    include: 'ReviewsIncludeFromReviewsRecursive2'


class FindManyReviewsArgsFromActivitiesRecursive2(TypedDict, total=False):
    """Arguments for Activities"""
    take: int
    skip: int
    order_by: Union['ReviewsOrderByInput', List['ReviewsOrderByInput']]
    where: 'ReviewsWhereInput'
    cursor: 'ReviewsWhereUniqueInput'
    distinct: List['ReviewsScalarFieldKeys']
    include: 'ReviewsIncludeFromReviewsRecursive3'


class FindManyReviewsArgsFromActivitiesRecursive3(TypedDict, total=False):
    """Arguments for Activities"""
    take: int
    skip: int
    order_by: Union['ReviewsOrderByInput', List['ReviewsOrderByInput']]
    where: 'ReviewsWhereInput'
    cursor: 'ReviewsWhereUniqueInput'
    distinct: List['ReviewsScalarFieldKeys']
    include: 'ReviewsIncludeFromReviewsRecursive4'


class FindManyReviewsArgsFromActivitiesRecursive4(TypedDict, total=False):
    """Arguments for Activities"""
    take: int
    skip: int
    order_by: Union['ReviewsOrderByInput', List['ReviewsOrderByInput']]
    where: 'ReviewsWhereInput'
    cursor: 'ReviewsWhereUniqueInput'
    distinct: List['ReviewsScalarFieldKeys']
    


FindManyActivitiesArgs = FindManyActivitiesArgsFromActivities
FindFirstActivitiesArgs = FindManyActivitiesArgsFromActivities


    

class ActivitiesWhereInput(TypedDict, total=False):
    """Activities arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    events: 'EventsListRelationFilter'

    # should be noted that AND and NOT should be Union['ActivitiesWhereInputRecursive1', List['ActivitiesWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ActivitiesWhereInputRecursive1']
    OR: List['ActivitiesWhereInputRecursive1']
    NOT: List['ActivitiesWhereInputRecursive1']


class ActivitiesWhereInputRecursive1(TypedDict, total=False):
    """Activities arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    events: 'EventsListRelationFilter'

    # should be noted that AND and NOT should be Union['ActivitiesWhereInputRecursive2', List['ActivitiesWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ActivitiesWhereInputRecursive2']
    OR: List['ActivitiesWhereInputRecursive2']
    NOT: List['ActivitiesWhereInputRecursive2']


class ActivitiesWhereInputRecursive2(TypedDict, total=False):
    """Activities arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    events: 'EventsListRelationFilter'

    # should be noted that AND and NOT should be Union['ActivitiesWhereInputRecursive3', List['ActivitiesWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ActivitiesWhereInputRecursive3']
    OR: List['ActivitiesWhereInputRecursive3']
    NOT: List['ActivitiesWhereInputRecursive3']


class ActivitiesWhereInputRecursive3(TypedDict, total=False):
    """Activities arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    events: 'EventsListRelationFilter'

    # should be noted that AND and NOT should be Union['ActivitiesWhereInputRecursive4', List['ActivitiesWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ActivitiesWhereInputRecursive4']
    OR: List['ActivitiesWhereInputRecursive4']
    NOT: List['ActivitiesWhereInputRecursive4']


class ActivitiesWhereInputRecursive4(TypedDict, total=False):
    """Activities arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    events: 'EventsListRelationFilter'



# aggregate Activities types


    

class ActivitiesScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Activities arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ActivitiesScalarWhereWithAggregatesInputRecursive1']
    OR: List['ActivitiesScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ActivitiesScalarWhereWithAggregatesInputRecursive1']


class ActivitiesScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Activities arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ActivitiesScalarWhereWithAggregatesInputRecursive2']
    OR: List['ActivitiesScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ActivitiesScalarWhereWithAggregatesInputRecursive2']


class ActivitiesScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Activities arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ActivitiesScalarWhereWithAggregatesInputRecursive3']
    OR: List['ActivitiesScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ActivitiesScalarWhereWithAggregatesInputRecursive3']


class ActivitiesScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Activities arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ActivitiesScalarWhereWithAggregatesInputRecursive4']
    OR: List['ActivitiesScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ActivitiesScalarWhereWithAggregatesInputRecursive4']


class ActivitiesScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Activities arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']



class ActivitiesGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    description: _str
    _sum: 'ActivitiesSumAggregateOutput'
    _avg: 'ActivitiesAvgAggregateOutput'
    _min: 'ActivitiesMinAggregateOutput'
    _max: 'ActivitiesMaxAggregateOutput'
    _count: 'ActivitiesCountAggregateOutput'


class ActivitiesAvgAggregateOutput(TypedDict, total=False):
    """Activities output for aggregating averages"""


class ActivitiesSumAggregateOutput(TypedDict, total=False):
    """Activities output for aggregating sums"""


class ActivitiesScalarAggregateOutput(TypedDict, total=False):
    """Activities output including scalar fields"""
    id: _str
    name: _str
    description: _str


ActivitiesMinAggregateOutput = ActivitiesScalarAggregateOutput
ActivitiesMaxAggregateOutput = ActivitiesScalarAggregateOutput


class ActivitiesMaxAggregateInput(TypedDict, total=False):
    """Activities input for aggregating by max"""
    id: bool
    name: bool
    description: bool


class ActivitiesMinAggregateInput(TypedDict, total=False):
    """Activities input for aggregating by min"""
    id: bool
    name: bool
    description: bool


class ActivitiesNumberAggregateInput(TypedDict, total=False):
    """Activities input for aggregating numbers"""


ActivitiesAvgAggregateInput = ActivitiesNumberAggregateInput
ActivitiesSumAggregateInput = ActivitiesNumberAggregateInput


ActivitiesCountAggregateInput = TypedDict(
    'ActivitiesCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'description': bool,
        '_all': bool,
    },
    total=False,
)

ActivitiesCountAggregateOutput = TypedDict(
    'ActivitiesCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'description': int,
        '_all': int,
    },
    total=False,
)


ActivitiesKeys = Literal[
    'id',
    'name',
    'description',
    'events',
]
ActivitiesScalarFieldKeys = Literal[
    'id',
    'name',
    'description',
]
ActivitiesScalarFieldKeysT = TypeVar('ActivitiesScalarFieldKeysT', bound=ActivitiesScalarFieldKeys)

ActivitiesRelationalFieldKeys = Literal[
        'events',
    ]

# Events types

class EventsOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Events create method"""
    id: _str
    childIDs: List[_str]
    children: 'ChildrenCreateManyNestedWithoutRelationsInput'
    userIDs: List[_str]
    users: 'UsersCreateManyNestedWithoutRelationsInput'
    activity: 'ActivitiesCreateNestedWithoutRelationsInput'
    activityId: _str
    reviews: 'ReviewsCreateManyNestedWithoutRelationsInput'


class EventsCreateInput(EventsOptionalCreateInput):
    """Required arguments to the Events create method"""
    name: _str
    description: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class EventsOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Events create method, without relations"""
    id: _str
    childIDs: List[_str]
    userIDs: List[_str]
    activityId: _str


class EventsCreateWithoutRelationsInput(EventsOptionalCreateWithoutRelationsInput):
    """Required arguments to the Events create method, without relations"""
    name: _str
    description: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime

class EventsConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'EventsCreateWithoutRelationsInput'
    where: 'EventsWhereUniqueInput'

class EventsCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'EventsCreateWithoutRelationsInput'
    connect: 'EventsWhereUniqueInput'
    connect_or_create: 'EventsConnectOrCreateWithoutRelationsInput'


class EventsCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['EventsCreateWithoutRelationsInput', List['EventsCreateWithoutRelationsInput']]
    connect: Union['EventsWhereUniqueInput', List['EventsWhereUniqueInput']]
    connect_or_create: Union['EventsConnectOrCreateWithoutRelationsInput', List['EventsConnectOrCreateWithoutRelationsInput']]

_EventsWhereUnique_id_Input = TypedDict(
    '_EventsWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_EventsWhereUnique_name_Input = TypedDict(
    '_EventsWhereUnique_name_Input',
    {
        'name': '_str',
    },
    total=True
)

EventsWhereUniqueInput = Union[
    '_EventsWhereUnique_id_Input',
    '_EventsWhereUnique_name_Input',
]


class EventsUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    description: _str
    children: 'ChildrenUpdateManyWithoutRelationsInput'
    users: 'UsersUpdateManyWithoutRelationsInput'
    activity: 'ActivitiesUpdateOneWithoutRelationsInput'
    reviews: 'ReviewsUpdateManyWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class EventsUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    description: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class EventsUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['EventsCreateWithoutRelationsInput']
    connect: List['EventsWhereUniqueInput']
    connect_or_create: List['EventsConnectOrCreateWithoutRelationsInput']
    set: List['EventsWhereUniqueInput']
    disconnect: List['EventsWhereUniqueInput']
    delete: List['EventsWhereUniqueInput']

    # TODO
    # update: List['EventsUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['EventsUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['EventsScalarWhereInput']
    # upsert: List['EventsUpserteWithWhereUniqueWithoutRelationsInput']


class EventsUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'EventsCreateWithoutRelationsInput'
    connect: 'EventsWhereUniqueInput'
    connect_or_create: 'EventsConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'EventsUpdateInput'
    # upsert: 'EventsUpsertWithoutRelationsInput'


class EventsUpsertInput(TypedDict):
    create: 'EventsCreateInput'
    update: 'EventsUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Events_id_OrderByInput = TypedDict(
    '_Events_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Events_name_OrderByInput = TypedDict(
    '_Events_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Events_description_OrderByInput = TypedDict(
    '_Events_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Events_childIDs_OrderByInput = TypedDict(
    '_Events_childIDs_OrderByInput',
    {
        'childIDs': 'SortOrder',
    },
    total=True
)

_Events_userIDs_OrderByInput = TypedDict(
    '_Events_userIDs_OrderByInput',
    {
        'userIDs': 'SortOrder',
    },
    total=True
)

_Events_activityId_OrderByInput = TypedDict(
    '_Events_activityId_OrderByInput',
    {
        'activityId': 'SortOrder',
    },
    total=True
)

_Events_createdAt_OrderByInput = TypedDict(
    '_Events_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Events_updatedAt_OrderByInput = TypedDict(
    '_Events_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

EventsOrderByInput = Union[
    '_Events_id_OrderByInput',
    '_Events_name_OrderByInput',
    '_Events_description_OrderByInput',
    '_Events_childIDs_OrderByInput',
    '_Events_userIDs_OrderByInput',
    '_Events_activityId_OrderByInput',
    '_Events_createdAt_OrderByInput',
    '_Events_updatedAt_OrderByInput',
]



# recursive Events types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

EventsRelationFilter = TypedDict(
    'EventsRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class EventsListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class EventsInclude(TypedDict, total=False):
    """Events relational arguments"""
    children: Union[bool, 'FindManyChildrenArgsFromEvents']
    users: Union[bool, 'FindManyUsersArgsFromEvents']
    activity: Union[bool, 'ActivitiesArgsFromEvents']
    reviews: Union[bool, 'FindManyReviewsArgsFromEvents']


    

class UsersIncludeFromEvents(TypedDict, total=False):
    """Relational arguments for Events"""
    children: Union[bool, 'FindManyChildrenArgsFromEventsRecursive1']
    events: Union[bool, 'FindManyEventsArgsFromEventsRecursive1']
    notifications: Union[bool, 'FindManyNotificationsArgsFromEventsRecursive1']
    reviews: Union[bool, 'FindManyReviewsArgsFromEventsRecursive1']


class UsersIncludeFromEventsRecursive1(TypedDict, total=False):
    """Relational arguments for Events"""
    children: Union[bool, 'FindManyChildrenArgsFromEventsRecursive2']
    events: Union[bool, 'FindManyEventsArgsFromEventsRecursive2']
    notifications: Union[bool, 'FindManyNotificationsArgsFromEventsRecursive2']
    reviews: Union[bool, 'FindManyReviewsArgsFromEventsRecursive2']


class UsersIncludeFromEventsRecursive2(TypedDict, total=False):
    """Relational arguments for Events"""
    children: Union[bool, 'FindManyChildrenArgsFromEventsRecursive3']
    events: Union[bool, 'FindManyEventsArgsFromEventsRecursive3']
    notifications: Union[bool, 'FindManyNotificationsArgsFromEventsRecursive3']
    reviews: Union[bool, 'FindManyReviewsArgsFromEventsRecursive3']


class UsersIncludeFromEventsRecursive3(TypedDict, total=False):
    """Relational arguments for Events"""
    children: Union[bool, 'FindManyChildrenArgsFromEventsRecursive4']
    events: Union[bool, 'FindManyEventsArgsFromEventsRecursive4']
    notifications: Union[bool, 'FindManyNotificationsArgsFromEventsRecursive4']
    reviews: Union[bool, 'FindManyReviewsArgsFromEventsRecursive4']


class UsersIncludeFromEventsRecursive4(TypedDict, total=False):
    """Relational arguments for Events"""

    

class UsersArgsFromEvents(TypedDict, total=False):
    """Arguments for Events"""
    include: 'UsersIncludeFromUsersRecursive1'


class UsersArgsFromEventsRecursive1(TypedDict, total=False):
    """Arguments for Events"""
    include: 'UsersIncludeFromUsersRecursive2'


class UsersArgsFromEventsRecursive2(TypedDict, total=False):
    """Arguments for Events"""
    include: 'UsersIncludeFromUsersRecursive3'


class UsersArgsFromEventsRecursive3(TypedDict, total=False):
    """Arguments for Events"""
    include: 'UsersIncludeFromUsersRecursive4'


class UsersArgsFromEventsRecursive4(TypedDict, total=False):
    """Arguments for Events"""
    
    

class FindManyUsersArgsFromEvents(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive1'


class FindManyUsersArgsFromEventsRecursive1(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive2'


class FindManyUsersArgsFromEventsRecursive2(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive3'


class FindManyUsersArgsFromEventsRecursive3(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive4'


class FindManyUsersArgsFromEventsRecursive4(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    
    

class NotificationsIncludeFromEvents(TypedDict, total=False):
    """Relational arguments for Events"""
    user: Union[bool, 'UsersArgsFromEventsRecursive1']


class NotificationsIncludeFromEventsRecursive1(TypedDict, total=False):
    """Relational arguments for Events"""
    user: Union[bool, 'UsersArgsFromEventsRecursive2']


class NotificationsIncludeFromEventsRecursive2(TypedDict, total=False):
    """Relational arguments for Events"""
    user: Union[bool, 'UsersArgsFromEventsRecursive3']


class NotificationsIncludeFromEventsRecursive3(TypedDict, total=False):
    """Relational arguments for Events"""
    user: Union[bool, 'UsersArgsFromEventsRecursive4']


class NotificationsIncludeFromEventsRecursive4(TypedDict, total=False):
    """Relational arguments for Events"""

    

class NotificationsArgsFromEvents(TypedDict, total=False):
    """Arguments for Events"""
    include: 'NotificationsIncludeFromNotificationsRecursive1'


class NotificationsArgsFromEventsRecursive1(TypedDict, total=False):
    """Arguments for Events"""
    include: 'NotificationsIncludeFromNotificationsRecursive2'


class NotificationsArgsFromEventsRecursive2(TypedDict, total=False):
    """Arguments for Events"""
    include: 'NotificationsIncludeFromNotificationsRecursive3'


class NotificationsArgsFromEventsRecursive3(TypedDict, total=False):
    """Arguments for Events"""
    include: 'NotificationsIncludeFromNotificationsRecursive4'


class NotificationsArgsFromEventsRecursive4(TypedDict, total=False):
    """Arguments for Events"""
    
    

class FindManyNotificationsArgsFromEvents(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['NotificationsOrderByInput', List['NotificationsOrderByInput']]
    where: 'NotificationsWhereInput'
    cursor: 'NotificationsWhereUniqueInput'
    distinct: List['NotificationsScalarFieldKeys']
    include: 'NotificationsIncludeFromNotificationsRecursive1'


class FindManyNotificationsArgsFromEventsRecursive1(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['NotificationsOrderByInput', List['NotificationsOrderByInput']]
    where: 'NotificationsWhereInput'
    cursor: 'NotificationsWhereUniqueInput'
    distinct: List['NotificationsScalarFieldKeys']
    include: 'NotificationsIncludeFromNotificationsRecursive2'


class FindManyNotificationsArgsFromEventsRecursive2(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['NotificationsOrderByInput', List['NotificationsOrderByInput']]
    where: 'NotificationsWhereInput'
    cursor: 'NotificationsWhereUniqueInput'
    distinct: List['NotificationsScalarFieldKeys']
    include: 'NotificationsIncludeFromNotificationsRecursive3'


class FindManyNotificationsArgsFromEventsRecursive3(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['NotificationsOrderByInput', List['NotificationsOrderByInput']]
    where: 'NotificationsWhereInput'
    cursor: 'NotificationsWhereUniqueInput'
    distinct: List['NotificationsScalarFieldKeys']
    include: 'NotificationsIncludeFromNotificationsRecursive4'


class FindManyNotificationsArgsFromEventsRecursive4(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['NotificationsOrderByInput', List['NotificationsOrderByInput']]
    where: 'NotificationsWhereInput'
    cursor: 'NotificationsWhereUniqueInput'
    distinct: List['NotificationsScalarFieldKeys']
    
    

class ChildrenIncludeFromEvents(TypedDict, total=False):
    """Relational arguments for Events"""
    parents: Union[bool, 'FindManyUsersArgsFromEventsRecursive1']
    events: Union[bool, 'FindManyEventsArgsFromEventsRecursive1']


class ChildrenIncludeFromEventsRecursive1(TypedDict, total=False):
    """Relational arguments for Events"""
    parents: Union[bool, 'FindManyUsersArgsFromEventsRecursive2']
    events: Union[bool, 'FindManyEventsArgsFromEventsRecursive2']


class ChildrenIncludeFromEventsRecursive2(TypedDict, total=False):
    """Relational arguments for Events"""
    parents: Union[bool, 'FindManyUsersArgsFromEventsRecursive3']
    events: Union[bool, 'FindManyEventsArgsFromEventsRecursive3']


class ChildrenIncludeFromEventsRecursive3(TypedDict, total=False):
    """Relational arguments for Events"""
    parents: Union[bool, 'FindManyUsersArgsFromEventsRecursive4']
    events: Union[bool, 'FindManyEventsArgsFromEventsRecursive4']


class ChildrenIncludeFromEventsRecursive4(TypedDict, total=False):
    """Relational arguments for Events"""

    

class ChildrenArgsFromEvents(TypedDict, total=False):
    """Arguments for Events"""
    include: 'ChildrenIncludeFromChildrenRecursive1'


class ChildrenArgsFromEventsRecursive1(TypedDict, total=False):
    """Arguments for Events"""
    include: 'ChildrenIncludeFromChildrenRecursive2'


class ChildrenArgsFromEventsRecursive2(TypedDict, total=False):
    """Arguments for Events"""
    include: 'ChildrenIncludeFromChildrenRecursive3'


class ChildrenArgsFromEventsRecursive3(TypedDict, total=False):
    """Arguments for Events"""
    include: 'ChildrenIncludeFromChildrenRecursive4'


class ChildrenArgsFromEventsRecursive4(TypedDict, total=False):
    """Arguments for Events"""
    
    

class FindManyChildrenArgsFromEvents(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['ChildrenOrderByInput', List['ChildrenOrderByInput']]
    where: 'ChildrenWhereInput'
    cursor: 'ChildrenWhereUniqueInput'
    distinct: List['ChildrenScalarFieldKeys']
    include: 'ChildrenIncludeFromChildrenRecursive1'


class FindManyChildrenArgsFromEventsRecursive1(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['ChildrenOrderByInput', List['ChildrenOrderByInput']]
    where: 'ChildrenWhereInput'
    cursor: 'ChildrenWhereUniqueInput'
    distinct: List['ChildrenScalarFieldKeys']
    include: 'ChildrenIncludeFromChildrenRecursive2'


class FindManyChildrenArgsFromEventsRecursive2(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['ChildrenOrderByInput', List['ChildrenOrderByInput']]
    where: 'ChildrenWhereInput'
    cursor: 'ChildrenWhereUniqueInput'
    distinct: List['ChildrenScalarFieldKeys']
    include: 'ChildrenIncludeFromChildrenRecursive3'


class FindManyChildrenArgsFromEventsRecursive3(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['ChildrenOrderByInput', List['ChildrenOrderByInput']]
    where: 'ChildrenWhereInput'
    cursor: 'ChildrenWhereUniqueInput'
    distinct: List['ChildrenScalarFieldKeys']
    include: 'ChildrenIncludeFromChildrenRecursive4'


class FindManyChildrenArgsFromEventsRecursive4(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['ChildrenOrderByInput', List['ChildrenOrderByInput']]
    where: 'ChildrenWhereInput'
    cursor: 'ChildrenWhereUniqueInput'
    distinct: List['ChildrenScalarFieldKeys']
    
    

class ActivitiesIncludeFromEvents(TypedDict, total=False):
    """Relational arguments for Events"""
    events: Union[bool, 'FindManyEventsArgsFromEventsRecursive1']


class ActivitiesIncludeFromEventsRecursive1(TypedDict, total=False):
    """Relational arguments for Events"""
    events: Union[bool, 'FindManyEventsArgsFromEventsRecursive2']


class ActivitiesIncludeFromEventsRecursive2(TypedDict, total=False):
    """Relational arguments for Events"""
    events: Union[bool, 'FindManyEventsArgsFromEventsRecursive3']


class ActivitiesIncludeFromEventsRecursive3(TypedDict, total=False):
    """Relational arguments for Events"""
    events: Union[bool, 'FindManyEventsArgsFromEventsRecursive4']


class ActivitiesIncludeFromEventsRecursive4(TypedDict, total=False):
    """Relational arguments for Events"""

    

class ActivitiesArgsFromEvents(TypedDict, total=False):
    """Arguments for Events"""
    include: 'ActivitiesIncludeFromActivitiesRecursive1'


class ActivitiesArgsFromEventsRecursive1(TypedDict, total=False):
    """Arguments for Events"""
    include: 'ActivitiesIncludeFromActivitiesRecursive2'


class ActivitiesArgsFromEventsRecursive2(TypedDict, total=False):
    """Arguments for Events"""
    include: 'ActivitiesIncludeFromActivitiesRecursive3'


class ActivitiesArgsFromEventsRecursive3(TypedDict, total=False):
    """Arguments for Events"""
    include: 'ActivitiesIncludeFromActivitiesRecursive4'


class ActivitiesArgsFromEventsRecursive4(TypedDict, total=False):
    """Arguments for Events"""
    
    

class FindManyActivitiesArgsFromEvents(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['ActivitiesOrderByInput', List['ActivitiesOrderByInput']]
    where: 'ActivitiesWhereInput'
    cursor: 'ActivitiesWhereUniqueInput'
    distinct: List['ActivitiesScalarFieldKeys']
    include: 'ActivitiesIncludeFromActivitiesRecursive1'


class FindManyActivitiesArgsFromEventsRecursive1(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['ActivitiesOrderByInput', List['ActivitiesOrderByInput']]
    where: 'ActivitiesWhereInput'
    cursor: 'ActivitiesWhereUniqueInput'
    distinct: List['ActivitiesScalarFieldKeys']
    include: 'ActivitiesIncludeFromActivitiesRecursive2'


class FindManyActivitiesArgsFromEventsRecursive2(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['ActivitiesOrderByInput', List['ActivitiesOrderByInput']]
    where: 'ActivitiesWhereInput'
    cursor: 'ActivitiesWhereUniqueInput'
    distinct: List['ActivitiesScalarFieldKeys']
    include: 'ActivitiesIncludeFromActivitiesRecursive3'


class FindManyActivitiesArgsFromEventsRecursive3(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['ActivitiesOrderByInput', List['ActivitiesOrderByInput']]
    where: 'ActivitiesWhereInput'
    cursor: 'ActivitiesWhereUniqueInput'
    distinct: List['ActivitiesScalarFieldKeys']
    include: 'ActivitiesIncludeFromActivitiesRecursive4'


class FindManyActivitiesArgsFromEventsRecursive4(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['ActivitiesOrderByInput', List['ActivitiesOrderByInput']]
    where: 'ActivitiesWhereInput'
    cursor: 'ActivitiesWhereUniqueInput'
    distinct: List['ActivitiesScalarFieldKeys']
    
    

class EventsIncludeFromEvents(TypedDict, total=False):
    """Relational arguments for Events"""
    children: Union[bool, 'FindManyChildrenArgsFromEventsRecursive1']
    users: Union[bool, 'FindManyUsersArgsFromEventsRecursive1']
    activity: Union[bool, 'ActivitiesArgsFromEventsRecursive1']
    reviews: Union[bool, 'FindManyReviewsArgsFromEventsRecursive1']


class EventsIncludeFromEventsRecursive1(TypedDict, total=False):
    """Relational arguments for Events"""
    children: Union[bool, 'FindManyChildrenArgsFromEventsRecursive2']
    users: Union[bool, 'FindManyUsersArgsFromEventsRecursive2']
    activity: Union[bool, 'ActivitiesArgsFromEventsRecursive2']
    reviews: Union[bool, 'FindManyReviewsArgsFromEventsRecursive2']


class EventsIncludeFromEventsRecursive2(TypedDict, total=False):
    """Relational arguments for Events"""
    children: Union[bool, 'FindManyChildrenArgsFromEventsRecursive3']
    users: Union[bool, 'FindManyUsersArgsFromEventsRecursive3']
    activity: Union[bool, 'ActivitiesArgsFromEventsRecursive3']
    reviews: Union[bool, 'FindManyReviewsArgsFromEventsRecursive3']


class EventsIncludeFromEventsRecursive3(TypedDict, total=False):
    """Relational arguments for Events"""
    children: Union[bool, 'FindManyChildrenArgsFromEventsRecursive4']
    users: Union[bool, 'FindManyUsersArgsFromEventsRecursive4']
    activity: Union[bool, 'ActivitiesArgsFromEventsRecursive4']
    reviews: Union[bool, 'FindManyReviewsArgsFromEventsRecursive4']


class EventsIncludeFromEventsRecursive4(TypedDict, total=False):
    """Relational arguments for Events"""

    

class EventsArgsFromEvents(TypedDict, total=False):
    """Arguments for Events"""
    include: 'EventsIncludeFromEventsRecursive1'


class EventsArgsFromEventsRecursive1(TypedDict, total=False):
    """Arguments for Events"""
    include: 'EventsIncludeFromEventsRecursive2'


class EventsArgsFromEventsRecursive2(TypedDict, total=False):
    """Arguments for Events"""
    include: 'EventsIncludeFromEventsRecursive3'


class EventsArgsFromEventsRecursive3(TypedDict, total=False):
    """Arguments for Events"""
    include: 'EventsIncludeFromEventsRecursive4'


class EventsArgsFromEventsRecursive4(TypedDict, total=False):
    """Arguments for Events"""
    
    

class FindManyEventsArgsFromEvents(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive1'


class FindManyEventsArgsFromEventsRecursive1(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive2'


class FindManyEventsArgsFromEventsRecursive2(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive3'


class FindManyEventsArgsFromEventsRecursive3(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive4'


class FindManyEventsArgsFromEventsRecursive4(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    
    

class ReviewsIncludeFromEvents(TypedDict, total=False):
    """Relational arguments for Events"""
    event: Union[bool, 'EventsArgsFromEventsRecursive1']
    parent: Union[bool, 'UsersArgsFromEventsRecursive1']


class ReviewsIncludeFromEventsRecursive1(TypedDict, total=False):
    """Relational arguments for Events"""
    event: Union[bool, 'EventsArgsFromEventsRecursive2']
    parent: Union[bool, 'UsersArgsFromEventsRecursive2']


class ReviewsIncludeFromEventsRecursive2(TypedDict, total=False):
    """Relational arguments for Events"""
    event: Union[bool, 'EventsArgsFromEventsRecursive3']
    parent: Union[bool, 'UsersArgsFromEventsRecursive3']


class ReviewsIncludeFromEventsRecursive3(TypedDict, total=False):
    """Relational arguments for Events"""
    event: Union[bool, 'EventsArgsFromEventsRecursive4']
    parent: Union[bool, 'UsersArgsFromEventsRecursive4']


class ReviewsIncludeFromEventsRecursive4(TypedDict, total=False):
    """Relational arguments for Events"""

    

class ReviewsArgsFromEvents(TypedDict, total=False):
    """Arguments for Events"""
    include: 'ReviewsIncludeFromReviewsRecursive1'


class ReviewsArgsFromEventsRecursive1(TypedDict, total=False):
    """Arguments for Events"""
    include: 'ReviewsIncludeFromReviewsRecursive2'


class ReviewsArgsFromEventsRecursive2(TypedDict, total=False):
    """Arguments for Events"""
    include: 'ReviewsIncludeFromReviewsRecursive3'


class ReviewsArgsFromEventsRecursive3(TypedDict, total=False):
    """Arguments for Events"""
    include: 'ReviewsIncludeFromReviewsRecursive4'


class ReviewsArgsFromEventsRecursive4(TypedDict, total=False):
    """Arguments for Events"""
    
    

class FindManyReviewsArgsFromEvents(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['ReviewsOrderByInput', List['ReviewsOrderByInput']]
    where: 'ReviewsWhereInput'
    cursor: 'ReviewsWhereUniqueInput'
    distinct: List['ReviewsScalarFieldKeys']
    include: 'ReviewsIncludeFromReviewsRecursive1'


class FindManyReviewsArgsFromEventsRecursive1(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['ReviewsOrderByInput', List['ReviewsOrderByInput']]
    where: 'ReviewsWhereInput'
    cursor: 'ReviewsWhereUniqueInput'
    distinct: List['ReviewsScalarFieldKeys']
    include: 'ReviewsIncludeFromReviewsRecursive2'


class FindManyReviewsArgsFromEventsRecursive2(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['ReviewsOrderByInput', List['ReviewsOrderByInput']]
    where: 'ReviewsWhereInput'
    cursor: 'ReviewsWhereUniqueInput'
    distinct: List['ReviewsScalarFieldKeys']
    include: 'ReviewsIncludeFromReviewsRecursive3'


class FindManyReviewsArgsFromEventsRecursive3(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['ReviewsOrderByInput', List['ReviewsOrderByInput']]
    where: 'ReviewsWhereInput'
    cursor: 'ReviewsWhereUniqueInput'
    distinct: List['ReviewsScalarFieldKeys']
    include: 'ReviewsIncludeFromReviewsRecursive4'


class FindManyReviewsArgsFromEventsRecursive4(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['ReviewsOrderByInput', List['ReviewsOrderByInput']]
    where: 'ReviewsWhereInput'
    cursor: 'ReviewsWhereUniqueInput'
    distinct: List['ReviewsScalarFieldKeys']
    


FindManyEventsArgs = FindManyEventsArgsFromEvents
FindFirstEventsArgs = FindManyEventsArgsFromEvents


    

class EventsWhereInput(TypedDict, total=False):
    """Events arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    childIDs: 'types.StringListFilter'
    children: 'ChildrenListRelationFilter'
    userIDs: 'types.StringListFilter'
    users: 'UsersListRelationFilter'
    activity: 'ActivitiesRelationFilter'
    activityId: Union[_str, 'types.StringFilter']
    reviews: 'ReviewsListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['EventsWhereInputRecursive1', List['EventsWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['EventsWhereInputRecursive1']
    OR: List['EventsWhereInputRecursive1']
    NOT: List['EventsWhereInputRecursive1']


class EventsWhereInputRecursive1(TypedDict, total=False):
    """Events arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    childIDs: 'types.StringListFilter'
    children: 'ChildrenListRelationFilter'
    userIDs: 'types.StringListFilter'
    users: 'UsersListRelationFilter'
    activity: 'ActivitiesRelationFilter'
    activityId: Union[_str, 'types.StringFilter']
    reviews: 'ReviewsListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['EventsWhereInputRecursive2', List['EventsWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['EventsWhereInputRecursive2']
    OR: List['EventsWhereInputRecursive2']
    NOT: List['EventsWhereInputRecursive2']


class EventsWhereInputRecursive2(TypedDict, total=False):
    """Events arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    childIDs: 'types.StringListFilter'
    children: 'ChildrenListRelationFilter'
    userIDs: 'types.StringListFilter'
    users: 'UsersListRelationFilter'
    activity: 'ActivitiesRelationFilter'
    activityId: Union[_str, 'types.StringFilter']
    reviews: 'ReviewsListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['EventsWhereInputRecursive3', List['EventsWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['EventsWhereInputRecursive3']
    OR: List['EventsWhereInputRecursive3']
    NOT: List['EventsWhereInputRecursive3']


class EventsWhereInputRecursive3(TypedDict, total=False):
    """Events arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    childIDs: 'types.StringListFilter'
    children: 'ChildrenListRelationFilter'
    userIDs: 'types.StringListFilter'
    users: 'UsersListRelationFilter'
    activity: 'ActivitiesRelationFilter'
    activityId: Union[_str, 'types.StringFilter']
    reviews: 'ReviewsListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['EventsWhereInputRecursive4', List['EventsWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['EventsWhereInputRecursive4']
    OR: List['EventsWhereInputRecursive4']
    NOT: List['EventsWhereInputRecursive4']


class EventsWhereInputRecursive4(TypedDict, total=False):
    """Events arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    childIDs: 'types.StringListFilter'
    children: 'ChildrenListRelationFilter'
    userIDs: 'types.StringListFilter'
    users: 'UsersListRelationFilter'
    activity: 'ActivitiesRelationFilter'
    activityId: Union[_str, 'types.StringFilter']
    reviews: 'ReviewsListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Events types


    

class EventsScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Events arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    childIDs: Union[_str, 'types.StringWithAggregatesFilter']
    userIDs: Union[_str, 'types.StringWithAggregatesFilter']
    activityId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['EventsScalarWhereWithAggregatesInputRecursive1']
    OR: List['EventsScalarWhereWithAggregatesInputRecursive1']
    NOT: List['EventsScalarWhereWithAggregatesInputRecursive1']


class EventsScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Events arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    childIDs: Union[_str, 'types.StringWithAggregatesFilter']
    userIDs: Union[_str, 'types.StringWithAggregatesFilter']
    activityId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['EventsScalarWhereWithAggregatesInputRecursive2']
    OR: List['EventsScalarWhereWithAggregatesInputRecursive2']
    NOT: List['EventsScalarWhereWithAggregatesInputRecursive2']


class EventsScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Events arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    childIDs: Union[_str, 'types.StringWithAggregatesFilter']
    userIDs: Union[_str, 'types.StringWithAggregatesFilter']
    activityId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['EventsScalarWhereWithAggregatesInputRecursive3']
    OR: List['EventsScalarWhereWithAggregatesInputRecursive3']
    NOT: List['EventsScalarWhereWithAggregatesInputRecursive3']


class EventsScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Events arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    childIDs: Union[_str, 'types.StringWithAggregatesFilter']
    userIDs: Union[_str, 'types.StringWithAggregatesFilter']
    activityId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['EventsScalarWhereWithAggregatesInputRecursive4']
    OR: List['EventsScalarWhereWithAggregatesInputRecursive4']
    NOT: List['EventsScalarWhereWithAggregatesInputRecursive4']


class EventsScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Events arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    childIDs: Union[_str, 'types.StringWithAggregatesFilter']
    userIDs: Union[_str, 'types.StringWithAggregatesFilter']
    activityId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class EventsGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    description: _str
    childIDs: List[_str]
    userIDs: List[_str]
    activityId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'EventsSumAggregateOutput'
    _avg: 'EventsAvgAggregateOutput'
    _min: 'EventsMinAggregateOutput'
    _max: 'EventsMaxAggregateOutput'
    _count: 'EventsCountAggregateOutput'


class EventsAvgAggregateOutput(TypedDict, total=False):
    """Events output for aggregating averages"""


class EventsSumAggregateOutput(TypedDict, total=False):
    """Events output for aggregating sums"""


class EventsScalarAggregateOutput(TypedDict, total=False):
    """Events output including scalar fields"""
    id: _str
    name: _str
    description: _str
    childIDs: List[_str]
    userIDs: List[_str]
    activityId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


EventsMinAggregateOutput = EventsScalarAggregateOutput
EventsMaxAggregateOutput = EventsScalarAggregateOutput


class EventsMaxAggregateInput(TypedDict, total=False):
    """Events input for aggregating by max"""
    id: bool
    name: bool
    description: bool
    childIDs: bool
    userIDs: bool
    activityId: bool
    createdAt: bool
    updatedAt: bool


class EventsMinAggregateInput(TypedDict, total=False):
    """Events input for aggregating by min"""
    id: bool
    name: bool
    description: bool
    childIDs: bool
    userIDs: bool
    activityId: bool
    createdAt: bool
    updatedAt: bool


class EventsNumberAggregateInput(TypedDict, total=False):
    """Events input for aggregating numbers"""


EventsAvgAggregateInput = EventsNumberAggregateInput
EventsSumAggregateInput = EventsNumberAggregateInput


EventsCountAggregateInput = TypedDict(
    'EventsCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'description': bool,
        'childIDs': bool,
        'userIDs': bool,
        'activityId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

EventsCountAggregateOutput = TypedDict(
    'EventsCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'description': int,
        'childIDs': int,
        'userIDs': int,
        'activityId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


EventsKeys = Literal[
    'id',
    'name',
    'description',
    'childIDs',
    'children',
    'userIDs',
    'users',
    'activity',
    'activityId',
    'reviews',
    'createdAt',
    'updatedAt',
]
EventsScalarFieldKeys = Literal[
    'id',
    'name',
    'description',
    'childIDs',
    'userIDs',
    'activityId',
    'createdAt',
    'updatedAt',
]
EventsScalarFieldKeysT = TypeVar('EventsScalarFieldKeysT', bound=EventsScalarFieldKeys)

EventsRelationalFieldKeys = Literal[
        'children',
        'users',
        'activity',
        'reviews',
    ]

# Reviews types

class ReviewsOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Reviews create method"""
    id: _str
    event: 'EventsCreateNestedWithoutRelationsInput'
    eventId: _str
    parent: 'UsersCreateNestedWithoutRelationsInput'
    parentId: _str


class ReviewsCreateInput(ReviewsOptionalCreateInput):
    """Required arguments to the Reviews create method"""
    rating: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ReviewsOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Reviews create method, without relations"""
    id: _str
    eventId: _str
    parentId: _str


class ReviewsCreateWithoutRelationsInput(ReviewsOptionalCreateWithoutRelationsInput):
    """Required arguments to the Reviews create method, without relations"""
    rating: _int

class ReviewsConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ReviewsCreateWithoutRelationsInput'
    where: 'ReviewsWhereUniqueInput'

class ReviewsCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ReviewsCreateWithoutRelationsInput'
    connect: 'ReviewsWhereUniqueInput'
    connect_or_create: 'ReviewsConnectOrCreateWithoutRelationsInput'


class ReviewsCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ReviewsCreateWithoutRelationsInput', List['ReviewsCreateWithoutRelationsInput']]
    connect: Union['ReviewsWhereUniqueInput', List['ReviewsWhereUniqueInput']]
    connect_or_create: Union['ReviewsConnectOrCreateWithoutRelationsInput', List['ReviewsConnectOrCreateWithoutRelationsInput']]

_ReviewsWhereUnique_id_Input = TypedDict(
    '_ReviewsWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

ReviewsWhereUniqueInput = _ReviewsWhereUnique_id_Input


class ReviewsUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    rating: Union[AtomicIntInput, _int]
    event: 'EventsUpdateOneWithoutRelationsInput'
    parent: 'UsersUpdateOneWithoutRelationsInput'


class ReviewsUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    rating: Union[AtomicIntInput, _int]


class ReviewsUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ReviewsCreateWithoutRelationsInput']
    connect: List['ReviewsWhereUniqueInput']
    connect_or_create: List['ReviewsConnectOrCreateWithoutRelationsInput']
    set: List['ReviewsWhereUniqueInput']
    disconnect: List['ReviewsWhereUniqueInput']
    delete: List['ReviewsWhereUniqueInput']

    # TODO
    # update: List['ReviewsUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ReviewsUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ReviewsScalarWhereInput']
    # upsert: List['ReviewsUpserteWithWhereUniqueWithoutRelationsInput']


class ReviewsUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ReviewsCreateWithoutRelationsInput'
    connect: 'ReviewsWhereUniqueInput'
    connect_or_create: 'ReviewsConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ReviewsUpdateInput'
    # upsert: 'ReviewsUpsertWithoutRelationsInput'


class ReviewsUpsertInput(TypedDict):
    create: 'ReviewsCreateInput'
    update: 'ReviewsUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Reviews_id_OrderByInput = TypedDict(
    '_Reviews_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Reviews_rating_OrderByInput = TypedDict(
    '_Reviews_rating_OrderByInput',
    {
        'rating': 'SortOrder',
    },
    total=True
)

_Reviews_eventId_OrderByInput = TypedDict(
    '_Reviews_eventId_OrderByInput',
    {
        'eventId': 'SortOrder',
    },
    total=True
)

_Reviews_parentId_OrderByInput = TypedDict(
    '_Reviews_parentId_OrderByInput',
    {
        'parentId': 'SortOrder',
    },
    total=True
)

ReviewsOrderByInput = Union[
    '_Reviews_id_OrderByInput',
    '_Reviews_rating_OrderByInput',
    '_Reviews_eventId_OrderByInput',
    '_Reviews_parentId_OrderByInput',
]



# recursive Reviews types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ReviewsRelationFilter = TypedDict(
    'ReviewsRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ReviewsListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ReviewsInclude(TypedDict, total=False):
    """Reviews relational arguments"""
    event: Union[bool, 'EventsArgsFromReviews']
    parent: Union[bool, 'UsersArgsFromReviews']


    

class UsersIncludeFromReviews(TypedDict, total=False):
    """Relational arguments for Reviews"""
    children: Union[bool, 'FindManyChildrenArgsFromReviewsRecursive1']
    events: Union[bool, 'FindManyEventsArgsFromReviewsRecursive1']
    notifications: Union[bool, 'FindManyNotificationsArgsFromReviewsRecursive1']
    reviews: Union[bool, 'FindManyReviewsArgsFromReviewsRecursive1']


class UsersIncludeFromReviewsRecursive1(TypedDict, total=False):
    """Relational arguments for Reviews"""
    children: Union[bool, 'FindManyChildrenArgsFromReviewsRecursive2']
    events: Union[bool, 'FindManyEventsArgsFromReviewsRecursive2']
    notifications: Union[bool, 'FindManyNotificationsArgsFromReviewsRecursive2']
    reviews: Union[bool, 'FindManyReviewsArgsFromReviewsRecursive2']


class UsersIncludeFromReviewsRecursive2(TypedDict, total=False):
    """Relational arguments for Reviews"""
    children: Union[bool, 'FindManyChildrenArgsFromReviewsRecursive3']
    events: Union[bool, 'FindManyEventsArgsFromReviewsRecursive3']
    notifications: Union[bool, 'FindManyNotificationsArgsFromReviewsRecursive3']
    reviews: Union[bool, 'FindManyReviewsArgsFromReviewsRecursive3']


class UsersIncludeFromReviewsRecursive3(TypedDict, total=False):
    """Relational arguments for Reviews"""
    children: Union[bool, 'FindManyChildrenArgsFromReviewsRecursive4']
    events: Union[bool, 'FindManyEventsArgsFromReviewsRecursive4']
    notifications: Union[bool, 'FindManyNotificationsArgsFromReviewsRecursive4']
    reviews: Union[bool, 'FindManyReviewsArgsFromReviewsRecursive4']


class UsersIncludeFromReviewsRecursive4(TypedDict, total=False):
    """Relational arguments for Reviews"""

    

class UsersArgsFromReviews(TypedDict, total=False):
    """Arguments for Reviews"""
    include: 'UsersIncludeFromUsersRecursive1'


class UsersArgsFromReviewsRecursive1(TypedDict, total=False):
    """Arguments for Reviews"""
    include: 'UsersIncludeFromUsersRecursive2'


class UsersArgsFromReviewsRecursive2(TypedDict, total=False):
    """Arguments for Reviews"""
    include: 'UsersIncludeFromUsersRecursive3'


class UsersArgsFromReviewsRecursive3(TypedDict, total=False):
    """Arguments for Reviews"""
    include: 'UsersIncludeFromUsersRecursive4'


class UsersArgsFromReviewsRecursive4(TypedDict, total=False):
    """Arguments for Reviews"""
    
    

class FindManyUsersArgsFromReviews(TypedDict, total=False):
    """Arguments for Reviews"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive1'


class FindManyUsersArgsFromReviewsRecursive1(TypedDict, total=False):
    """Arguments for Reviews"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive2'


class FindManyUsersArgsFromReviewsRecursive2(TypedDict, total=False):
    """Arguments for Reviews"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive3'


class FindManyUsersArgsFromReviewsRecursive3(TypedDict, total=False):
    """Arguments for Reviews"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    include: 'UsersIncludeFromUsersRecursive4'


class FindManyUsersArgsFromReviewsRecursive4(TypedDict, total=False):
    """Arguments for Reviews"""
    take: int
    skip: int
    order_by: Union['UsersOrderByInput', List['UsersOrderByInput']]
    where: 'UsersWhereInput'
    cursor: 'UsersWhereUniqueInput'
    distinct: List['UsersScalarFieldKeys']
    
    

class NotificationsIncludeFromReviews(TypedDict, total=False):
    """Relational arguments for Reviews"""
    user: Union[bool, 'UsersArgsFromReviewsRecursive1']


class NotificationsIncludeFromReviewsRecursive1(TypedDict, total=False):
    """Relational arguments for Reviews"""
    user: Union[bool, 'UsersArgsFromReviewsRecursive2']


class NotificationsIncludeFromReviewsRecursive2(TypedDict, total=False):
    """Relational arguments for Reviews"""
    user: Union[bool, 'UsersArgsFromReviewsRecursive3']


class NotificationsIncludeFromReviewsRecursive3(TypedDict, total=False):
    """Relational arguments for Reviews"""
    user: Union[bool, 'UsersArgsFromReviewsRecursive4']


class NotificationsIncludeFromReviewsRecursive4(TypedDict, total=False):
    """Relational arguments for Reviews"""

    

class NotificationsArgsFromReviews(TypedDict, total=False):
    """Arguments for Reviews"""
    include: 'NotificationsIncludeFromNotificationsRecursive1'


class NotificationsArgsFromReviewsRecursive1(TypedDict, total=False):
    """Arguments for Reviews"""
    include: 'NotificationsIncludeFromNotificationsRecursive2'


class NotificationsArgsFromReviewsRecursive2(TypedDict, total=False):
    """Arguments for Reviews"""
    include: 'NotificationsIncludeFromNotificationsRecursive3'


class NotificationsArgsFromReviewsRecursive3(TypedDict, total=False):
    """Arguments for Reviews"""
    include: 'NotificationsIncludeFromNotificationsRecursive4'


class NotificationsArgsFromReviewsRecursive4(TypedDict, total=False):
    """Arguments for Reviews"""
    
    

class FindManyNotificationsArgsFromReviews(TypedDict, total=False):
    """Arguments for Reviews"""
    take: int
    skip: int
    order_by: Union['NotificationsOrderByInput', List['NotificationsOrderByInput']]
    where: 'NotificationsWhereInput'
    cursor: 'NotificationsWhereUniqueInput'
    distinct: List['NotificationsScalarFieldKeys']
    include: 'NotificationsIncludeFromNotificationsRecursive1'


class FindManyNotificationsArgsFromReviewsRecursive1(TypedDict, total=False):
    """Arguments for Reviews"""
    take: int
    skip: int
    order_by: Union['NotificationsOrderByInput', List['NotificationsOrderByInput']]
    where: 'NotificationsWhereInput'
    cursor: 'NotificationsWhereUniqueInput'
    distinct: List['NotificationsScalarFieldKeys']
    include: 'NotificationsIncludeFromNotificationsRecursive2'


class FindManyNotificationsArgsFromReviewsRecursive2(TypedDict, total=False):
    """Arguments for Reviews"""
    take: int
    skip: int
    order_by: Union['NotificationsOrderByInput', List['NotificationsOrderByInput']]
    where: 'NotificationsWhereInput'
    cursor: 'NotificationsWhereUniqueInput'
    distinct: List['NotificationsScalarFieldKeys']
    include: 'NotificationsIncludeFromNotificationsRecursive3'


class FindManyNotificationsArgsFromReviewsRecursive3(TypedDict, total=False):
    """Arguments for Reviews"""
    take: int
    skip: int
    order_by: Union['NotificationsOrderByInput', List['NotificationsOrderByInput']]
    where: 'NotificationsWhereInput'
    cursor: 'NotificationsWhereUniqueInput'
    distinct: List['NotificationsScalarFieldKeys']
    include: 'NotificationsIncludeFromNotificationsRecursive4'


class FindManyNotificationsArgsFromReviewsRecursive4(TypedDict, total=False):
    """Arguments for Reviews"""
    take: int
    skip: int
    order_by: Union['NotificationsOrderByInput', List['NotificationsOrderByInput']]
    where: 'NotificationsWhereInput'
    cursor: 'NotificationsWhereUniqueInput'
    distinct: List['NotificationsScalarFieldKeys']
    
    

class ChildrenIncludeFromReviews(TypedDict, total=False):
    """Relational arguments for Reviews"""
    parents: Union[bool, 'FindManyUsersArgsFromReviewsRecursive1']
    events: Union[bool, 'FindManyEventsArgsFromReviewsRecursive1']


class ChildrenIncludeFromReviewsRecursive1(TypedDict, total=False):
    """Relational arguments for Reviews"""
    parents: Union[bool, 'FindManyUsersArgsFromReviewsRecursive2']
    events: Union[bool, 'FindManyEventsArgsFromReviewsRecursive2']


class ChildrenIncludeFromReviewsRecursive2(TypedDict, total=False):
    """Relational arguments for Reviews"""
    parents: Union[bool, 'FindManyUsersArgsFromReviewsRecursive3']
    events: Union[bool, 'FindManyEventsArgsFromReviewsRecursive3']


class ChildrenIncludeFromReviewsRecursive3(TypedDict, total=False):
    """Relational arguments for Reviews"""
    parents: Union[bool, 'FindManyUsersArgsFromReviewsRecursive4']
    events: Union[bool, 'FindManyEventsArgsFromReviewsRecursive4']


class ChildrenIncludeFromReviewsRecursive4(TypedDict, total=False):
    """Relational arguments for Reviews"""

    

class ChildrenArgsFromReviews(TypedDict, total=False):
    """Arguments for Reviews"""
    include: 'ChildrenIncludeFromChildrenRecursive1'


class ChildrenArgsFromReviewsRecursive1(TypedDict, total=False):
    """Arguments for Reviews"""
    include: 'ChildrenIncludeFromChildrenRecursive2'


class ChildrenArgsFromReviewsRecursive2(TypedDict, total=False):
    """Arguments for Reviews"""
    include: 'ChildrenIncludeFromChildrenRecursive3'


class ChildrenArgsFromReviewsRecursive3(TypedDict, total=False):
    """Arguments for Reviews"""
    include: 'ChildrenIncludeFromChildrenRecursive4'


class ChildrenArgsFromReviewsRecursive4(TypedDict, total=False):
    """Arguments for Reviews"""
    
    

class FindManyChildrenArgsFromReviews(TypedDict, total=False):
    """Arguments for Reviews"""
    take: int
    skip: int
    order_by: Union['ChildrenOrderByInput', List['ChildrenOrderByInput']]
    where: 'ChildrenWhereInput'
    cursor: 'ChildrenWhereUniqueInput'
    distinct: List['ChildrenScalarFieldKeys']
    include: 'ChildrenIncludeFromChildrenRecursive1'


class FindManyChildrenArgsFromReviewsRecursive1(TypedDict, total=False):
    """Arguments for Reviews"""
    take: int
    skip: int
    order_by: Union['ChildrenOrderByInput', List['ChildrenOrderByInput']]
    where: 'ChildrenWhereInput'
    cursor: 'ChildrenWhereUniqueInput'
    distinct: List['ChildrenScalarFieldKeys']
    include: 'ChildrenIncludeFromChildrenRecursive2'


class FindManyChildrenArgsFromReviewsRecursive2(TypedDict, total=False):
    """Arguments for Reviews"""
    take: int
    skip: int
    order_by: Union['ChildrenOrderByInput', List['ChildrenOrderByInput']]
    where: 'ChildrenWhereInput'
    cursor: 'ChildrenWhereUniqueInput'
    distinct: List['ChildrenScalarFieldKeys']
    include: 'ChildrenIncludeFromChildrenRecursive3'


class FindManyChildrenArgsFromReviewsRecursive3(TypedDict, total=False):
    """Arguments for Reviews"""
    take: int
    skip: int
    order_by: Union['ChildrenOrderByInput', List['ChildrenOrderByInput']]
    where: 'ChildrenWhereInput'
    cursor: 'ChildrenWhereUniqueInput'
    distinct: List['ChildrenScalarFieldKeys']
    include: 'ChildrenIncludeFromChildrenRecursive4'


class FindManyChildrenArgsFromReviewsRecursive4(TypedDict, total=False):
    """Arguments for Reviews"""
    take: int
    skip: int
    order_by: Union['ChildrenOrderByInput', List['ChildrenOrderByInput']]
    where: 'ChildrenWhereInput'
    cursor: 'ChildrenWhereUniqueInput'
    distinct: List['ChildrenScalarFieldKeys']
    
    

class ActivitiesIncludeFromReviews(TypedDict, total=False):
    """Relational arguments for Reviews"""
    events: Union[bool, 'FindManyEventsArgsFromReviewsRecursive1']


class ActivitiesIncludeFromReviewsRecursive1(TypedDict, total=False):
    """Relational arguments for Reviews"""
    events: Union[bool, 'FindManyEventsArgsFromReviewsRecursive2']


class ActivitiesIncludeFromReviewsRecursive2(TypedDict, total=False):
    """Relational arguments for Reviews"""
    events: Union[bool, 'FindManyEventsArgsFromReviewsRecursive3']


class ActivitiesIncludeFromReviewsRecursive3(TypedDict, total=False):
    """Relational arguments for Reviews"""
    events: Union[bool, 'FindManyEventsArgsFromReviewsRecursive4']


class ActivitiesIncludeFromReviewsRecursive4(TypedDict, total=False):
    """Relational arguments for Reviews"""

    

class ActivitiesArgsFromReviews(TypedDict, total=False):
    """Arguments for Reviews"""
    include: 'ActivitiesIncludeFromActivitiesRecursive1'


class ActivitiesArgsFromReviewsRecursive1(TypedDict, total=False):
    """Arguments for Reviews"""
    include: 'ActivitiesIncludeFromActivitiesRecursive2'


class ActivitiesArgsFromReviewsRecursive2(TypedDict, total=False):
    """Arguments for Reviews"""
    include: 'ActivitiesIncludeFromActivitiesRecursive3'


class ActivitiesArgsFromReviewsRecursive3(TypedDict, total=False):
    """Arguments for Reviews"""
    include: 'ActivitiesIncludeFromActivitiesRecursive4'


class ActivitiesArgsFromReviewsRecursive4(TypedDict, total=False):
    """Arguments for Reviews"""
    
    

class FindManyActivitiesArgsFromReviews(TypedDict, total=False):
    """Arguments for Reviews"""
    take: int
    skip: int
    order_by: Union['ActivitiesOrderByInput', List['ActivitiesOrderByInput']]
    where: 'ActivitiesWhereInput'
    cursor: 'ActivitiesWhereUniqueInput'
    distinct: List['ActivitiesScalarFieldKeys']
    include: 'ActivitiesIncludeFromActivitiesRecursive1'


class FindManyActivitiesArgsFromReviewsRecursive1(TypedDict, total=False):
    """Arguments for Reviews"""
    take: int
    skip: int
    order_by: Union['ActivitiesOrderByInput', List['ActivitiesOrderByInput']]
    where: 'ActivitiesWhereInput'
    cursor: 'ActivitiesWhereUniqueInput'
    distinct: List['ActivitiesScalarFieldKeys']
    include: 'ActivitiesIncludeFromActivitiesRecursive2'


class FindManyActivitiesArgsFromReviewsRecursive2(TypedDict, total=False):
    """Arguments for Reviews"""
    take: int
    skip: int
    order_by: Union['ActivitiesOrderByInput', List['ActivitiesOrderByInput']]
    where: 'ActivitiesWhereInput'
    cursor: 'ActivitiesWhereUniqueInput'
    distinct: List['ActivitiesScalarFieldKeys']
    include: 'ActivitiesIncludeFromActivitiesRecursive3'


class FindManyActivitiesArgsFromReviewsRecursive3(TypedDict, total=False):
    """Arguments for Reviews"""
    take: int
    skip: int
    order_by: Union['ActivitiesOrderByInput', List['ActivitiesOrderByInput']]
    where: 'ActivitiesWhereInput'
    cursor: 'ActivitiesWhereUniqueInput'
    distinct: List['ActivitiesScalarFieldKeys']
    include: 'ActivitiesIncludeFromActivitiesRecursive4'


class FindManyActivitiesArgsFromReviewsRecursive4(TypedDict, total=False):
    """Arguments for Reviews"""
    take: int
    skip: int
    order_by: Union['ActivitiesOrderByInput', List['ActivitiesOrderByInput']]
    where: 'ActivitiesWhereInput'
    cursor: 'ActivitiesWhereUniqueInput'
    distinct: List['ActivitiesScalarFieldKeys']
    
    

class EventsIncludeFromReviews(TypedDict, total=False):
    """Relational arguments for Reviews"""
    children: Union[bool, 'FindManyChildrenArgsFromReviewsRecursive1']
    users: Union[bool, 'FindManyUsersArgsFromReviewsRecursive1']
    activity: Union[bool, 'ActivitiesArgsFromReviewsRecursive1']
    reviews: Union[bool, 'FindManyReviewsArgsFromReviewsRecursive1']


class EventsIncludeFromReviewsRecursive1(TypedDict, total=False):
    """Relational arguments for Reviews"""
    children: Union[bool, 'FindManyChildrenArgsFromReviewsRecursive2']
    users: Union[bool, 'FindManyUsersArgsFromReviewsRecursive2']
    activity: Union[bool, 'ActivitiesArgsFromReviewsRecursive2']
    reviews: Union[bool, 'FindManyReviewsArgsFromReviewsRecursive2']


class EventsIncludeFromReviewsRecursive2(TypedDict, total=False):
    """Relational arguments for Reviews"""
    children: Union[bool, 'FindManyChildrenArgsFromReviewsRecursive3']
    users: Union[bool, 'FindManyUsersArgsFromReviewsRecursive3']
    activity: Union[bool, 'ActivitiesArgsFromReviewsRecursive3']
    reviews: Union[bool, 'FindManyReviewsArgsFromReviewsRecursive3']


class EventsIncludeFromReviewsRecursive3(TypedDict, total=False):
    """Relational arguments for Reviews"""
    children: Union[bool, 'FindManyChildrenArgsFromReviewsRecursive4']
    users: Union[bool, 'FindManyUsersArgsFromReviewsRecursive4']
    activity: Union[bool, 'ActivitiesArgsFromReviewsRecursive4']
    reviews: Union[bool, 'FindManyReviewsArgsFromReviewsRecursive4']


class EventsIncludeFromReviewsRecursive4(TypedDict, total=False):
    """Relational arguments for Reviews"""

    

class EventsArgsFromReviews(TypedDict, total=False):
    """Arguments for Reviews"""
    include: 'EventsIncludeFromEventsRecursive1'


class EventsArgsFromReviewsRecursive1(TypedDict, total=False):
    """Arguments for Reviews"""
    include: 'EventsIncludeFromEventsRecursive2'


class EventsArgsFromReviewsRecursive2(TypedDict, total=False):
    """Arguments for Reviews"""
    include: 'EventsIncludeFromEventsRecursive3'


class EventsArgsFromReviewsRecursive3(TypedDict, total=False):
    """Arguments for Reviews"""
    include: 'EventsIncludeFromEventsRecursive4'


class EventsArgsFromReviewsRecursive4(TypedDict, total=False):
    """Arguments for Reviews"""
    
    

class FindManyEventsArgsFromReviews(TypedDict, total=False):
    """Arguments for Reviews"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive1'


class FindManyEventsArgsFromReviewsRecursive1(TypedDict, total=False):
    """Arguments for Reviews"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive2'


class FindManyEventsArgsFromReviewsRecursive2(TypedDict, total=False):
    """Arguments for Reviews"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive3'


class FindManyEventsArgsFromReviewsRecursive3(TypedDict, total=False):
    """Arguments for Reviews"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive4'


class FindManyEventsArgsFromReviewsRecursive4(TypedDict, total=False):
    """Arguments for Reviews"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    
    

class ReviewsIncludeFromReviews(TypedDict, total=False):
    """Relational arguments for Reviews"""
    event: Union[bool, 'EventsArgsFromReviewsRecursive1']
    parent: Union[bool, 'UsersArgsFromReviewsRecursive1']


class ReviewsIncludeFromReviewsRecursive1(TypedDict, total=False):
    """Relational arguments for Reviews"""
    event: Union[bool, 'EventsArgsFromReviewsRecursive2']
    parent: Union[bool, 'UsersArgsFromReviewsRecursive2']


class ReviewsIncludeFromReviewsRecursive2(TypedDict, total=False):
    """Relational arguments for Reviews"""
    event: Union[bool, 'EventsArgsFromReviewsRecursive3']
    parent: Union[bool, 'UsersArgsFromReviewsRecursive3']


class ReviewsIncludeFromReviewsRecursive3(TypedDict, total=False):
    """Relational arguments for Reviews"""
    event: Union[bool, 'EventsArgsFromReviewsRecursive4']
    parent: Union[bool, 'UsersArgsFromReviewsRecursive4']


class ReviewsIncludeFromReviewsRecursive4(TypedDict, total=False):
    """Relational arguments for Reviews"""

    

class ReviewsArgsFromReviews(TypedDict, total=False):
    """Arguments for Reviews"""
    include: 'ReviewsIncludeFromReviewsRecursive1'


class ReviewsArgsFromReviewsRecursive1(TypedDict, total=False):
    """Arguments for Reviews"""
    include: 'ReviewsIncludeFromReviewsRecursive2'


class ReviewsArgsFromReviewsRecursive2(TypedDict, total=False):
    """Arguments for Reviews"""
    include: 'ReviewsIncludeFromReviewsRecursive3'


class ReviewsArgsFromReviewsRecursive3(TypedDict, total=False):
    """Arguments for Reviews"""
    include: 'ReviewsIncludeFromReviewsRecursive4'


class ReviewsArgsFromReviewsRecursive4(TypedDict, total=False):
    """Arguments for Reviews"""
    
    

class FindManyReviewsArgsFromReviews(TypedDict, total=False):
    """Arguments for Reviews"""
    take: int
    skip: int
    order_by: Union['ReviewsOrderByInput', List['ReviewsOrderByInput']]
    where: 'ReviewsWhereInput'
    cursor: 'ReviewsWhereUniqueInput'
    distinct: List['ReviewsScalarFieldKeys']
    include: 'ReviewsIncludeFromReviewsRecursive1'


class FindManyReviewsArgsFromReviewsRecursive1(TypedDict, total=False):
    """Arguments for Reviews"""
    take: int
    skip: int
    order_by: Union['ReviewsOrderByInput', List['ReviewsOrderByInput']]
    where: 'ReviewsWhereInput'
    cursor: 'ReviewsWhereUniqueInput'
    distinct: List['ReviewsScalarFieldKeys']
    include: 'ReviewsIncludeFromReviewsRecursive2'


class FindManyReviewsArgsFromReviewsRecursive2(TypedDict, total=False):
    """Arguments for Reviews"""
    take: int
    skip: int
    order_by: Union['ReviewsOrderByInput', List['ReviewsOrderByInput']]
    where: 'ReviewsWhereInput'
    cursor: 'ReviewsWhereUniqueInput'
    distinct: List['ReviewsScalarFieldKeys']
    include: 'ReviewsIncludeFromReviewsRecursive3'


class FindManyReviewsArgsFromReviewsRecursive3(TypedDict, total=False):
    """Arguments for Reviews"""
    take: int
    skip: int
    order_by: Union['ReviewsOrderByInput', List['ReviewsOrderByInput']]
    where: 'ReviewsWhereInput'
    cursor: 'ReviewsWhereUniqueInput'
    distinct: List['ReviewsScalarFieldKeys']
    include: 'ReviewsIncludeFromReviewsRecursive4'


class FindManyReviewsArgsFromReviewsRecursive4(TypedDict, total=False):
    """Arguments for Reviews"""
    take: int
    skip: int
    order_by: Union['ReviewsOrderByInput', List['ReviewsOrderByInput']]
    where: 'ReviewsWhereInput'
    cursor: 'ReviewsWhereUniqueInput'
    distinct: List['ReviewsScalarFieldKeys']
    


FindManyReviewsArgs = FindManyReviewsArgsFromReviews
FindFirstReviewsArgs = FindManyReviewsArgsFromReviews


    

class ReviewsWhereInput(TypedDict, total=False):
    """Reviews arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    rating: Union[_int, 'types.IntFilter']
    event: 'EventsRelationFilter'
    eventId: Union[_str, 'types.StringFilter']
    parent: 'UsersRelationFilter'
    parentId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['ReviewsWhereInputRecursive1', List['ReviewsWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ReviewsWhereInputRecursive1']
    OR: List['ReviewsWhereInputRecursive1']
    NOT: List['ReviewsWhereInputRecursive1']


class ReviewsWhereInputRecursive1(TypedDict, total=False):
    """Reviews arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    rating: Union[_int, 'types.IntFilter']
    event: 'EventsRelationFilter'
    eventId: Union[_str, 'types.StringFilter']
    parent: 'UsersRelationFilter'
    parentId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['ReviewsWhereInputRecursive2', List['ReviewsWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ReviewsWhereInputRecursive2']
    OR: List['ReviewsWhereInputRecursive2']
    NOT: List['ReviewsWhereInputRecursive2']


class ReviewsWhereInputRecursive2(TypedDict, total=False):
    """Reviews arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    rating: Union[_int, 'types.IntFilter']
    event: 'EventsRelationFilter'
    eventId: Union[_str, 'types.StringFilter']
    parent: 'UsersRelationFilter'
    parentId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['ReviewsWhereInputRecursive3', List['ReviewsWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ReviewsWhereInputRecursive3']
    OR: List['ReviewsWhereInputRecursive3']
    NOT: List['ReviewsWhereInputRecursive3']


class ReviewsWhereInputRecursive3(TypedDict, total=False):
    """Reviews arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    rating: Union[_int, 'types.IntFilter']
    event: 'EventsRelationFilter'
    eventId: Union[_str, 'types.StringFilter']
    parent: 'UsersRelationFilter'
    parentId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['ReviewsWhereInputRecursive4', List['ReviewsWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ReviewsWhereInputRecursive4']
    OR: List['ReviewsWhereInputRecursive4']
    NOT: List['ReviewsWhereInputRecursive4']


class ReviewsWhereInputRecursive4(TypedDict, total=False):
    """Reviews arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    rating: Union[_int, 'types.IntFilter']
    event: 'EventsRelationFilter'
    eventId: Union[_str, 'types.StringFilter']
    parent: 'UsersRelationFilter'
    parentId: Union[_str, 'types.StringFilter']



# aggregate Reviews types


    

class ReviewsScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Reviews arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    rating: Union[_int, 'types.IntWithAggregatesFilter']
    eventId: Union[_str, 'types.StringWithAggregatesFilter']
    parentId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ReviewsScalarWhereWithAggregatesInputRecursive1']
    OR: List['ReviewsScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ReviewsScalarWhereWithAggregatesInputRecursive1']


class ReviewsScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Reviews arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    rating: Union[_int, 'types.IntWithAggregatesFilter']
    eventId: Union[_str, 'types.StringWithAggregatesFilter']
    parentId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ReviewsScalarWhereWithAggregatesInputRecursive2']
    OR: List['ReviewsScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ReviewsScalarWhereWithAggregatesInputRecursive2']


class ReviewsScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Reviews arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    rating: Union[_int, 'types.IntWithAggregatesFilter']
    eventId: Union[_str, 'types.StringWithAggregatesFilter']
    parentId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ReviewsScalarWhereWithAggregatesInputRecursive3']
    OR: List['ReviewsScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ReviewsScalarWhereWithAggregatesInputRecursive3']


class ReviewsScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Reviews arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    rating: Union[_int, 'types.IntWithAggregatesFilter']
    eventId: Union[_str, 'types.StringWithAggregatesFilter']
    parentId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ReviewsScalarWhereWithAggregatesInputRecursive4']
    OR: List['ReviewsScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ReviewsScalarWhereWithAggregatesInputRecursive4']


class ReviewsScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Reviews arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    rating: Union[_int, 'types.IntWithAggregatesFilter']
    eventId: Union[_str, 'types.StringWithAggregatesFilter']
    parentId: Union[_str, 'types.StringWithAggregatesFilter']



class ReviewsGroupByOutput(TypedDict, total=False):
    id: _str
    rating: _int
    eventId: _str
    parentId: _str
    _sum: 'ReviewsSumAggregateOutput'
    _avg: 'ReviewsAvgAggregateOutput'
    _min: 'ReviewsMinAggregateOutput'
    _max: 'ReviewsMaxAggregateOutput'
    _count: 'ReviewsCountAggregateOutput'


class ReviewsAvgAggregateOutput(TypedDict, total=False):
    """Reviews output for aggregating averages"""
    rating: float


class ReviewsSumAggregateOutput(TypedDict, total=False):
    """Reviews output for aggregating sums"""
    rating: _int


class ReviewsScalarAggregateOutput(TypedDict, total=False):
    """Reviews output including scalar fields"""
    id: _str
    rating: _int
    eventId: _str
    parentId: _str


ReviewsMinAggregateOutput = ReviewsScalarAggregateOutput
ReviewsMaxAggregateOutput = ReviewsScalarAggregateOutput


class ReviewsMaxAggregateInput(TypedDict, total=False):
    """Reviews input for aggregating by max"""
    id: bool
    rating: bool
    eventId: bool
    parentId: bool


class ReviewsMinAggregateInput(TypedDict, total=False):
    """Reviews input for aggregating by min"""
    id: bool
    rating: bool
    eventId: bool
    parentId: bool


class ReviewsNumberAggregateInput(TypedDict, total=False):
    """Reviews input for aggregating numbers"""
    rating: bool


ReviewsAvgAggregateInput = ReviewsNumberAggregateInput
ReviewsSumAggregateInput = ReviewsNumberAggregateInput


ReviewsCountAggregateInput = TypedDict(
    'ReviewsCountAggregateInput',
    {
        'id': bool,
        'rating': bool,
        'eventId': bool,
        'parentId': bool,
        '_all': bool,
    },
    total=False,
)

ReviewsCountAggregateOutput = TypedDict(
    'ReviewsCountAggregateOutput',
    {
        'id': int,
        'rating': int,
        'eventId': int,
        'parentId': int,
        '_all': int,
    },
    total=False,
)


ReviewsKeys = Literal[
    'id',
    'rating',
    'event',
    'eventId',
    'parent',
    'parentId',
]
ReviewsScalarFieldKeys = Literal[
    'id',
    'rating',
    'eventId',
    'parentId',
]
ReviewsScalarFieldKeysT = TypeVar('ReviewsScalarFieldKeysT', bound=ReviewsScalarFieldKeys)

ReviewsRelationalFieldKeys = Literal[
        'event',
        'parent',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields