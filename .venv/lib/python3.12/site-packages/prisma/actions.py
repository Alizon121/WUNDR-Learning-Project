# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases
from ._compat import model_parse
from ._constants import CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED

if TYPE_CHECKING:
    from .client import Prisma
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class UsersActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model


    async def create(
        self,
        data: types.UsersCreateInput,
        include: Optional[types.UsersInclude] = None
    ) -> _PrismaModelT:
        """Create a new Users record.

        Parameters
        ----------
        data
            Users record data
        include
            Specifies which relations should be loaded on the returned Users model

        Returns
        -------
        prisma.models.Users
            The created Users record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Users record from just the required fields
        users = await Users.prisma().create(
            data={
                # data to create a Users record
                'firstName': 'bbadfchfja',
                'lastName': 'dhheabfhf',
                'email': 'ggciceaie',
                'role': enums.Roles.parent,
                'password': 'bbehjachib',
                'city': 'cadfabfehe',
                'state': 'dgiiaaijj',
                'zipCode': 1508029952,
                'createdAt': datetime.datetime.utcnow(),
                'updatedAt': datetime.datetime.utcnow(),
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.UsersCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Users records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Users record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Users.prisma().create_many(
            data=[
                {
                    # data to create a Users record
                    'firstName': 'eigcfgbif',
                    'lastName': 'bagcfbhiig',
                    'email': 'cghideieh',
                    'role': enums.Roles.parent,
                    'password': 'biabhbdai',
                    'city': 'idghgaicb',
                    'state': 'fjfddhigg',
                    'zipCode': 790425851,
                    'createdAt': datetime.datetime.utcnow(),
                    'updatedAt': datetime.datetime.utcnow(),
                },
                {
                    # data to create a Users record
                    'firstName': 'cbbbjbfcii',
                    'lastName': 'bbejhfidcb',
                    'email': 'bgeecijdgg',
                    'role': enums.Roles.parent,
                    'password': 'bdiicjafbj',
                    'city': 'bgehebiafc',
                    'state': 'bghffegacj',
                    'zipCode': 1767274722,
                    'createdAt': datetime.datetime.utcnow(),
                    'updatedAt': datetime.datetime.utcnow(),
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.UsersWhereUniqueInput,
        include: Optional[types.UsersInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Users record.

        Parameters
        ----------
        where
            Users filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Users model

        Returns
        -------
        prisma.models.Users
            The deleted Users record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        users = await Users.prisma().delete(
            where={
                'id': 'dcgchcbbf',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.UsersWhereUniqueInput,
        include: Optional[types.UsersInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Users record.

        Parameters
        ----------
        where
            Users filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Users model

        Returns
        -------
        prisma.models.Users
            The found Users record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        users = await Users.prisma().find_unique(
            where={
                'id': 'bdedcabahc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.UsersWhereUniqueInput,
        include: Optional[types.UsersInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Users record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Users filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Users model

        Returns
        -------
        prisma.models.Users
            The found Users record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        users = await Users.prisma().find_unique_or_raise(
            where={
                'id': 'ghfhiafcb',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UsersWhereInput] = None,
        cursor: Optional[types.UsersWhereUniqueInput] = None,
        include: Optional[types.UsersInclude] = None,
        order: Optional[Union[types.UsersOrderByInput, List[types.UsersOrderByInput]]] = None,
        distinct: Optional[List[types.UsersScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Users records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Users records returned
        skip
            Ignore the first N results
        where
            Users filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Users model
        order
            Order the returned Users records by any field
        distinct
            Filter Users records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Users]
            The list of all Users records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Users records
        users = await Users.prisma().find_many(take=10)

        # find the first 5 Users records ordered by the id field
        users = await Users.prisma().find_many(
            take=5,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UsersWhereInput] = None,
        cursor: Optional[types.UsersWhereUniqueInput] = None,
        include: Optional[types.UsersInclude] = None,
        order: Optional[Union[types.UsersOrderByInput, List[types.UsersOrderByInput]]] = None,
        distinct: Optional[List[types.UsersScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Users record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Users filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Users model
        order
            Order the returned Users records by any field
        distinct
            Filter Users records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Users
            The first Users record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Users record ordered by the firstName field
        users = await Users.prisma().find_first(
            skip=1,
            order={
                'firstName': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UsersWhereInput] = None,
        cursor: Optional[types.UsersWhereUniqueInput] = None,
        include: Optional[types.UsersInclude] = None,
        order: Optional[Union[types.UsersOrderByInput, List[types.UsersOrderByInput]]] = None,
        distinct: Optional[List[types.UsersScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Users record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Users filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Users model
        order
            Order the returned Users records by any field
        distinct
            Filter Users records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Users
            The first Users record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Users record ordered by the lastName field
        users = await Users.prisma().find_first_or_raise(
            skip=1,
            order={
                'lastName': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.UsersUpdateInput,
        where: types.UsersWhereUniqueInput,
        include: Optional[types.UsersInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Users record.

        Parameters
        ----------
        data
            Users record data specifying what to update
        where
            Users filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Users model

        Returns
        -------
        prisma.models.Users
            The updated Users record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Users.prisma().update(
            where={
                'id': 'heejgedji',
            },
            data={
                # data to update the Users record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.UsersWhereUniqueInput,
        data: types.UsersUpsertInput,
        include: Optional[types.UsersInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Users filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Users model

        Returns
        -------
        prisma.models.Users
            The created or updated Users record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        users = await Users.prisma().upsert(
            where={
                'id': 'bjgjgibgbf',
            },
            data={
                'create': {
                    'id': 'bjgjgibgbf',
                    'firstName': 'cbbbjbfcii',
                    'lastName': 'bbejhfidcb',
                    'email': 'bgeecijdgg',
                    'role': enums.Roles.parent,
                    'password': 'bdiicjafbj',
                    'city': 'bgehebiafc',
                    'state': 'bghffegacj',
                    'zipCode': 1767274722,
                    'createdAt': datetime.datetime.utcnow(),
                    'updatedAt': datetime.datetime.utcnow(),
                },
                'update': {
                    'firstName': 'cbbbjbfcii',
                    'lastName': 'bbejhfidcb',
                    'email': 'bgeecijdgg',
                    'role': enums.Roles.parent,
                    'password': 'bdiicjafbj',
                    'city': 'bgehebiafc',
                    'state': 'bghffegacj',
                    'zipCode': 1767274722,
                    'createdAt': datetime.datetime.utcnow(),
                    'updatedAt': datetime.datetime.utcnow(),
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.UsersUpdateManyMutationInput,
        where: types.UsersWhereInput,
    ) -> int:
        """Update multiple Users records

        Parameters
        ----------
        data
            Users data to update the selected Users records to
        where
            Filter to select the Users records to update

        Returns
        -------
        int
            The total number of Users records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Users records
        total = await Users.prisma().update_many(
            data={
                'email': 'bbbgbhfjge'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UsersWhereInput] = None,
        cursor: Optional[types.UsersWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Users records present in the database

        Parameters
        ----------
        select
            Select the Users fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Users filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UsersCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Users.prisma().count()

        # results: prisma.types.UsersCountAggregateOutput
        results = await Users.prisma().count(
            select={
                '_all': True,
                'role': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.UsersCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UsersWhereInput] = None,
        cursor: Optional[types.UsersWhereUniqueInput] = None,
    ) -> types.UsersCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.UsersCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UsersWhereInput] = None,
        cursor: Optional[types.UsersWhereUniqueInput] = None,
    ) -> Union[int, types.UsersCountAggregateOutput]:
        """Count the number of Users records present in the database

        Parameters
        ----------
        select
            Select the Users fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Users filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UsersCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Users.prisma().count()

        # results: prisma.types.UsersCountAggregateOutput
        results = await Users.prisma().count(
            select={
                '_all': True,
                'avatar': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.UsersCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.UsersWhereInput] = None
    ) -> int:
        """Delete multiple Users records.

        Parameters
        ----------
        where
            Optional Users filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Users records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Users records
        total = await Users.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.UsersScalarFieldKeys'],
        *,
        where: Optional['types.UsersWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.UsersAvgAggregateInput'] = None,
        sum: Optional['types.UsersSumAggregateInput'] = None,
        min: Optional['types.UsersMinAggregateInput'] = None,
        max: Optional['types.UsersMaxAggregateInput'] = None,
        having: Optional['types.UsersScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.UsersCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.UsersScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.UsersScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.UsersGroupByOutput']:
        """Group Users records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Users fields to group records by
        where
            Users filter to select records
        take
            Limit the maximum number of Users records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.UsersGroupByOutput]
            A list of dictionaries representing the Users record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Users records by password values
        # and count how many records are in each group
        results = await Users.prisma().group_by(
            ['password'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class NotificationsActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model


    async def create(
        self,
        data: types.NotificationsCreateInput,
        include: Optional[types.NotificationsInclude] = None
    ) -> _PrismaModelT:
        """Create a new Notifications record.

        Parameters
        ----------
        data
            Notifications record data
        include
            Specifies which relations should be loaded on the returned Notifications model

        Returns
        -------
        prisma.models.Notifications
            The created Notifications record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Notifications record from just the required fields
        notifications = await Notifications.prisma().create(
            data={
                # data to create a Notifications record
                'description': 'igbehcbab',
                'userId': 'bdadaadhag',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.NotificationsCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Notifications records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Notifications record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Notifications.prisma().create_many(
            data=[
                {
                    # data to create a Notifications record
                    'description': 'bgiggdidbf',
                    'userId': 'caaaedabfc',
                },
                {
                    # data to create a Notifications record
                    'description': 'bigibebcib',
                    'userId': 'bigaiehgcc',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.NotificationsWhereUniqueInput,
        include: Optional[types.NotificationsInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Notifications record.

        Parameters
        ----------
        where
            Notifications filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Notifications model

        Returns
        -------
        prisma.models.Notifications
            The deleted Notifications record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        notifications = await Notifications.prisma().delete(
            where={
                'id': 'beeifcbebf',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.NotificationsWhereUniqueInput,
        include: Optional[types.NotificationsInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Notifications record.

        Parameters
        ----------
        where
            Notifications filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Notifications model

        Returns
        -------
        prisma.models.Notifications
            The found Notifications record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        notifications = await Notifications.prisma().find_unique(
            where={
                'id': 'bgcigfahea',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.NotificationsWhereUniqueInput,
        include: Optional[types.NotificationsInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Notifications record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Notifications filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Notifications model

        Returns
        -------
        prisma.models.Notifications
            The found Notifications record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        notifications = await Notifications.prisma().find_unique_or_raise(
            where={
                'id': 'bcejgaggif',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.NotificationsWhereInput] = None,
        cursor: Optional[types.NotificationsWhereUniqueInput] = None,
        include: Optional[types.NotificationsInclude] = None,
        order: Optional[Union[types.NotificationsOrderByInput, List[types.NotificationsOrderByInput]]] = None,
        distinct: Optional[List[types.NotificationsScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Notifications records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Notifications records returned
        skip
            Ignore the first N results
        where
            Notifications filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Notifications model
        order
            Order the returned Notifications records by any field
        distinct
            Filter Notifications records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Notifications]
            The list of all Notifications records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Notifications records
        notifications = await Notifications.prisma().find_many(take=10)

        # find the first 5 Notifications records ordered by the id field
        notifications = await Notifications.prisma().find_many(
            take=5,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.NotificationsWhereInput] = None,
        cursor: Optional[types.NotificationsWhereUniqueInput] = None,
        include: Optional[types.NotificationsInclude] = None,
        order: Optional[Union[types.NotificationsOrderByInput, List[types.NotificationsOrderByInput]]] = None,
        distinct: Optional[List[types.NotificationsScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Notifications record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Notifications filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Notifications model
        order
            Order the returned Notifications records by any field
        distinct
            Filter Notifications records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Notifications
            The first Notifications record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Notifications record ordered by the description field
        notifications = await Notifications.prisma().find_first(
            skip=1,
            order={
                'description': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.NotificationsWhereInput] = None,
        cursor: Optional[types.NotificationsWhereUniqueInput] = None,
        include: Optional[types.NotificationsInclude] = None,
        order: Optional[Union[types.NotificationsOrderByInput, List[types.NotificationsOrderByInput]]] = None,
        distinct: Optional[List[types.NotificationsScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Notifications record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Notifications filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Notifications model
        order
            Order the returned Notifications records by any field
        distinct
            Filter Notifications records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Notifications
            The first Notifications record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Notifications record ordered by the userId field
        notifications = await Notifications.prisma().find_first_or_raise(
            skip=1,
            order={
                'userId': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.NotificationsUpdateInput,
        where: types.NotificationsWhereUniqueInput,
        include: Optional[types.NotificationsInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Notifications record.

        Parameters
        ----------
        data
            Notifications record data specifying what to update
        where
            Notifications filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Notifications model

        Returns
        -------
        prisma.models.Notifications
            The updated Notifications record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        notifications = await Notifications.prisma().update(
            where={
                'id': 'idfjadbcc',
            },
            data={
                # data to update the Notifications record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.NotificationsWhereUniqueInput,
        data: types.NotificationsUpsertInput,
        include: Optional[types.NotificationsInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Notifications filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Notifications model

        Returns
        -------
        prisma.models.Notifications
            The created or updated Notifications record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        notifications = await Notifications.prisma().upsert(
            where={
                'id': 'hgdhbjhhj',
            },
            data={
                'create': {
                    'id': 'hgdhbjhhj',
                    'description': 'bigibebcib',
                    'userId': 'bigaiehgcc',
                },
                'update': {
                    'description': 'bigibebcib',
                    'userId': 'bigaiehgcc',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.NotificationsUpdateManyMutationInput,
        where: types.NotificationsWhereInput,
    ) -> int:
        """Update multiple Notifications records

        Parameters
        ----------
        data
            Notifications data to update the selected Notifications records to
        where
            Filter to select the Notifications records to update

        Returns
        -------
        int
            The total number of Notifications records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Notifications records
        total = await Notifications.prisma().update_many(
            data={
                'id': 'ecjjjfbae'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.NotificationsWhereInput] = None,
        cursor: Optional[types.NotificationsWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Notifications records present in the database

        Parameters
        ----------
        select
            Select the Notifications fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Notifications filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.NotificationsCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Notifications.prisma().count()

        # results: prisma.types.NotificationsCountAggregateOutput
        results = await Notifications.prisma().count(
            select={
                '_all': True,
                'description': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.NotificationsCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.NotificationsWhereInput] = None,
        cursor: Optional[types.NotificationsWhereUniqueInput] = None,
    ) -> types.NotificationsCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.NotificationsCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.NotificationsWhereInput] = None,
        cursor: Optional[types.NotificationsWhereUniqueInput] = None,
    ) -> Union[int, types.NotificationsCountAggregateOutput]:
        """Count the number of Notifications records present in the database

        Parameters
        ----------
        select
            Select the Notifications fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Notifications filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.NotificationsCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Notifications.prisma().count()

        # results: prisma.types.NotificationsCountAggregateOutput
        results = await Notifications.prisma().count(
            select={
                '_all': True,
                'userId': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.NotificationsCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.NotificationsWhereInput] = None
    ) -> int:
        """Delete multiple Notifications records.

        Parameters
        ----------
        where
            Optional Notifications filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Notifications records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Notifications records
        total = await Notifications.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.NotificationsScalarFieldKeys'],
        *,
        where: Optional['types.NotificationsWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.NotificationsAvgAggregateInput'] = None,
        sum: Optional['types.NotificationsSumAggregateInput'] = None,
        min: Optional['types.NotificationsMinAggregateInput'] = None,
        max: Optional['types.NotificationsMaxAggregateInput'] = None,
        having: Optional['types.NotificationsScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.NotificationsCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.NotificationsScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.NotificationsScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.NotificationsGroupByOutput']:
        """Group Notifications records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Notifications fields to group records by
        where
            Notifications filter to select records
        take
            Limit the maximum number of Notifications records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.NotificationsGroupByOutput]
            A list of dictionaries representing the Notifications record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Notifications records by id values
        # and count how many records are in each group
        results = await Notifications.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class ChildrenActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model


    async def create(
        self,
        data: types.ChildrenCreateInput,
        include: Optional[types.ChildrenInclude] = None
    ) -> _PrismaModelT:
        """Create a new Children record.

        Parameters
        ----------
        data
            Children record data
        include
            Specifies which relations should be loaded on the returned Children model

        Returns
        -------
        prisma.models.Children
            The created Children record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Children record from just the required fields
        children = await Children.prisma().create(
            data={
                # data to create a Children record
                'firstName': 'bhhfibbigf',
                'lastName': 'ijdbeffgg',
                'homeschool': False,
                'age': 2102736524,
                'createdAt': datetime.datetime.utcnow(),
                'updatedAt': datetime.datetime.utcnow(),
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.ChildrenCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Children records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Children record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Children.prisma().create_many(
            data=[
                {
                    # data to create a Children record
                    'firstName': 'chbfcacbd',
                    'lastName': 'efggddide',
                    'homeschool': False,
                    'age': 1583689592,
                    'createdAt': datetime.datetime.utcnow(),
                    'updatedAt': datetime.datetime.utcnow(),
                },
                {
                    # data to create a Children record
                    'firstName': 'ihieecagf',
                    'lastName': 'bghfciaafe',
                    'homeschool': False,
                    'age': 2054802212,
                    'createdAt': datetime.datetime.utcnow(),
                    'updatedAt': datetime.datetime.utcnow(),
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.ChildrenWhereUniqueInput,
        include: Optional[types.ChildrenInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Children record.

        Parameters
        ----------
        where
            Children filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Children model

        Returns
        -------
        prisma.models.Children
            The deleted Children record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        children = await Children.prisma().delete(
            where={
                'id': 'gaddfhfh',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.ChildrenWhereUniqueInput,
        include: Optional[types.ChildrenInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Children record.

        Parameters
        ----------
        where
            Children filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Children model

        Returns
        -------
        prisma.models.Children
            The found Children record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        children = await Children.prisma().find_unique(
            where={
                'id': 'gieegcbeg',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.ChildrenWhereUniqueInput,
        include: Optional[types.ChildrenInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Children record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Children filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Children model

        Returns
        -------
        prisma.models.Children
            The found Children record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        children = await Children.prisma().find_unique_or_raise(
            where={
                'id': 'bgcffadich',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ChildrenWhereInput] = None,
        cursor: Optional[types.ChildrenWhereUniqueInput] = None,
        include: Optional[types.ChildrenInclude] = None,
        order: Optional[Union[types.ChildrenOrderByInput, List[types.ChildrenOrderByInput]]] = None,
        distinct: Optional[List[types.ChildrenScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Children records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Children records returned
        skip
            Ignore the first N results
        where
            Children filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Children model
        order
            Order the returned Children records by any field
        distinct
            Filter Children records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Children]
            The list of all Children records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Children records
        childrens = await Children.prisma().find_many(take=10)

        # find the first 5 Children records ordered by the id field
        childrens = await Children.prisma().find_many(
            take=5,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ChildrenWhereInput] = None,
        cursor: Optional[types.ChildrenWhereUniqueInput] = None,
        include: Optional[types.ChildrenInclude] = None,
        order: Optional[Union[types.ChildrenOrderByInput, List[types.ChildrenOrderByInput]]] = None,
        distinct: Optional[List[types.ChildrenScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Children record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Children filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Children model
        order
            Order the returned Children records by any field
        distinct
            Filter Children records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Children
            The first Children record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Children record ordered by the firstName field
        children = await Children.prisma().find_first(
            skip=1,
            order={
                'firstName': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ChildrenWhereInput] = None,
        cursor: Optional[types.ChildrenWhereUniqueInput] = None,
        include: Optional[types.ChildrenInclude] = None,
        order: Optional[Union[types.ChildrenOrderByInput, List[types.ChildrenOrderByInput]]] = None,
        distinct: Optional[List[types.ChildrenScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Children record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Children filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Children model
        order
            Order the returned Children records by any field
        distinct
            Filter Children records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Children
            The first Children record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Children record ordered by the lastName field
        children = await Children.prisma().find_first_or_raise(
            skip=1,
            order={
                'lastName': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.ChildrenUpdateInput,
        where: types.ChildrenWhereUniqueInput,
        include: Optional[types.ChildrenInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Children record.

        Parameters
        ----------
        data
            Children record data specifying what to update
        where
            Children filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Children model

        Returns
        -------
        prisma.models.Children
            The updated Children record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        children = await Children.prisma().update(
            where={
                'id': 'fcbichhci',
            },
            data={
                # data to update the Children record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.ChildrenWhereUniqueInput,
        data: types.ChildrenUpsertInput,
        include: Optional[types.ChildrenInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Children filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Children model

        Returns
        -------
        prisma.models.Children
            The created or updated Children record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        children = await Children.prisma().upsert(
            where={
                'id': 'bcggadccgf',
            },
            data={
                'create': {
                    'id': 'bcggadccgf',
                    'firstName': 'ihieecagf',
                    'lastName': 'bghfciaafe',
                    'homeschool': False,
                    'age': 2054802212,
                    'createdAt': datetime.datetime.utcnow(),
                    'updatedAt': datetime.datetime.utcnow(),
                },
                'update': {
                    'firstName': 'ihieecagf',
                    'lastName': 'bghfciaafe',
                    'homeschool': False,
                    'age': 2054802212,
                    'createdAt': datetime.datetime.utcnow(),
                    'updatedAt': datetime.datetime.utcnow(),
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.ChildrenUpdateManyMutationInput,
        where: types.ChildrenWhereInput,
    ) -> int:
        """Update multiple Children records

        Parameters
        ----------
        data
            Children data to update the selected Children records to
        where
            Filter to select the Children records to update

        Returns
        -------
        int
            The total number of Children records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Children records
        total = await Children.prisma().update_many(
            data={
                'homeschool': True
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ChildrenWhereInput] = None,
        cursor: Optional[types.ChildrenWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Children records present in the database

        Parameters
        ----------
        select
            Select the Children fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Children filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ChildrenCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Children.prisma().count()

        # results: prisma.types.ChildrenCountAggregateOutput
        results = await Children.prisma().count(
            select={
                '_all': True,
                'age': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.ChildrenCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ChildrenWhereInput] = None,
        cursor: Optional[types.ChildrenWhereUniqueInput] = None,
    ) -> types.ChildrenCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.ChildrenCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ChildrenWhereInput] = None,
        cursor: Optional[types.ChildrenWhereUniqueInput] = None,
    ) -> Union[int, types.ChildrenCountAggregateOutput]:
        """Count the number of Children records present in the database

        Parameters
        ----------
        select
            Select the Children fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Children filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ChildrenCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Children.prisma().count()

        # results: prisma.types.ChildrenCountAggregateOutput
        results = await Children.prisma().count(
            select={
                '_all': True,
                'parentIDs': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.ChildrenCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.ChildrenWhereInput] = None
    ) -> int:
        """Delete multiple Children records.

        Parameters
        ----------
        where
            Optional Children filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Children records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Children records
        total = await Children.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.ChildrenScalarFieldKeys'],
        *,
        where: Optional['types.ChildrenWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.ChildrenAvgAggregateInput'] = None,
        sum: Optional['types.ChildrenSumAggregateInput'] = None,
        min: Optional['types.ChildrenMinAggregateInput'] = None,
        max: Optional['types.ChildrenMaxAggregateInput'] = None,
        having: Optional['types.ChildrenScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.ChildrenCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.ChildrenScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.ChildrenScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.ChildrenGroupByOutput']:
        """Group Children records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Children fields to group records by
        where
            Children filter to select records
        take
            Limit the maximum number of Children records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.ChildrenGroupByOutput]
            A list of dictionaries representing the Children record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Children records by eventIDs values
        # and count how many records are in each group
        results = await Children.prisma().group_by(
            ['eventIDs'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class ActivitiesActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model


    async def create(
        self,
        data: types.ActivitiesCreateInput,
        include: Optional[types.ActivitiesInclude] = None
    ) -> _PrismaModelT:
        """Create a new Activities record.

        Parameters
        ----------
        data
            Activities record data
        include
            Specifies which relations should be loaded on the returned Activities model

        Returns
        -------
        prisma.models.Activities
            The created Activities record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Activities record from just the required fields
        activities = await Activities.prisma().create(
            data={
                # data to create a Activities record
                'name': 'cafdaehjid',
                'description': 'gifdddbia',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.ActivitiesCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Activities records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Activities record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Activities.prisma().create_many(
            data=[
                {
                    # data to create a Activities record
                    'name': 'bchehecef',
                    'description': 'jeijcbhfe',
                },
                {
                    # data to create a Activities record
                    'name': 'bjgejjabff',
                    'description': 'bcciijbibg',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.ActivitiesWhereUniqueInput,
        include: Optional[types.ActivitiesInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Activities record.

        Parameters
        ----------
        where
            Activities filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Activities model

        Returns
        -------
        prisma.models.Activities
            The deleted Activities record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        activities = await Activities.prisma().delete(
            where={
                'id': 'cffcachfd',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.ActivitiesWhereUniqueInput,
        include: Optional[types.ActivitiesInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Activities record.

        Parameters
        ----------
        where
            Activities filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Activities model

        Returns
        -------
        prisma.models.Activities
            The found Activities record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        activities = await Activities.prisma().find_unique(
            where={
                'id': 'bccdfhdigc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.ActivitiesWhereUniqueInput,
        include: Optional[types.ActivitiesInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Activities record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Activities filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Activities model

        Returns
        -------
        prisma.models.Activities
            The found Activities record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        activities = await Activities.prisma().find_unique_or_raise(
            where={
                'id': 'febcgjbfj',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ActivitiesWhereInput] = None,
        cursor: Optional[types.ActivitiesWhereUniqueInput] = None,
        include: Optional[types.ActivitiesInclude] = None,
        order: Optional[Union[types.ActivitiesOrderByInput, List[types.ActivitiesOrderByInput]]] = None,
        distinct: Optional[List[types.ActivitiesScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Activities records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Activities records returned
        skip
            Ignore the first N results
        where
            Activities filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Activities model
        order
            Order the returned Activities records by any field
        distinct
            Filter Activities records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Activities]
            The list of all Activities records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Activities records
        activities = await Activities.prisma().find_many(take=10)

        # find the first 5 Activities records ordered by the id field
        activities = await Activities.prisma().find_many(
            take=5,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ActivitiesWhereInput] = None,
        cursor: Optional[types.ActivitiesWhereUniqueInput] = None,
        include: Optional[types.ActivitiesInclude] = None,
        order: Optional[Union[types.ActivitiesOrderByInput, List[types.ActivitiesOrderByInput]]] = None,
        distinct: Optional[List[types.ActivitiesScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Activities record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Activities filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Activities model
        order
            Order the returned Activities records by any field
        distinct
            Filter Activities records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Activities
            The first Activities record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Activities record ordered by the name field
        activities = await Activities.prisma().find_first(
            skip=1,
            order={
                'name': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ActivitiesWhereInput] = None,
        cursor: Optional[types.ActivitiesWhereUniqueInput] = None,
        include: Optional[types.ActivitiesInclude] = None,
        order: Optional[Union[types.ActivitiesOrderByInput, List[types.ActivitiesOrderByInput]]] = None,
        distinct: Optional[List[types.ActivitiesScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Activities record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Activities filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Activities model
        order
            Order the returned Activities records by any field
        distinct
            Filter Activities records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Activities
            The first Activities record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Activities record ordered by the description field
        activities = await Activities.prisma().find_first_or_raise(
            skip=1,
            order={
                'description': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.ActivitiesUpdateInput,
        where: types.ActivitiesWhereUniqueInput,
        include: Optional[types.ActivitiesInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Activities record.

        Parameters
        ----------
        data
            Activities record data specifying what to update
        where
            Activities filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Activities model

        Returns
        -------
        prisma.models.Activities
            The updated Activities record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        activities = await Activities.prisma().update(
            where={
                'id': 'bageiegghg',
            },
            data={
                # data to update the Activities record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.ActivitiesWhereUniqueInput,
        data: types.ActivitiesUpsertInput,
        include: Optional[types.ActivitiesInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Activities filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Activities model

        Returns
        -------
        prisma.models.Activities
            The created or updated Activities record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        activities = await Activities.prisma().upsert(
            where={
                'id': 'faidicegb',
            },
            data={
                'create': {
                    'id': 'faidicegb',
                    'name': 'bjgejjabff',
                    'description': 'bcciijbibg',
                },
                'update': {
                    'name': 'bjgejjabff',
                    'description': 'bcciijbibg',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.ActivitiesUpdateManyMutationInput,
        where: types.ActivitiesWhereInput,
    ) -> int:
        """Update multiple Activities records

        Parameters
        ----------
        data
            Activities data to update the selected Activities records to
        where
            Filter to select the Activities records to update

        Returns
        -------
        int
            The total number of Activities records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Activities records
        total = await Activities.prisma().update_many(
            data={
                'id': 'bacecgfhbe'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ActivitiesWhereInput] = None,
        cursor: Optional[types.ActivitiesWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Activities records present in the database

        Parameters
        ----------
        select
            Select the Activities fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Activities filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ActivitiesCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Activities.prisma().count()

        # results: prisma.types.ActivitiesCountAggregateOutput
        results = await Activities.prisma().count(
            select={
                '_all': True,
                'name': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.ActivitiesCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ActivitiesWhereInput] = None,
        cursor: Optional[types.ActivitiesWhereUniqueInput] = None,
    ) -> types.ActivitiesCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.ActivitiesCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ActivitiesWhereInput] = None,
        cursor: Optional[types.ActivitiesWhereUniqueInput] = None,
    ) -> Union[int, types.ActivitiesCountAggregateOutput]:
        """Count the number of Activities records present in the database

        Parameters
        ----------
        select
            Select the Activities fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Activities filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ActivitiesCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Activities.prisma().count()

        # results: prisma.types.ActivitiesCountAggregateOutput
        results = await Activities.prisma().count(
            select={
                '_all': True,
                'description': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.ActivitiesCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.ActivitiesWhereInput] = None
    ) -> int:
        """Delete multiple Activities records.

        Parameters
        ----------
        where
            Optional Activities filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Activities records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Activities records
        total = await Activities.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.ActivitiesScalarFieldKeys'],
        *,
        where: Optional['types.ActivitiesWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.ActivitiesAvgAggregateInput'] = None,
        sum: Optional['types.ActivitiesSumAggregateInput'] = None,
        min: Optional['types.ActivitiesMinAggregateInput'] = None,
        max: Optional['types.ActivitiesMaxAggregateInput'] = None,
        having: Optional['types.ActivitiesScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.ActivitiesCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.ActivitiesScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.ActivitiesScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.ActivitiesGroupByOutput']:
        """Group Activities records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Activities fields to group records by
        where
            Activities filter to select records
        take
            Limit the maximum number of Activities records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.ActivitiesGroupByOutput]
            A list of dictionaries representing the Activities record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Activities records by id values
        # and count how many records are in each group
        results = await Activities.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class EventsActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model


    async def create(
        self,
        data: types.EventsCreateInput,
        include: Optional[types.EventsInclude] = None
    ) -> _PrismaModelT:
        """Create a new Events record.

        Parameters
        ----------
        data
            Events record data
        include
            Specifies which relations should be loaded on the returned Events model

        Returns
        -------
        prisma.models.Events
            The created Events record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Events record from just the required fields
        events = await Events.prisma().create(
            data={
                # data to create a Events record
                'name': 'ihcahiead',
                'description': 'biheheiajg',
                'activityId': 'jbgijghgb',
                'createdAt': datetime.datetime.utcnow(),
                'updatedAt': datetime.datetime.utcnow(),
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.EventsCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Events records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Events record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Events.prisma().create_many(
            data=[
                {
                    # data to create a Events record
                    'name': 'hgjcghfbi',
                    'description': 'icadbcehj',
                    'activityId': 'jchciaee',
                    'createdAt': datetime.datetime.utcnow(),
                    'updatedAt': datetime.datetime.utcnow(),
                },
                {
                    # data to create a Events record
                    'name': 'deeificjd',
                    'description': 'bbcbhebbda',
                    'activityId': 'bejfijgcfb',
                    'createdAt': datetime.datetime.utcnow(),
                    'updatedAt': datetime.datetime.utcnow(),
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.EventsWhereUniqueInput,
        include: Optional[types.EventsInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Events record.

        Parameters
        ----------
        where
            Events filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Events model

        Returns
        -------
        prisma.models.Events
            The deleted Events record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        events = await Events.prisma().delete(
            where={
                'id': 'caifcbgii',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.EventsWhereUniqueInput,
        include: Optional[types.EventsInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Events record.

        Parameters
        ----------
        where
            Events filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Events model

        Returns
        -------
        prisma.models.Events
            The found Events record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        events = await Events.prisma().find_unique(
            where={
                'id': 'igaibbfgj',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.EventsWhereUniqueInput,
        include: Optional[types.EventsInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Events record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Events filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Events model

        Returns
        -------
        prisma.models.Events
            The found Events record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        events = await Events.prisma().find_unique_or_raise(
            where={
                'id': 'bggajdcbbi',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.EventsWhereInput] = None,
        cursor: Optional[types.EventsWhereUniqueInput] = None,
        include: Optional[types.EventsInclude] = None,
        order: Optional[Union[types.EventsOrderByInput, List[types.EventsOrderByInput]]] = None,
        distinct: Optional[List[types.EventsScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Events records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Events records returned
        skip
            Ignore the first N results
        where
            Events filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Events model
        order
            Order the returned Events records by any field
        distinct
            Filter Events records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Events]
            The list of all Events records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Events records
        events = await Events.prisma().find_many(take=10)

        # find the first 5 Events records ordered by the id field
        events = await Events.prisma().find_many(
            take=5,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.EventsWhereInput] = None,
        cursor: Optional[types.EventsWhereUniqueInput] = None,
        include: Optional[types.EventsInclude] = None,
        order: Optional[Union[types.EventsOrderByInput, List[types.EventsOrderByInput]]] = None,
        distinct: Optional[List[types.EventsScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Events record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Events filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Events model
        order
            Order the returned Events records by any field
        distinct
            Filter Events records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Events
            The first Events record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Events record ordered by the name field
        events = await Events.prisma().find_first(
            skip=1,
            order={
                'name': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.EventsWhereInput] = None,
        cursor: Optional[types.EventsWhereUniqueInput] = None,
        include: Optional[types.EventsInclude] = None,
        order: Optional[Union[types.EventsOrderByInput, List[types.EventsOrderByInput]]] = None,
        distinct: Optional[List[types.EventsScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Events record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Events filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Events model
        order
            Order the returned Events records by any field
        distinct
            Filter Events records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Events
            The first Events record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Events record ordered by the description field
        events = await Events.prisma().find_first_or_raise(
            skip=1,
            order={
                'description': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.EventsUpdateInput,
        where: types.EventsWhereUniqueInput,
        include: Optional[types.EventsInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Events record.

        Parameters
        ----------
        data
            Events record data specifying what to update
        where
            Events filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Events model

        Returns
        -------
        prisma.models.Events
            The updated Events record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        events = await Events.prisma().update(
            where={
                'id': 'fcfhgbjed',
            },
            data={
                # data to update the Events record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.EventsWhereUniqueInput,
        data: types.EventsUpsertInput,
        include: Optional[types.EventsInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Events filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Events model

        Returns
        -------
        prisma.models.Events
            The created or updated Events record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        events = await Events.prisma().upsert(
            where={
                'id': 'hdgcajhjg',
            },
            data={
                'create': {
                    'id': 'hdgcajhjg',
                    'name': 'deeificjd',
                    'description': 'bbcbhebbda',
                    'activityId': 'bejfijgcfb',
                    'createdAt': datetime.datetime.utcnow(),
                    'updatedAt': datetime.datetime.utcnow(),
                },
                'update': {
                    'name': 'deeificjd',
                    'description': 'bbcbhebbda',
                    'activityId': 'bejfijgcfb',
                    'createdAt': datetime.datetime.utcnow(),
                    'updatedAt': datetime.datetime.utcnow(),
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.EventsUpdateManyMutationInput,
        where: types.EventsWhereInput,
    ) -> int:
        """Update multiple Events records

        Parameters
        ----------
        data
            Events data to update the selected Events records to
        where
            Filter to select the Events records to update

        Returns
        -------
        int
            The total number of Events records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Events records
        total = await Events.prisma().update_many(
            data={
                'childIDs': ['ejdjahicb']
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.EventsWhereInput] = None,
        cursor: Optional[types.EventsWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Events records present in the database

        Parameters
        ----------
        select
            Select the Events fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Events filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.EventsCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Events.prisma().count()

        # results: prisma.types.EventsCountAggregateOutput
        results = await Events.prisma().count(
            select={
                '_all': True,
                'userIDs': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.EventsCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.EventsWhereInput] = None,
        cursor: Optional[types.EventsWhereUniqueInput] = None,
    ) -> types.EventsCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.EventsCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.EventsWhereInput] = None,
        cursor: Optional[types.EventsWhereUniqueInput] = None,
    ) -> Union[int, types.EventsCountAggregateOutput]:
        """Count the number of Events records present in the database

        Parameters
        ----------
        select
            Select the Events fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Events filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.EventsCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Events.prisma().count()

        # results: prisma.types.EventsCountAggregateOutput
        results = await Events.prisma().count(
            select={
                '_all': True,
                'activityId': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.EventsCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.EventsWhereInput] = None
    ) -> int:
        """Delete multiple Events records.

        Parameters
        ----------
        where
            Optional Events filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Events records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Events records
        total = await Events.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.EventsScalarFieldKeys'],
        *,
        where: Optional['types.EventsWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.EventsAvgAggregateInput'] = None,
        sum: Optional['types.EventsSumAggregateInput'] = None,
        min: Optional['types.EventsMinAggregateInput'] = None,
        max: Optional['types.EventsMaxAggregateInput'] = None,
        having: Optional['types.EventsScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.EventsCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.EventsScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.EventsScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.EventsGroupByOutput']:
        """Group Events records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Events fields to group records by
        where
            Events filter to select records
        take
            Limit the maximum number of Events records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.EventsGroupByOutput]
            A list of dictionaries representing the Events record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Events records by createdAt values
        # and count how many records are in each group
        results = await Events.prisma().group_by(
            ['createdAt'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class ReviewsActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model


    async def create(
        self,
        data: types.ReviewsCreateInput,
        include: Optional[types.ReviewsInclude] = None
    ) -> _PrismaModelT:
        """Create a new Reviews record.

        Parameters
        ----------
        data
            Reviews record data
        include
            Specifies which relations should be loaded on the returned Reviews model

        Returns
        -------
        prisma.models.Reviews
            The created Reviews record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Reviews record from just the required fields
        reviews = await Reviews.prisma().create(
            data={
                # data to create a Reviews record
                'rating': 639686562,
                'eventId': 'gfeaahdeh',
                'parentId': 'bjafcgbffc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.ReviewsCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Reviews records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Reviews record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Reviews.prisma().create_many(
            data=[
                {
                    # data to create a Reviews record
                    'rating': 78746985,
                    'eventId': 'bdjidcidac',
                    'parentId': 'ifgaaagff',
                },
                {
                    # data to create a Reviews record
                    'rating': 1452336924,
                    'eventId': 'bfhdbjjgfd',
                    'parentId': 'cabdjadaji',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.ReviewsWhereUniqueInput,
        include: Optional[types.ReviewsInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Reviews record.

        Parameters
        ----------
        where
            Reviews filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Reviews model

        Returns
        -------
        prisma.models.Reviews
            The deleted Reviews record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        reviews = await Reviews.prisma().delete(
            where={
                'id': 'faajgfadf',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.ReviewsWhereUniqueInput,
        include: Optional[types.ReviewsInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Reviews record.

        Parameters
        ----------
        where
            Reviews filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Reviews model

        Returns
        -------
        prisma.models.Reviews
            The found Reviews record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        reviews = await Reviews.prisma().find_unique(
            where={
                'id': 'biaagcedjc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.ReviewsWhereUniqueInput,
        include: Optional[types.ReviewsInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Reviews record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Reviews filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Reviews model

        Returns
        -------
        prisma.models.Reviews
            The found Reviews record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        reviews = await Reviews.prisma().find_unique_or_raise(
            where={
                'id': 'cahhaghecf',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ReviewsWhereInput] = None,
        cursor: Optional[types.ReviewsWhereUniqueInput] = None,
        include: Optional[types.ReviewsInclude] = None,
        order: Optional[Union[types.ReviewsOrderByInput, List[types.ReviewsOrderByInput]]] = None,
        distinct: Optional[List[types.ReviewsScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Reviews records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Reviews records returned
        skip
            Ignore the first N results
        where
            Reviews filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Reviews model
        order
            Order the returned Reviews records by any field
        distinct
            Filter Reviews records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Reviews]
            The list of all Reviews records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Reviews records
        reviews = await Reviews.prisma().find_many(take=10)

        # find the first 5 Reviews records ordered by the id field
        reviews = await Reviews.prisma().find_many(
            take=5,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ReviewsWhereInput] = None,
        cursor: Optional[types.ReviewsWhereUniqueInput] = None,
        include: Optional[types.ReviewsInclude] = None,
        order: Optional[Union[types.ReviewsOrderByInput, List[types.ReviewsOrderByInput]]] = None,
        distinct: Optional[List[types.ReviewsScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Reviews record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Reviews filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Reviews model
        order
            Order the returned Reviews records by any field
        distinct
            Filter Reviews records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Reviews
            The first Reviews record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Reviews record ordered by the rating field
        reviews = await Reviews.prisma().find_first(
            skip=1,
            order={
                'rating': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ReviewsWhereInput] = None,
        cursor: Optional[types.ReviewsWhereUniqueInput] = None,
        include: Optional[types.ReviewsInclude] = None,
        order: Optional[Union[types.ReviewsOrderByInput, List[types.ReviewsOrderByInput]]] = None,
        distinct: Optional[List[types.ReviewsScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Reviews record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Reviews filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Reviews model
        order
            Order the returned Reviews records by any field
        distinct
            Filter Reviews records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Reviews
            The first Reviews record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Reviews record ordered by the eventId field
        reviews = await Reviews.prisma().find_first_or_raise(
            skip=1,
            order={
                'eventId': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.ReviewsUpdateInput,
        where: types.ReviewsWhereUniqueInput,
        include: Optional[types.ReviewsInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Reviews record.

        Parameters
        ----------
        data
            Reviews record data specifying what to update
        where
            Reviews filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Reviews model

        Returns
        -------
        prisma.models.Reviews
            The updated Reviews record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        reviews = await Reviews.prisma().update(
            where={
                'id': 'bghcbbcidi',
            },
            data={
                # data to update the Reviews record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.ReviewsWhereUniqueInput,
        data: types.ReviewsUpsertInput,
        include: Optional[types.ReviewsInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Reviews filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Reviews model

        Returns
        -------
        prisma.models.Reviews
            The created or updated Reviews record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        reviews = await Reviews.prisma().upsert(
            where={
                'id': 'jcgghhgdj',
            },
            data={
                'create': {
                    'id': 'jcgghhgdj',
                    'rating': 1452336924,
                    'eventId': 'bfhdbjjgfd',
                    'parentId': 'cabdjadaji',
                },
                'update': {
                    'rating': 1452336924,
                    'eventId': 'bfhdbjjgfd',
                    'parentId': 'cabdjadaji',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.ReviewsUpdateManyMutationInput,
        where: types.ReviewsWhereInput,
    ) -> int:
        """Update multiple Reviews records

        Parameters
        ----------
        data
            Reviews data to update the selected Reviews records to
        where
            Filter to select the Reviews records to update

        Returns
        -------
        int
            The total number of Reviews records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Reviews records
        total = await Reviews.prisma().update_many(
            data={
                'parentId': 'beehgcebbg'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ReviewsWhereInput] = None,
        cursor: Optional[types.ReviewsWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Reviews records present in the database

        Parameters
        ----------
        select
            Select the Reviews fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Reviews filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ReviewsCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Reviews.prisma().count()

        # results: prisma.types.ReviewsCountAggregateOutput
        results = await Reviews.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.ReviewsCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ReviewsWhereInput] = None,
        cursor: Optional[types.ReviewsWhereUniqueInput] = None,
    ) -> types.ReviewsCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.ReviewsCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ReviewsWhereInput] = None,
        cursor: Optional[types.ReviewsWhereUniqueInput] = None,
    ) -> Union[int, types.ReviewsCountAggregateOutput]:
        """Count the number of Reviews records present in the database

        Parameters
        ----------
        select
            Select the Reviews fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Reviews filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ReviewsCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Reviews.prisma().count()

        # results: prisma.types.ReviewsCountAggregateOutput
        results = await Reviews.prisma().count(
            select={
                '_all': True,
                'rating': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.ReviewsCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.ReviewsWhereInput] = None
    ) -> int:
        """Delete multiple Reviews records.

        Parameters
        ----------
        where
            Optional Reviews filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Reviews records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Reviews records
        total = await Reviews.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.ReviewsScalarFieldKeys'],
        *,
        where: Optional['types.ReviewsWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.ReviewsAvgAggregateInput'] = None,
        sum: Optional['types.ReviewsSumAggregateInput'] = None,
        min: Optional['types.ReviewsMinAggregateInput'] = None,
        max: Optional['types.ReviewsMaxAggregateInput'] = None,
        having: Optional['types.ReviewsScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.ReviewsCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.ReviewsScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.ReviewsScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.ReviewsGroupByOutput']:
        """Group Reviews records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Reviews fields to group records by
        where
            Reviews filter to select records
        take
            Limit the maximum number of Reviews records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.ReviewsGroupByOutput]
            A list of dictionaries representing the Reviews record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Reviews records by eventId values
        # and count how many records are in each group
        results = await Reviews.prisma().group_by(
            ['eventId'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models